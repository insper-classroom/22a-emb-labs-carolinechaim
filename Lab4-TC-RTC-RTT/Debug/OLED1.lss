
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000073c4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004073c4  004073c4  000173c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  004073cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000300  204009d0  00407d9c  000209d0  2**2
                  ALLOC
  4 .stack        00002000  20400cd0  0040809c  000209d0  2**0
                  ALLOC
  5 .heap         00000200  20402cd0  0040a09c  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001b5e9  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003ea5  00000000  00000000  0003c040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006a48  00000000  00000000  0003fee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a68  00000000  00000000  0004692d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ac8  00000000  00000000  00047395  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022557  00000000  00000000  00047e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001086a  00000000  00000000  0006a3b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00090936  00000000  00000000  0007ac1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002314  00000000  00000000  0010b554  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d0 2c 40 20 65 15 40 00 61 15 40 00 61 15 40 00     .,@ e.@.a.@.a.@.
  400010:	61 15 40 00 61 15 40 00 61 15 40 00 00 00 00 00     a.@.a.@.a.@.....
	...
  40002c:	61 15 40 00 61 15 40 00 00 00 00 00 61 15 40 00     a.@.a.@.....a.@.
  40003c:	61 15 40 00 61 15 40 00 61 15 40 00 b5 18 40 00     a.@.a.@.a.@...@.
  40004c:	8d 1a 40 00 61 15 40 00 61 15 40 00 61 15 40 00     ..@.a.@.a.@.a.@.
  40005c:	61 15 40 00 61 15 40 00 00 00 00 00 c5 10 40 00     a.@.a.@.......@.
  40006c:	d9 10 40 00 ed 10 40 00 61 15 40 00 61 15 40 00     ..@...@.a.@.a.@.
  40007c:	61 15 40 00 01 11 40 00 15 11 40 00 61 15 40 00     a.@...@...@.a.@.
  40008c:	61 15 40 00 61 15 40 00 61 15 40 00 61 15 40 00     a.@.a.@.a.@.a.@.
  40009c:	61 15 40 00 31 1a 40 00 5d 1a 40 00 61 15 40 00     a.@.1.@.].@.a.@.
  4000ac:	61 15 40 00 61 15 40 00 61 15 40 00 61 15 40 00     a.@.a.@.a.@.a.@.
  4000bc:	61 15 40 00 61 15 40 00 61 15 40 00 61 15 40 00     a.@.a.@.a.@.a.@.
  4000cc:	61 15 40 00 00 00 00 00 61 15 40 00 00 00 00 00     a.@.....a.@.....
  4000dc:	61 15 40 00 61 15 40 00 61 15 40 00 61 15 40 00     a.@.a.@.a.@.a.@.
  4000ec:	61 15 40 00 61 15 40 00 61 15 40 00 61 15 40 00     a.@.a.@.a.@.a.@.
  4000fc:	61 15 40 00 61 15 40 00 61 15 40 00 61 15 40 00     a.@.a.@.a.@.a.@.
  40010c:	61 15 40 00 61 15 40 00 00 00 00 00 00 00 00 00     a.@.a.@.........
  40011c:	00 00 00 00 61 15 40 00 61 15 40 00 61 15 40 00     ....a.@.a.@.a.@.
  40012c:	61 15 40 00 61 15 40 00 00 00 00 00 61 15 40 00     a.@.a.@.....a.@.
  40013c:	61 15 40 00                                         a.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	004073cc 	.word	0x004073cc

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004073cc 	.word	0x004073cc
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	004073cc 	.word	0x004073cc
  4001a8:	00000000 	.word	0x00000000

004001ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4001ac:	b921      	cbnz	r1, 4001b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4001ae:	6843      	ldr	r3, [r0, #4]
  4001b0:	f023 0301 	bic.w	r3, r3, #1
  4001b4:	6043      	str	r3, [r0, #4]
  4001b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4001b8:	6843      	ldr	r3, [r0, #4]
  4001ba:	f043 0301 	orr.w	r3, r3, #1
  4001be:	6043      	str	r3, [r0, #4]
  4001c0:	4770      	bx	lr

004001c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4001c2:	6201      	str	r1, [r0, #32]
  4001c4:	4770      	bx	lr

004001c6 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4001c6:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4001c8:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001ca:	6884      	ldr	r4, [r0, #8]
  4001cc:	42a5      	cmp	r5, r4
  4001ce:	d003      	beq.n	4001d8 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4001d0:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001d2:	6884      	ldr	r4, [r0, #8]
  4001d4:	42ac      	cmp	r4, r5
  4001d6:	d1fb      	bne.n	4001d0 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4001d8:	b161      	cbz	r1, 4001f4 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4001da:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4001de:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4001e2:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4001e6:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4001ea:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4001ee:	bf18      	it	ne
  4001f0:	300c      	addne	r0, #12
  4001f2:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4001f4:	b142      	cbz	r2, 400208 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4001f6:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4001fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4001fe:	f3c4 2003 	ubfx	r0, r4, #8, #4
  400202:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400206:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400208:	b143      	cbz	r3, 40021c <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40020a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40020e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400212:	f004 040f 	and.w	r4, r4, #15
  400216:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40021a:	601c      	str	r4, [r3, #0]
	}
}
  40021c:	bc30      	pop	{r4, r5}
  40021e:	4770      	bx	lr

00400220 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400220:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400222:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  400224:	f014 0f01 	tst.w	r4, #1
  400228:	d005      	beq.n	400236 <rtc_set_time+0x16>
  40022a:	290c      	cmp	r1, #12
  40022c:	d903      	bls.n	400236 <rtc_set_time+0x16>
			ul_hour -= 12;
  40022e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400230:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  400234:	e000      	b.n	400238 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  400236:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400238:	4c1c      	ldr	r4, [pc, #112]	; (4002ac <rtc_set_time+0x8c>)
  40023a:	fba4 5603 	umull	r5, r6, r4, r3
  40023e:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400240:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  400244:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  400248:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40024c:	fba4 6502 	umull	r6, r5, r4, r2
  400250:	08ed      	lsrs	r5, r5, #3
  400252:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400256:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40025a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40025e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  400262:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400264:	fba4 4201 	umull	r4, r2, r4, r1
  400268:	08d2      	lsrs	r2, r2, #3
  40026a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40026e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400272:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400276:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40027a:	6983      	ldr	r3, [r0, #24]
  40027c:	f013 0f04 	tst.w	r3, #4
  400280:	d0fb      	beq.n	40027a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400282:	6803      	ldr	r3, [r0, #0]
  400284:	f043 0301 	orr.w	r3, r3, #1
  400288:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40028a:	6983      	ldr	r3, [r0, #24]
  40028c:	f013 0f01 	tst.w	r3, #1
  400290:	d0fb      	beq.n	40028a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400292:	2301      	movs	r3, #1
  400294:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400296:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400298:	6803      	ldr	r3, [r0, #0]
  40029a:	f023 0301 	bic.w	r3, r3, #1
  40029e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4002a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4002a2:	f000 0001 	and.w	r0, r0, #1
  4002a6:	bcf0      	pop	{r4, r5, r6, r7}
  4002a8:	4770      	bx	lr
  4002aa:	bf00      	nop
  4002ac:	cccccccd 	.word	0xcccccccd

004002b0 <rtc_set_time_alarm>:
 */
uint32_t rtc_set_time_alarm(Rtc *p_rtc,
		uint32_t ul_hour_flag, uint32_t ul_hour,
		uint32_t ul_minute_flag, uint32_t ul_minute,
		uint32_t ul_second_flag, uint32_t ul_second)
{
  4002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4002b2:	9c05      	ldr	r4, [sp, #20]
  4002b4:	9d06      	ldr	r5, [sp, #24]
  4002b6:	9f07      	ldr	r7, [sp, #28]
	uint32_t ul_alarm = 0;

	/* Hour alarm setting */
	if (ul_hour_flag) {
  4002b8:	460e      	mov	r6, r1
  4002ba:	b1b1      	cbz	r1, 4002ea <rtc_set_time_alarm+0x3a>
		/* If 12-hour mode, set AMPM bit */
		if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4002bc:	6841      	ldr	r1, [r0, #4]
			if (ul_hour > 12) {
  4002be:	f011 0f01 	tst.w	r1, #1
  4002c2:	d005      	beq.n	4002d0 <rtc_set_time_alarm+0x20>
  4002c4:	2a0c      	cmp	r2, #12
  4002c6:	d903      	bls.n	4002d0 <rtc_set_time_alarm+0x20>
				ul_hour -= 12;
  4002c8:	3a0c      	subs	r2, #12
				ul_alarm |= RTC_TIMR_AMPM;
  4002ca:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  4002ce:	e000      	b.n	4002d2 <rtc_set_time_alarm+0x22>
	uint32_t ul_alarm = 0;
  4002d0:	2600      	movs	r6, #0
			}
		}

		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4002d2:	4919      	ldr	r1, [pc, #100]	; (400338 <rtc_set_time_alarm+0x88>)
  4002d4:	fba1 e102 	umull	lr, r1, r1, r2
  4002d8:	08c9      	lsrs	r1, r1, #3
				((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4002da:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
  4002de:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
  4002e2:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4002e4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  4002e8:	4316      	orrs	r6, r2
	}

	/* Minute alarm setting */
	if (ul_minute_flag) {
  4002ea:	b15b      	cbz	r3, 400304 <rtc_set_time_alarm+0x54>
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002ec:	4b12      	ldr	r3, [pc, #72]	; (400338 <rtc_set_time_alarm+0x88>)
  4002ee:	fba3 2304 	umull	r2, r3, r3, r4
  4002f2:	08db      	lsrs	r3, r3, #3
				((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4002f4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4002f8:	eba4 0442 	sub.w	r4, r4, r2, lsl #1
  4002fc:	0224      	lsls	r4, r4, #8
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002fe:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
  400302:	4326      	orrs	r6, r4
	}

	/* Second alarm setting */
	if (ul_second_flag) {
  400304:	b155      	cbz	r5, 40031c <rtc_set_time_alarm+0x6c>
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400306:	4b0c      	ldr	r3, [pc, #48]	; (400338 <rtc_set_time_alarm+0x88>)
  400308:	fba3 2307 	umull	r2, r3, r3, r7
  40030c:	08db      	lsrs	r3, r3, #3
				((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  40030e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  400312:	eba7 0742 	sub.w	r7, r7, r2, lsl #1
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400316:	ea47 1303 	orr.w	r3, r7, r3, lsl #4
  40031a:	431e      	orrs	r6, r3
	}

	p_rtc->RTC_TIMALR &= ~(RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  40031c:	6902      	ldr	r2, [r0, #16]
  40031e:	4b07      	ldr	r3, [pc, #28]	; (40033c <rtc_set_time_alarm+0x8c>)
  400320:	4013      	ands	r3, r2
  400322:	6103      	str	r3, [r0, #16]
	p_rtc->RTC_TIMALR = ul_alarm;
  400324:	6106      	str	r6, [r0, #16]
	p_rtc->RTC_TIMALR |= (RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  400326:	6902      	ldr	r2, [r0, #16]
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <rtc_set_time_alarm+0x90>)
  40032a:	4313      	orrs	r3, r2
  40032c:	6103      	str	r3, [r0, #16]

	return (p_rtc->RTC_VER & RTC_VER_NVTIMALR);
  40032e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400330:	f000 0004 	and.w	r0, r0, #4
  400334:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400336:	bf00      	nop
  400338:	cccccccd 	.word	0xcccccccd
  40033c:	ff7f7f7f 	.word	0xff7f7f7f
  400340:	00808080 	.word	0x00808080

00400344 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  400344:	b4f0      	push	{r4, r5, r6, r7}
  400346:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  400348:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  40034a:	68c4      	ldr	r4, [r0, #12]
  40034c:	42a5      	cmp	r5, r4
  40034e:	d003      	beq.n	400358 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  400350:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  400352:	68c4      	ldr	r4, [r0, #12]
  400354:	42ac      	cmp	r4, r5
  400356:	d1fb      	bne.n	400350 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  400358:	b199      	cbz	r1, 400382 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40035a:	f3c4 3003 	ubfx	r0, r4, #12, #4
  40035e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400362:	f3c4 2703 	ubfx	r7, r4, #8, #4
  400366:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40036a:	f3c4 1002 	ubfx	r0, r4, #4, #3
  40036e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  400372:	f004 000f 	and.w	r0, r4, #15
  400376:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40037a:	2564      	movs	r5, #100	; 0x64
  40037c:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  400380:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  400382:	b142      	cbz	r2, 400396 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400384:	f3c4 5000 	ubfx	r0, r4, #20, #1
  400388:	0081      	lsls	r1, r0, #2
  40038a:	4408      	add	r0, r1
  40038c:	f3c4 4103 	ubfx	r1, r4, #16, #4
  400390:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  400394:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  400396:	b143      	cbz	r3, 4003aa <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400398:	f3c4 7201 	ubfx	r2, r4, #28, #2
  40039c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4003a0:	f3c4 6103 	ubfx	r1, r4, #24, #4
  4003a4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  4003a8:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  4003aa:	b116      	cbz	r6, 4003b2 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  4003ac:	f3c4 5442 	ubfx	r4, r4, #21, #3
  4003b0:	6034      	str	r4, [r6, #0]
	}
}
  4003b2:	bcf0      	pop	{r4, r5, r6, r7}
  4003b4:	4770      	bx	lr
	...

004003b8 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  4003b8:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003ba:	4d2a      	ldr	r5, [pc, #168]	; (400464 <rtc_set_date+0xac>)
  4003bc:	fba5 4603 	umull	r4, r6, r5, r3
  4003c0:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  4003c2:	9c03      	ldr	r4, [sp, #12]
  4003c4:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003c6:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4003ca:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4003ce:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003d2:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4003d6:	fba5 6402 	umull	r6, r4, r5, r2
  4003da:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003dc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4003e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4003e4:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003e8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4003ec:	4b1e      	ldr	r3, [pc, #120]	; (400468 <rtc_set_date+0xb0>)
  4003ee:	fba3 4301 	umull	r4, r3, r3, r1
  4003f2:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003f4:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  4003f8:	4b1c      	ldr	r3, [pc, #112]	; (40046c <rtc_set_date+0xb4>)
  4003fa:	fba3 4301 	umull	r4, r3, r3, r1
  4003fe:	095b      	lsrs	r3, r3, #5
  400400:	fba5 6403 	umull	r6, r4, r5, r3
  400404:	08e4      	lsrs	r4, r4, #3
  400406:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40040a:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40040e:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400410:	fba5 4301 	umull	r4, r3, r5, r1
  400414:	08db      	lsrs	r3, r3, #3
  400416:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  40041a:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40041e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400422:	fba5 1503 	umull	r1, r5, r5, r3
  400426:	08ed      	lsrs	r5, r5, #3
  400428:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40042c:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400430:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  400434:	6983      	ldr	r3, [r0, #24]
  400436:	f013 0f04 	tst.w	r3, #4
  40043a:	d0fb      	beq.n	400434 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  40043c:	6803      	ldr	r3, [r0, #0]
  40043e:	f043 0302 	orr.w	r3, r3, #2
  400442:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400444:	6983      	ldr	r3, [r0, #24]
  400446:	f013 0f01 	tst.w	r3, #1
  40044a:	d0fb      	beq.n	400444 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40044c:	2301      	movs	r3, #1
  40044e:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  400450:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  400452:	6803      	ldr	r3, [r0, #0]
  400454:	f023 0302 	bic.w	r3, r3, #2
  400458:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  40045a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40045c:	f000 0002 	and.w	r0, r0, #2
  400460:	bc70      	pop	{r4, r5, r6}
  400462:	4770      	bx	lr
  400464:	cccccccd 	.word	0xcccccccd
  400468:	10624dd3 	.word	0x10624dd3
  40046c:	51eb851f 	.word	0x51eb851f

00400470 <rtc_set_date_alarm>:
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date_alarm(Rtc *p_rtc,
		uint32_t ul_month_flag, uint32_t ul_month,
		uint32_t ul_day_flag, uint32_t ul_day)
{
  400470:	b430      	push	{r4, r5}
  400472:	9d02      	ldr	r5, [sp, #8]
	uint32_t ul_alarm = 0;

	/* Month alarm setting */
	if (ul_month_flag) {
  400474:	460c      	mov	r4, r1
  400476:	b151      	cbz	r1, 40048e <rtc_set_date_alarm+0x1e>
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400478:	4c12      	ldr	r4, [pc, #72]	; (4004c4 <rtc_set_date_alarm+0x54>)
  40047a:	fba4 1402 	umull	r1, r4, r4, r2
  40047e:	08e4      	lsrs	r4, r4, #3
				((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  400480:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  400484:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
  400488:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40048a:	ea42 5404 	orr.w	r4, r2, r4, lsl #20
	}

	/* Day alarm setting */
	if (ul_day_flag) {
  40048e:	b15b      	cbz	r3, 4004a8 <rtc_set_date_alarm+0x38>
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400490:	4a0c      	ldr	r2, [pc, #48]	; (4004c4 <rtc_set_date_alarm+0x54>)
  400492:	fba2 3205 	umull	r3, r2, r2, r5
  400496:	08d2      	lsrs	r2, r2, #3
				((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  400498:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  40049c:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
  4004a0:	061b      	lsls	r3, r3, #24
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4004a2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
  4004a6:	431c      	orrs	r4, r3
	}

	/* Set alarm */
	p_rtc->RTC_CALALR &= ~(RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  4004a8:	6942      	ldr	r2, [r0, #20]
  4004aa:	4b07      	ldr	r3, [pc, #28]	; (4004c8 <rtc_set_date_alarm+0x58>)
  4004ac:	4013      	ands	r3, r2
  4004ae:	6143      	str	r3, [r0, #20]
	p_rtc->RTC_CALALR = ul_alarm;
  4004b0:	6144      	str	r4, [r0, #20]
	p_rtc->RTC_CALALR |= (RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  4004b2:	6942      	ldr	r2, [r0, #20]
  4004b4:	4b05      	ldr	r3, [pc, #20]	; (4004cc <rtc_set_date_alarm+0x5c>)
  4004b6:	4313      	orrs	r3, r2
  4004b8:	6143      	str	r3, [r0, #20]

	return (p_rtc->RTC_VER & RTC_VER_NVCALALR);
  4004ba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4004bc:	f000 0008 	and.w	r0, r0, #8
  4004c0:	bc30      	pop	{r4, r5}
  4004c2:	4770      	bx	lr
  4004c4:	cccccccd 	.word	0xcccccccd
  4004c8:	7f7fffff 	.word	0x7f7fffff
  4004cc:	80800000 	.word	0x80800000

004004d0 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  4004d0:	6980      	ldr	r0, [r0, #24]
}
  4004d2:	4770      	bx	lr

004004d4 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  4004d4:	61c1      	str	r1, [r0, #28]
  4004d6:	4770      	bx	lr

004004d8 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4004d8:	4b03      	ldr	r3, [pc, #12]	; (4004e8 <rtt_init+0x10>)
  4004da:	681b      	ldr	r3, [r3, #0]
  4004dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4004e0:	4319      	orrs	r1, r3
  4004e2:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  4004e4:	2000      	movs	r0, #0
  4004e6:	4770      	bx	lr
  4004e8:	204009ec 	.word	0x204009ec

004004ec <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  4004ec:	b941      	cbnz	r1, 400500 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  4004ee:	4a09      	ldr	r2, [pc, #36]	; (400514 <rtt_sel_source+0x28>)
  4004f0:	6813      	ldr	r3, [r2, #0]
  4004f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  4004f6:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4004f8:	6802      	ldr	r2, [r0, #0]
  4004fa:	4313      	orrs	r3, r2
  4004fc:	6003      	str	r3, [r0, #0]
  4004fe:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  400500:	4a04      	ldr	r2, [pc, #16]	; (400514 <rtt_sel_source+0x28>)
  400502:	6813      	ldr	r3, [r2, #0]
  400504:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400508:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40050a:	6802      	ldr	r2, [r0, #0]
  40050c:	4313      	orrs	r3, r2
  40050e:	6003      	str	r3, [r0, #0]
  400510:	4770      	bx	lr
  400512:	bf00      	nop
  400514:	204009ec 	.word	0x204009ec

00400518 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  400518:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40051a:	4b03      	ldr	r3, [pc, #12]	; (400528 <rtt_enable_interrupt+0x10>)
  40051c:	681b      	ldr	r3, [r3, #0]
  40051e:	4319      	orrs	r1, r3
  400520:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  400522:	6001      	str	r1, [r0, #0]
  400524:	4770      	bx	lr
  400526:	bf00      	nop
  400528:	204009ec 	.word	0x204009ec

0040052c <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  40052c:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  40052e:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400532:	4b02      	ldr	r3, [pc, #8]	; (40053c <rtt_disable_interrupt+0x10>)
  400534:	681b      	ldr	r3, [r3, #0]
  400536:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  400538:	6001      	str	r1, [r0, #0]
  40053a:	4770      	bx	lr
  40053c:	204009ec 	.word	0x204009ec

00400540 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  400540:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  400542:	6883      	ldr	r3, [r0, #8]
  400544:	429a      	cmp	r2, r3
  400546:	d003      	beq.n	400550 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  400548:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  40054a:	6883      	ldr	r3, [r0, #8]
  40054c:	4293      	cmp	r3, r2
  40054e:	d1fb      	bne.n	400548 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  400550:	4618      	mov	r0, r3
  400552:	4770      	bx	lr

00400554 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400554:	68c0      	ldr	r0, [r0, #12]
}
  400556:	4770      	bx	lr

00400558 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  400558:	b570      	push	{r4, r5, r6, lr}
  40055a:	4606      	mov	r6, r0
  40055c:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  40055e:	6804      	ldr	r4, [r0, #0]
  400560:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400564:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400568:	4809      	ldr	r0, [pc, #36]	; (400590 <rtt_write_alarm_time+0x38>)
  40056a:	4b0a      	ldr	r3, [pc, #40]	; (400594 <rtt_write_alarm_time+0x3c>)
  40056c:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  40056e:	b92d      	cbnz	r5, 40057c <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400570:	f04f 33ff 	mov.w	r3, #4294967295
  400574:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  400576:	b924      	cbnz	r4, 400582 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400578:	2000      	movs	r0, #0
  40057a:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  40057c:	3d01      	subs	r5, #1
  40057e:	6075      	str	r5, [r6, #4]
  400580:	e7f9      	b.n	400576 <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400582:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400586:	4802      	ldr	r0, [pc, #8]	; (400590 <rtt_write_alarm_time+0x38>)
  400588:	4b03      	ldr	r3, [pc, #12]	; (400598 <rtt_write_alarm_time+0x40>)
  40058a:	4798      	blx	r3
  40058c:	e7f4      	b.n	400578 <rtt_write_alarm_time+0x20>
  40058e:	bf00      	nop
  400590:	400e1830 	.word	0x400e1830
  400594:	0040052d 	.word	0x0040052d
  400598:	00400519 	.word	0x00400519

0040059c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  40059c:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40059e:	4b07      	ldr	r3, [pc, #28]	; (4005bc <spi_enable_clock+0x20>)
  4005a0:	4298      	cmp	r0, r3
  4005a2:	d003      	beq.n	4005ac <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4005a4:	4b06      	ldr	r3, [pc, #24]	; (4005c0 <spi_enable_clock+0x24>)
  4005a6:	4298      	cmp	r0, r3
  4005a8:	d004      	beq.n	4005b4 <spi_enable_clock+0x18>
  4005aa:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4005ac:	2015      	movs	r0, #21
  4005ae:	4b05      	ldr	r3, [pc, #20]	; (4005c4 <spi_enable_clock+0x28>)
  4005b0:	4798      	blx	r3
  4005b2:	bd08      	pop	{r3, pc}
  4005b4:	202a      	movs	r0, #42	; 0x2a
  4005b6:	4b03      	ldr	r3, [pc, #12]	; (4005c4 <spi_enable_clock+0x28>)
  4005b8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4005ba:	e7f6      	b.n	4005aa <spi_enable_clock+0xe>
  4005bc:	40008000 	.word	0x40008000
  4005c0:	40058000 	.word	0x40058000
  4005c4:	00401249 	.word	0x00401249

004005c8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4005c8:	6843      	ldr	r3, [r0, #4]
  4005ca:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4005ce:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4005d0:	6843      	ldr	r3, [r0, #4]
  4005d2:	0409      	lsls	r1, r1, #16
  4005d4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4005d8:	4319      	orrs	r1, r3
  4005da:	6041      	str	r1, [r0, #4]
  4005dc:	4770      	bx	lr

004005de <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4005de:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4005e0:	f643 2499 	movw	r4, #15001	; 0x3a99
  4005e4:	6905      	ldr	r5, [r0, #16]
  4005e6:	f015 0f02 	tst.w	r5, #2
  4005ea:	d103      	bne.n	4005f4 <spi_write+0x16>
		if (!timeout--) {
  4005ec:	3c01      	subs	r4, #1
  4005ee:	d1f9      	bne.n	4005e4 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4005f0:	2001      	movs	r0, #1
  4005f2:	e00c      	b.n	40060e <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4005f4:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4005f6:	f014 0f02 	tst.w	r4, #2
  4005fa:	d006      	beq.n	40060a <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4005fc:	0412      	lsls	r2, r2, #16
  4005fe:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400602:	4311      	orrs	r1, r2
		if (uc_last) {
  400604:	b10b      	cbz	r3, 40060a <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400606:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40060a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  40060c:	2000      	movs	r0, #0
}
  40060e:	bc30      	pop	{r4, r5}
  400610:	4770      	bx	lr

00400612 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400612:	b932      	cbnz	r2, 400622 <spi_set_clock_polarity+0x10>
  400614:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400618:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40061a:	f023 0301 	bic.w	r3, r3, #1
  40061e:	6303      	str	r3, [r0, #48]	; 0x30
  400620:	4770      	bx	lr
  400622:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400626:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400628:	f043 0301 	orr.w	r3, r3, #1
  40062c:	6303      	str	r3, [r0, #48]	; 0x30
  40062e:	4770      	bx	lr

00400630 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400630:	b932      	cbnz	r2, 400640 <spi_set_clock_phase+0x10>
  400632:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400636:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400638:	f023 0302 	bic.w	r3, r3, #2
  40063c:	6303      	str	r3, [r0, #48]	; 0x30
  40063e:	4770      	bx	lr
  400640:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400644:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400646:	f043 0302 	orr.w	r3, r3, #2
  40064a:	6303      	str	r3, [r0, #48]	; 0x30
  40064c:	4770      	bx	lr

0040064e <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40064e:	2a04      	cmp	r2, #4
  400650:	d003      	beq.n	40065a <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400652:	b16a      	cbz	r2, 400670 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400654:	2a08      	cmp	r2, #8
  400656:	d016      	beq.n	400686 <spi_configure_cs_behavior+0x38>
  400658:	4770      	bx	lr
  40065a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40065e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400660:	f023 0308 	bic.w	r3, r3, #8
  400664:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400666:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400668:	f043 0304 	orr.w	r3, r3, #4
  40066c:	6303      	str	r3, [r0, #48]	; 0x30
  40066e:	4770      	bx	lr
  400670:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400674:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400676:	f023 0308 	bic.w	r3, r3, #8
  40067a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40067c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40067e:	f023 0304 	bic.w	r3, r3, #4
  400682:	6303      	str	r3, [r0, #48]	; 0x30
  400684:	4770      	bx	lr
  400686:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40068a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40068c:	f043 0308 	orr.w	r3, r3, #8
  400690:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  400692:	e7e1      	b.n	400658 <spi_configure_cs_behavior+0xa>

00400694 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400694:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400698:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40069a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40069e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4006a0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4006a2:	431a      	orrs	r2, r3
  4006a4:	630a      	str	r2, [r1, #48]	; 0x30
  4006a6:	4770      	bx	lr

004006a8 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4006a8:	1e43      	subs	r3, r0, #1
  4006aa:	4419      	add	r1, r3
  4006ac:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4006b0:	1e43      	subs	r3, r0, #1
  4006b2:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4006b4:	bf94      	ite	ls
  4006b6:	b200      	sxthls	r0, r0
		return -1;
  4006b8:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4006bc:	4770      	bx	lr

004006be <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4006be:	b17a      	cbz	r2, 4006e0 <spi_set_baudrate_div+0x22>
{
  4006c0:	b410      	push	{r4}
  4006c2:	4614      	mov	r4, r2
  4006c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4006c8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4006ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4006ce:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4006d0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4006d2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4006d6:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4006d8:	2000      	movs	r0, #0
}
  4006da:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006de:	4770      	bx	lr
        return -1;
  4006e0:	f04f 30ff 	mov.w	r0, #4294967295
  4006e4:	4770      	bx	lr

004006e6 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4006e6:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4006e8:	0189      	lsls	r1, r1, #6
  4006ea:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4006ec:	2402      	movs	r4, #2
  4006ee:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4006f0:	f04f 31ff 	mov.w	r1, #4294967295
  4006f4:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4006f6:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4006f8:	605a      	str	r2, [r3, #4]
}
  4006fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006fe:	4770      	bx	lr

00400700 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400700:	0189      	lsls	r1, r1, #6
  400702:	2305      	movs	r3, #5
  400704:	5043      	str	r3, [r0, r1]
  400706:	4770      	bx	lr

00400708 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400708:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40070c:	61ca      	str	r2, [r1, #28]
  40070e:	4770      	bx	lr

00400710 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400710:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400714:	624a      	str	r2, [r1, #36]	; 0x24
  400716:	4770      	bx	lr

00400718 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400718:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  40071c:	6a08      	ldr	r0, [r1, #32]
}
  40071e:	4770      	bx	lr

00400720 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400720:	b4f0      	push	{r4, r5, r6, r7}
  400722:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400724:	2402      	movs	r4, #2
  400726:	9401      	str	r4, [sp, #4]
  400728:	2408      	movs	r4, #8
  40072a:	9402      	str	r4, [sp, #8]
  40072c:	2420      	movs	r4, #32
  40072e:	9403      	str	r4, [sp, #12]
  400730:	2480      	movs	r4, #128	; 0x80
  400732:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400734:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400736:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400738:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  40073a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  40073e:	d814      	bhi.n	40076a <tc_find_mck_divisor+0x4a>
  400740:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400742:	42a0      	cmp	r0, r4
  400744:	d217      	bcs.n	400776 <tc_find_mck_divisor+0x56>
  400746:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400748:	af01      	add	r7, sp, #4
  40074a:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  40074e:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400752:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400754:	4284      	cmp	r4, r0
  400756:	d30a      	bcc.n	40076e <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400758:	4286      	cmp	r6, r0
  40075a:	d90d      	bls.n	400778 <tc_find_mck_divisor+0x58>
			ul_index++) {
  40075c:	3501      	adds	r5, #1
	for (ul_index = 0;
  40075e:	2d05      	cmp	r5, #5
  400760:	d1f3      	bne.n	40074a <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400762:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400764:	b006      	add	sp, #24
  400766:	bcf0      	pop	{r4, r5, r6, r7}
  400768:	4770      	bx	lr
			return 0;
  40076a:	2000      	movs	r0, #0
  40076c:	e7fa      	b.n	400764 <tc_find_mck_divisor+0x44>
  40076e:	2000      	movs	r0, #0
  400770:	e7f8      	b.n	400764 <tc_find_mck_divisor+0x44>
	return 1;
  400772:	2001      	movs	r0, #1
  400774:	e7f6      	b.n	400764 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400776:	2500      	movs	r5, #0
	if (p_uldiv) {
  400778:	b12a      	cbz	r2, 400786 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  40077a:	a906      	add	r1, sp, #24
  40077c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400780:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400784:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400786:	2b00      	cmp	r3, #0
  400788:	d0f3      	beq.n	400772 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  40078a:	601d      	str	r5, [r3, #0]
	return 1;
  40078c:	2001      	movs	r0, #1
  40078e:	e7e9      	b.n	400764 <tc_find_mck_divisor+0x44>

00400790 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  400790:	4b01      	ldr	r3, [pc, #4]	; (400798 <gfx_mono_set_framebuffer+0x8>)
  400792:	6018      	str	r0, [r3, #0]
  400794:	4770      	bx	lr
  400796:	bf00      	nop
  400798:	204009f0 	.word	0x204009f0

0040079c <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  40079c:	4b02      	ldr	r3, [pc, #8]	; (4007a8 <gfx_mono_framebuffer_put_byte+0xc>)
  40079e:	681b      	ldr	r3, [r3, #0]
  4007a0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4007a4:	5442      	strb	r2, [r0, r1]
  4007a6:	4770      	bx	lr
  4007a8:	204009f0 	.word	0x204009f0

004007ac <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4007ac:	4b02      	ldr	r3, [pc, #8]	; (4007b8 <gfx_mono_framebuffer_get_byte+0xc>)
  4007ae:	681b      	ldr	r3, [r3, #0]
  4007b0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  4007b4:	5c40      	ldrb	r0, [r0, r1]
  4007b6:	4770      	bx	lr
  4007b8:	204009f0 	.word	0x204009f0

004007bc <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  4007bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  4007c0:	1884      	adds	r4, r0, r2
  4007c2:	2c80      	cmp	r4, #128	; 0x80
  4007c4:	dd02      	ble.n	4007cc <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  4007c6:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  4007ca:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  4007cc:	b322      	cbz	r2, 400818 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  4007ce:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  4007d0:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  4007d4:	2601      	movs	r6, #1
  4007d6:	fa06 f101 	lsl.w	r1, r6, r1
  4007da:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  4007dc:	2b01      	cmp	r3, #1
  4007de:	d01d      	beq.n	40081c <gfx_mono_generic_draw_horizontal_line+0x60>
  4007e0:	2b00      	cmp	r3, #0
  4007e2:	d035      	beq.n	400850 <gfx_mono_generic_draw_horizontal_line+0x94>
  4007e4:	2b02      	cmp	r3, #2
  4007e6:	d117      	bne.n	400818 <gfx_mono_generic_draw_horizontal_line+0x5c>
  4007e8:	3801      	subs	r0, #1
  4007ea:	b2c7      	uxtb	r7, r0
  4007ec:	19d4      	adds	r4, r2, r7
  4007ee:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  4007f0:	f8df a090 	ldr.w	sl, [pc, #144]	; 400884 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  4007f4:	f04f 0900 	mov.w	r9, #0
  4007f8:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400888 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4007fc:	4621      	mov	r1, r4
  4007fe:	4628      	mov	r0, r5
  400800:	47d0      	blx	sl
			temp ^= pixelmask;
  400802:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400806:	464b      	mov	r3, r9
  400808:	b2d2      	uxtb	r2, r2
  40080a:	4621      	mov	r1, r4
  40080c:	4628      	mov	r0, r5
  40080e:	47c0      	blx	r8
  400810:	3c01      	subs	r4, #1
  400812:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400814:	42bc      	cmp	r4, r7
  400816:	d1f1      	bne.n	4007fc <gfx_mono_generic_draw_horizontal_line+0x40>
  400818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40081c:	3801      	subs	r0, #1
  40081e:	b2c7      	uxtb	r7, r0
  400820:	19d4      	adds	r4, r2, r7
  400822:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400824:	f8df a05c 	ldr.w	sl, [pc, #92]	; 400884 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  400828:	f04f 0900 	mov.w	r9, #0
  40082c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400888 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400830:	4621      	mov	r1, r4
  400832:	4628      	mov	r0, r5
  400834:	47d0      	blx	sl
			temp |= pixelmask;
  400836:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40083a:	464b      	mov	r3, r9
  40083c:	b2d2      	uxtb	r2, r2
  40083e:	4621      	mov	r1, r4
  400840:	4628      	mov	r0, r5
  400842:	47c0      	blx	r8
  400844:	3c01      	subs	r4, #1
  400846:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400848:	42bc      	cmp	r4, r7
  40084a:	d1f1      	bne.n	400830 <gfx_mono_generic_draw_horizontal_line+0x74>
  40084c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400850:	3801      	subs	r0, #1
  400852:	b2c7      	uxtb	r7, r0
  400854:	19d4      	adds	r4, r2, r7
  400856:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400858:	f8df 8028 	ldr.w	r8, [pc, #40]	; 400884 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  40085c:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  40085e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 400888 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400862:	4621      	mov	r1, r4
  400864:	4628      	mov	r0, r5
  400866:	47c0      	blx	r8
			temp &= ~pixelmask;
  400868:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40086c:	2300      	movs	r3, #0
  40086e:	b2d2      	uxtb	r2, r2
  400870:	4621      	mov	r1, r4
  400872:	4628      	mov	r0, r5
  400874:	47c8      	blx	r9
  400876:	3c01      	subs	r4, #1
  400878:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40087a:	42bc      	cmp	r4, r7
  40087c:	d1f1      	bne.n	400862 <gfx_mono_generic_draw_horizontal_line+0xa6>
  40087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400882:	bf00      	nop
  400884:	00400abd 	.word	0x00400abd
  400888:	004009b9 	.word	0x004009b9

0040088c <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  40088c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400890:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  400894:	b18b      	cbz	r3, 4008ba <gfx_mono_generic_draw_filled_rect+0x2e>
  400896:	461c      	mov	r4, r3
  400898:	4690      	mov	r8, r2
  40089a:	4606      	mov	r6, r0
  40089c:	1e4d      	subs	r5, r1, #1
  40089e:	b2ed      	uxtb	r5, r5
  4008a0:	442c      	add	r4, r5
  4008a2:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  4008a4:	f8df 9018 	ldr.w	r9, [pc, #24]	; 4008c0 <gfx_mono_generic_draw_filled_rect+0x34>
  4008a8:	463b      	mov	r3, r7
  4008aa:	4642      	mov	r2, r8
  4008ac:	4621      	mov	r1, r4
  4008ae:	4630      	mov	r0, r6
  4008b0:	47c8      	blx	r9
  4008b2:	3c01      	subs	r4, #1
  4008b4:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  4008b6:	42ac      	cmp	r4, r5
  4008b8:	d1f6      	bne.n	4008a8 <gfx_mono_generic_draw_filled_rect+0x1c>
  4008ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4008be:	bf00      	nop
  4008c0:	004007bd 	.word	0x004007bd

004008c4 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  4008c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4008c8:	b083      	sub	sp, #12
  4008ca:	4604      	mov	r4, r0
  4008cc:	4688      	mov	r8, r1
  4008ce:	4691      	mov	r9, r2
  4008d0:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  4008d2:	7a5b      	ldrb	r3, [r3, #9]
  4008d4:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4008d8:	2100      	movs	r1, #0
  4008da:	9100      	str	r1, [sp, #0]
  4008dc:	4649      	mov	r1, r9
  4008de:	4640      	mov	r0, r8
  4008e0:	4d21      	ldr	r5, [pc, #132]	; (400968 <gfx_mono_draw_char+0xa4>)
  4008e2:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  4008e4:	f89b 3000 	ldrb.w	r3, [fp]
  4008e8:	b113      	cbz	r3, 4008f0 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  4008ea:	b003      	add	sp, #12
  4008ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  4008f0:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4008f4:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  4008f6:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  4008fa:	bf18      	it	ne
  4008fc:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  4008fe:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  400902:	f89b 700a 	ldrb.w	r7, [fp, #10]
  400906:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  400908:	fb17 f70a 	smulbb	r7, r7, sl
  40090c:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  400910:	f8db 3004 	ldr.w	r3, [fp, #4]
  400914:	fa13 f787 	uxtah	r7, r3, r7
  400918:	e01f      	b.n	40095a <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  40091a:	0064      	lsls	r4, r4, #1
  40091c:	b2e4      	uxtb	r4, r4
  40091e:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400920:	b2eb      	uxtb	r3, r5
  400922:	429e      	cmp	r6, r3
  400924:	d910      	bls.n	400948 <gfx_mono_draw_char+0x84>
  400926:	b2eb      	uxtb	r3, r5
  400928:	eb08 0003 	add.w	r0, r8, r3
  40092c:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  40092e:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400932:	bf08      	it	eq
  400934:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  400938:	f014 0f80 	tst.w	r4, #128	; 0x80
  40093c:	d0ed      	beq.n	40091a <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  40093e:	2201      	movs	r2, #1
  400940:	4649      	mov	r1, r9
  400942:	4b0a      	ldr	r3, [pc, #40]	; (40096c <gfx_mono_draw_char+0xa8>)
  400944:	4798      	blx	r3
  400946:	e7e8      	b.n	40091a <gfx_mono_draw_char+0x56>
		inc_y += 1;
  400948:	f109 0901 	add.w	r9, r9, #1
  40094c:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  400950:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  400954:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  400958:	d0c7      	beq.n	4008ea <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  40095a:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  40095e:	2e00      	cmp	r6, #0
  400960:	d0f2      	beq.n	400948 <gfx_mono_draw_char+0x84>
  400962:	2500      	movs	r5, #0
  400964:	462c      	mov	r4, r5
  400966:	e7de      	b.n	400926 <gfx_mono_draw_char+0x62>
  400968:	0040088d 	.word	0x0040088d
  40096c:	00400a59 	.word	0x00400a59

00400970 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400974:	4604      	mov	r4, r0
  400976:	4690      	mov	r8, r2
  400978:	461d      	mov	r5, r3
  40097a:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  40097c:	4f0d      	ldr	r7, [pc, #52]	; (4009b4 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  40097e:	460e      	mov	r6, r1
  400980:	e008      	b.n	400994 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  400982:	7a6a      	ldrb	r2, [r5, #9]
  400984:	3201      	adds	r2, #1
  400986:	4442      	add	r2, r8
  400988:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  40098c:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  40098e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  400992:	b16b      	cbz	r3, 4009b0 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  400994:	7820      	ldrb	r0, [r4, #0]
  400996:	280a      	cmp	r0, #10
  400998:	d0f3      	beq.n	400982 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  40099a:	280d      	cmp	r0, #13
  40099c:	d0f7      	beq.n	40098e <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  40099e:	462b      	mov	r3, r5
  4009a0:	4642      	mov	r2, r8
  4009a2:	4649      	mov	r1, r9
  4009a4:	47b8      	blx	r7
			x += font->width;
  4009a6:	7a2b      	ldrb	r3, [r5, #8]
  4009a8:	4499      	add	r9, r3
  4009aa:	fa5f f989 	uxtb.w	r9, r9
  4009ae:	e7ee      	b.n	40098e <gfx_mono_draw_string+0x1e>
}
  4009b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4009b4:	004008c5 	.word	0x004008c5

004009b8 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  4009b8:	b570      	push	{r4, r5, r6, lr}
  4009ba:	4604      	mov	r4, r0
  4009bc:	460d      	mov	r5, r1
  4009be:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  4009c0:	b91b      	cbnz	r3, 4009ca <gfx_mono_ssd1306_put_byte+0x12>
  4009c2:	4b0d      	ldr	r3, [pc, #52]	; (4009f8 <gfx_mono_ssd1306_put_byte+0x40>)
  4009c4:	4798      	blx	r3
  4009c6:	42b0      	cmp	r0, r6
  4009c8:	d015      	beq.n	4009f6 <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  4009ca:	4632      	mov	r2, r6
  4009cc:	4629      	mov	r1, r5
  4009ce:	4620      	mov	r0, r4
  4009d0:	4b0a      	ldr	r3, [pc, #40]	; (4009fc <gfx_mono_ssd1306_put_byte+0x44>)
  4009d2:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  4009d4:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4009d8:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4009dc:	4c08      	ldr	r4, [pc, #32]	; (400a00 <gfx_mono_ssd1306_put_byte+0x48>)
  4009de:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  4009e0:	f3c5 1002 	ubfx	r0, r5, #4, #3
  4009e4:	f040 0010 	orr.w	r0, r0, #16
  4009e8:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  4009ea:	f005 000f 	and.w	r0, r5, #15
  4009ee:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  4009f0:	4630      	mov	r0, r6
  4009f2:	4b04      	ldr	r3, [pc, #16]	; (400a04 <gfx_mono_ssd1306_put_byte+0x4c>)
  4009f4:	4798      	blx	r3
  4009f6:	bd70      	pop	{r4, r5, r6, pc}
  4009f8:	004007ad 	.word	0x004007ad
  4009fc:	0040079d 	.word	0x0040079d
  400a00:	00400ac9 	.word	0x00400ac9
  400a04:	00400ce9 	.word	0x00400ce9

00400a08 <gfx_mono_ssd1306_init>:
{
  400a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  400a0c:	480d      	ldr	r0, [pc, #52]	; (400a44 <gfx_mono_ssd1306_init+0x3c>)
  400a0e:	4b0e      	ldr	r3, [pc, #56]	; (400a48 <gfx_mono_ssd1306_init+0x40>)
  400a10:	4798      	blx	r3
	ssd1306_init();
  400a12:	4b0e      	ldr	r3, [pc, #56]	; (400a4c <gfx_mono_ssd1306_init+0x44>)
  400a14:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400a16:	2040      	movs	r0, #64	; 0x40
  400a18:	4b0d      	ldr	r3, [pc, #52]	; (400a50 <gfx_mono_ssd1306_init+0x48>)
  400a1a:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400a1c:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400a1e:	f04f 0801 	mov.w	r8, #1
  400a22:	462f      	mov	r7, r5
  400a24:	4e0b      	ldr	r6, [pc, #44]	; (400a54 <gfx_mono_ssd1306_init+0x4c>)
{
  400a26:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400a28:	4643      	mov	r3, r8
  400a2a:	463a      	mov	r2, r7
  400a2c:	b2e1      	uxtb	r1, r4
  400a2e:	4628      	mov	r0, r5
  400a30:	47b0      	blx	r6
  400a32:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400a34:	2c80      	cmp	r4, #128	; 0x80
  400a36:	d1f7      	bne.n	400a28 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400a38:	3501      	adds	r5, #1
  400a3a:	b2ed      	uxtb	r5, r5
  400a3c:	2d04      	cmp	r5, #4
  400a3e:	d1f2      	bne.n	400a26 <gfx_mono_ssd1306_init+0x1e>
  400a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a44:	204009f4 	.word	0x204009f4
  400a48:	00400791 	.word	0x00400791
  400a4c:	00400b09 	.word	0x00400b09
  400a50:	00400ac9 	.word	0x00400ac9
  400a54:	004009b9 	.word	0x004009b9

00400a58 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400a58:	09c3      	lsrs	r3, r0, #7
  400a5a:	d12a      	bne.n	400ab2 <gfx_mono_ssd1306_draw_pixel+0x5a>
  400a5c:	291f      	cmp	r1, #31
  400a5e:	d828      	bhi.n	400ab2 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a64:	4614      	mov	r4, r2
  400a66:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400a68:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  400a6a:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400a6e:	2201      	movs	r2, #1
  400a70:	fa02 f701 	lsl.w	r7, r2, r1
  400a74:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400a78:	4601      	mov	r1, r0
  400a7a:	4630      	mov	r0, r6
  400a7c:	4b0d      	ldr	r3, [pc, #52]	; (400ab4 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  400a7e:	4798      	blx	r3
  400a80:	4602      	mov	r2, r0
	switch (color) {
  400a82:	2c01      	cmp	r4, #1
  400a84:	d009      	beq.n	400a9a <gfx_mono_ssd1306_draw_pixel+0x42>
  400a86:	b164      	cbz	r4, 400aa2 <gfx_mono_ssd1306_draw_pixel+0x4a>
  400a88:	2c02      	cmp	r4, #2
  400a8a:	d00e      	beq.n	400aaa <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  400a8c:	2300      	movs	r3, #0
  400a8e:	4629      	mov	r1, r5
  400a90:	4630      	mov	r0, r6
  400a92:	4c09      	ldr	r4, [pc, #36]	; (400ab8 <gfx_mono_ssd1306_draw_pixel+0x60>)
  400a94:	47a0      	blx	r4
  400a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  400a9a:	ea48 0200 	orr.w	r2, r8, r0
  400a9e:	b2d2      	uxtb	r2, r2
		break;
  400aa0:	e7f4      	b.n	400a8c <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  400aa2:	ea20 0207 	bic.w	r2, r0, r7
  400aa6:	b2d2      	uxtb	r2, r2
		break;
  400aa8:	e7f0      	b.n	400a8c <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  400aaa:	ea88 0200 	eor.w	r2, r8, r0
  400aae:	b2d2      	uxtb	r2, r2
		break;
  400ab0:	e7ec      	b.n	400a8c <gfx_mono_ssd1306_draw_pixel+0x34>
  400ab2:	4770      	bx	lr
  400ab4:	004007ad 	.word	0x004007ad
  400ab8:	004009b9 	.word	0x004009b9

00400abc <gfx_mono_ssd1306_get_byte>:
{
  400abc:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  400abe:	4b01      	ldr	r3, [pc, #4]	; (400ac4 <gfx_mono_ssd1306_get_byte+0x8>)
  400ac0:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400ac2:	bd08      	pop	{r3, pc}
  400ac4:	004007ad 	.word	0x004007ad

00400ac8 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400ac8:	b538      	push	{r3, r4, r5, lr}
  400aca:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400acc:	2208      	movs	r2, #8
  400ace:	4b09      	ldr	r3, [pc, #36]	; (400af4 <ssd1306_write_command+0x2c>)
  400ad0:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400ad2:	4c09      	ldr	r4, [pc, #36]	; (400af8 <ssd1306_write_command+0x30>)
  400ad4:	2101      	movs	r1, #1
  400ad6:	4620      	mov	r0, r4
  400ad8:	4b08      	ldr	r3, [pc, #32]	; (400afc <ssd1306_write_command+0x34>)
  400ada:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400adc:	2301      	movs	r3, #1
  400ade:	461a      	mov	r2, r3
  400ae0:	4629      	mov	r1, r5
  400ae2:	4620      	mov	r0, r4
  400ae4:	4c06      	ldr	r4, [pc, #24]	; (400b00 <ssd1306_write_command+0x38>)
  400ae6:	47a0      	blx	r4
	delay_us(10);
  400ae8:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400aec:	4b05      	ldr	r3, [pc, #20]	; (400b04 <ssd1306_write_command+0x3c>)
  400aee:	4798      	blx	r3
  400af0:	bd38      	pop	{r3, r4, r5, pc}
  400af2:	bf00      	nop
  400af4:	400e1000 	.word	0x400e1000
  400af8:	40008000 	.word	0x40008000
  400afc:	004005c9 	.word	0x004005c9
  400b00:	004005df 	.word	0x004005df
  400b04:	20400001 	.word	0x20400001

00400b08 <ssd1306_init>:
{
  400b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400b0c:	4d66      	ldr	r5, [pc, #408]	; (400ca8 <ssd1306_init+0x1a0>)
  400b0e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400b12:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b14:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400b18:	4b64      	ldr	r3, [pc, #400]	; (400cac <ssd1306_init+0x1a4>)
  400b1a:	2708      	movs	r7, #8
  400b1c:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b1e:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400b22:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400b24:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b28:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b2a:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b2c:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400b30:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400b32:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400b36:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b38:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400b3a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400b3e:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400b40:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400b42:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b46:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b48:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b4a:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400b4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400b50:	f022 0208 	bic.w	r2, r2, #8
  400b54:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b56:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400b58:	f022 0208 	bic.w	r2, r2, #8
  400b5c:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400b5e:	601f      	str	r7, [r3, #0]
  400b60:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400b62:	631f      	str	r7, [r3, #48]	; 0x30
  400b64:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400b66:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400ce4 <ssd1306_init+0x1dc>
  400b6a:	2300      	movs	r3, #0
  400b6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400b70:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b74:	4640      	mov	r0, r8
  400b76:	4c4e      	ldr	r4, [pc, #312]	; (400cb0 <ssd1306_init+0x1a8>)
  400b78:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400b7a:	2300      	movs	r3, #0
  400b7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400b80:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b84:	4640      	mov	r0, r8
  400b86:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400b88:	2300      	movs	r3, #0
  400b8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400b8e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b92:	4640      	mov	r0, r8
  400b94:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400b96:	2300      	movs	r3, #0
  400b98:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400b9c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400ba0:	4640      	mov	r0, r8
  400ba2:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400ba4:	2300      	movs	r3, #0
  400ba6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400baa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400bae:	4640      	mov	r0, r8
  400bb0:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400bb2:	2300      	movs	r3, #0
  400bb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400bb8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400bbc:	4640      	mov	r0, r8
  400bbe:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400bc0:	4c3c      	ldr	r4, [pc, #240]	; (400cb4 <ssd1306_init+0x1ac>)
  400bc2:	f04f 0902 	mov.w	r9, #2
  400bc6:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400bca:	f04f 0880 	mov.w	r8, #128	; 0x80
  400bce:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400bd2:	6863      	ldr	r3, [r4, #4]
  400bd4:	f043 0301 	orr.w	r3, r3, #1
  400bd8:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400bda:	463a      	mov	r2, r7
  400bdc:	2101      	movs	r1, #1
  400bde:	4620      	mov	r0, r4
  400be0:	4b35      	ldr	r3, [pc, #212]	; (400cb8 <ssd1306_init+0x1b0>)
  400be2:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400be4:	2200      	movs	r2, #0
  400be6:	2101      	movs	r1, #1
  400be8:	4620      	mov	r0, r4
  400bea:	4b34      	ldr	r3, [pc, #208]	; (400cbc <ssd1306_init+0x1b4>)
  400bec:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400bee:	2200      	movs	r2, #0
  400bf0:	2101      	movs	r1, #1
  400bf2:	4620      	mov	r0, r4
  400bf4:	4b32      	ldr	r3, [pc, #200]	; (400cc0 <ssd1306_init+0x1b8>)
  400bf6:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400bf8:	6863      	ldr	r3, [r4, #4]
  400bfa:	f023 0302 	bic.w	r3, r3, #2
  400bfe:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400c00:	2200      	movs	r2, #0
  400c02:	2101      	movs	r1, #1
  400c04:	4620      	mov	r0, r4
  400c06:	4b2f      	ldr	r3, [pc, #188]	; (400cc4 <ssd1306_init+0x1bc>)
  400c08:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400c0a:	6863      	ldr	r3, [r4, #4]
  400c0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400c10:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400c12:	6863      	ldr	r3, [r4, #4]
  400c14:	f043 0310 	orr.w	r3, r3, #16
  400c18:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  400c1a:	492b      	ldr	r1, [pc, #172]	; (400cc8 <ssd1306_init+0x1c0>)
  400c1c:	482b      	ldr	r0, [pc, #172]	; (400ccc <ssd1306_init+0x1c4>)
  400c1e:	4b2c      	ldr	r3, [pc, #176]	; (400cd0 <ssd1306_init+0x1c8>)
  400c20:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400c22:	b2c2      	uxtb	r2, r0
  400c24:	2101      	movs	r1, #1
  400c26:	4620      	mov	r0, r4
  400c28:	4b2a      	ldr	r3, [pc, #168]	; (400cd4 <ssd1306_init+0x1cc>)
  400c2a:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400c2c:	4620      	mov	r0, r4
  400c2e:	4b2a      	ldr	r3, [pc, #168]	; (400cd8 <ssd1306_init+0x1d0>)
  400c30:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400c32:	2301      	movs	r3, #1
  400c34:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400c36:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400c38:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400c3c:	4c27      	ldr	r4, [pc, #156]	; (400cdc <ssd1306_init+0x1d4>)
  400c3e:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400c40:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400c42:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400c46:	47a0      	blx	r4
  400c48:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400c4a:	20a8      	movs	r0, #168	; 0xa8
  400c4c:	4c24      	ldr	r4, [pc, #144]	; (400ce0 <ssd1306_init+0x1d8>)
  400c4e:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400c50:	201f      	movs	r0, #31
  400c52:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400c54:	20d3      	movs	r0, #211	; 0xd3
  400c56:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400c58:	2000      	movs	r0, #0
  400c5a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400c5c:	2040      	movs	r0, #64	; 0x40
  400c5e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400c60:	20a1      	movs	r0, #161	; 0xa1
  400c62:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400c64:	20c8      	movs	r0, #200	; 0xc8
  400c66:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400c68:	20da      	movs	r0, #218	; 0xda
  400c6a:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400c6c:	4648      	mov	r0, r9
  400c6e:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400c70:	2081      	movs	r0, #129	; 0x81
  400c72:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400c74:	208f      	movs	r0, #143	; 0x8f
  400c76:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400c78:	20a4      	movs	r0, #164	; 0xa4
  400c7a:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400c7c:	20a6      	movs	r0, #166	; 0xa6
  400c7e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400c80:	20d5      	movs	r0, #213	; 0xd5
  400c82:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400c84:	4640      	mov	r0, r8
  400c86:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400c88:	208d      	movs	r0, #141	; 0x8d
  400c8a:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400c8c:	2014      	movs	r0, #20
  400c8e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400c90:	20db      	movs	r0, #219	; 0xdb
  400c92:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400c94:	2040      	movs	r0, #64	; 0x40
  400c96:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400c98:	20d9      	movs	r0, #217	; 0xd9
  400c9a:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400c9c:	20f1      	movs	r0, #241	; 0xf1
  400c9e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400ca0:	20af      	movs	r0, #175	; 0xaf
  400ca2:	47a0      	blx	r4
  400ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400ca8:	400e1200 	.word	0x400e1200
  400cac:	400e1000 	.word	0x400e1000
  400cb0:	00400fd1 	.word	0x00400fd1
  400cb4:	40008000 	.word	0x40008000
  400cb8:	0040064f 	.word	0x0040064f
  400cbc:	00400613 	.word	0x00400613
  400cc0:	00400631 	.word	0x00400631
  400cc4:	00400695 	.word	0x00400695
  400cc8:	08f0d180 	.word	0x08f0d180
  400ccc:	001e8480 	.word	0x001e8480
  400cd0:	004006a9 	.word	0x004006a9
  400cd4:	004006bf 	.word	0x004006bf
  400cd8:	0040059d 	.word	0x0040059d
  400cdc:	20400001 	.word	0x20400001
  400ce0:	00400ac9 	.word	0x00400ac9
  400ce4:	400e1400 	.word	0x400e1400

00400ce8 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400ce8:	b538      	push	{r3, r4, r5, lr}
  400cea:	4605      	mov	r5, r0
  400cec:	2208      	movs	r2, #8
  400cee:	4b09      	ldr	r3, [pc, #36]	; (400d14 <ssd1306_write_data+0x2c>)
  400cf0:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400cf2:	4c09      	ldr	r4, [pc, #36]	; (400d18 <ssd1306_write_data+0x30>)
  400cf4:	2101      	movs	r1, #1
  400cf6:	4620      	mov	r0, r4
  400cf8:	4b08      	ldr	r3, [pc, #32]	; (400d1c <ssd1306_write_data+0x34>)
  400cfa:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400cfc:	2301      	movs	r3, #1
  400cfe:	461a      	mov	r2, r3
  400d00:	4629      	mov	r1, r5
  400d02:	4620      	mov	r0, r4
  400d04:	4c06      	ldr	r4, [pc, #24]	; (400d20 <ssd1306_write_data+0x38>)
  400d06:	47a0      	blx	r4
	delay_us(10);
  400d08:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400d0c:	4b05      	ldr	r3, [pc, #20]	; (400d24 <ssd1306_write_data+0x3c>)
  400d0e:	4798      	blx	r3
  400d10:	bd38      	pop	{r3, r4, r5, pc}
  400d12:	bf00      	nop
  400d14:	400e1000 	.word	0x400e1000
  400d18:	40008000 	.word	0x40008000
  400d1c:	004005c9 	.word	0x004005c9
  400d20:	004005df 	.word	0x004005df
  400d24:	20400001 	.word	0x20400001

00400d28 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400d28:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400d2a:	4810      	ldr	r0, [pc, #64]	; (400d6c <sysclk_init+0x44>)
  400d2c:	4b10      	ldr	r3, [pc, #64]	; (400d70 <sysclk_init+0x48>)
  400d2e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400d30:	213e      	movs	r1, #62	; 0x3e
  400d32:	2000      	movs	r0, #0
  400d34:	4b0f      	ldr	r3, [pc, #60]	; (400d74 <sysclk_init+0x4c>)
  400d36:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400d38:	4c0f      	ldr	r4, [pc, #60]	; (400d78 <sysclk_init+0x50>)
  400d3a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400d3c:	2800      	cmp	r0, #0
  400d3e:	d0fc      	beq.n	400d3a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400d40:	4b0e      	ldr	r3, [pc, #56]	; (400d7c <sysclk_init+0x54>)
  400d42:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400d44:	4a0e      	ldr	r2, [pc, #56]	; (400d80 <sysclk_init+0x58>)
  400d46:	4b0f      	ldr	r3, [pc, #60]	; (400d84 <sysclk_init+0x5c>)
  400d48:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400d4a:	4c0f      	ldr	r4, [pc, #60]	; (400d88 <sysclk_init+0x60>)
  400d4c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400d4e:	2800      	cmp	r0, #0
  400d50:	d0fc      	beq.n	400d4c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400d52:	2002      	movs	r0, #2
  400d54:	4b0d      	ldr	r3, [pc, #52]	; (400d8c <sysclk_init+0x64>)
  400d56:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400d58:	2000      	movs	r0, #0
  400d5a:	4b0d      	ldr	r3, [pc, #52]	; (400d90 <sysclk_init+0x68>)
  400d5c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400d5e:	4b0d      	ldr	r3, [pc, #52]	; (400d94 <sysclk_init+0x6c>)
  400d60:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400d62:	4802      	ldr	r0, [pc, #8]	; (400d6c <sysclk_init+0x44>)
  400d64:	4b02      	ldr	r3, [pc, #8]	; (400d70 <sysclk_init+0x48>)
  400d66:	4798      	blx	r3
  400d68:	bd10      	pop	{r4, pc}
  400d6a:	bf00      	nop
  400d6c:	11e1a300 	.word	0x11e1a300
  400d70:	00401739 	.word	0x00401739
  400d74:	004011c5 	.word	0x004011c5
  400d78:	00401219 	.word	0x00401219
  400d7c:	00401229 	.word	0x00401229
  400d80:	20183f01 	.word	0x20183f01
  400d84:	400e0600 	.word	0x400e0600
  400d88:	00401239 	.word	0x00401239
  400d8c:	00401129 	.word	0x00401129
  400d90:	00401161 	.word	0x00401161
  400d94:	0040162d 	.word	0x0040162d

00400d98 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400d9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400d9e:	4b48      	ldr	r3, [pc, #288]	; (400ec0 <board_init+0x128>)
  400da0:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400da2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400da6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400daa:	4b46      	ldr	r3, [pc, #280]	; (400ec4 <board_init+0x12c>)
  400dac:	2200      	movs	r2, #0
  400dae:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400db2:	695a      	ldr	r2, [r3, #20]
  400db4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400db8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400dba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400dbe:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400dc2:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400dc6:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400dca:	f007 0007 	and.w	r0, r7, #7
  400dce:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400dd0:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400dd4:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400dd8:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400ddc:	f3bf 8f4f 	dsb	sy
  400de0:	f04f 34ff 	mov.w	r4, #4294967295
  400de4:	fa04 fc00 	lsl.w	ip, r4, r0
  400de8:	fa06 f000 	lsl.w	r0, r6, r0
  400dec:	fa04 f40e 	lsl.w	r4, r4, lr
  400df0:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400df4:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400df6:	463a      	mov	r2, r7
  400df8:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400dfa:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400dfe:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400e02:	3a01      	subs	r2, #1
  400e04:	4423      	add	r3, r4
  400e06:	f1b2 3fff 	cmp.w	r2, #4294967295
  400e0a:	d1f6      	bne.n	400dfa <board_init+0x62>
        } while(sets--);
  400e0c:	3e01      	subs	r6, #1
  400e0e:	4460      	add	r0, ip
  400e10:	f1b6 3fff 	cmp.w	r6, #4294967295
  400e14:	d1ef      	bne.n	400df6 <board_init+0x5e>
  400e16:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400e1a:	4b2a      	ldr	r3, [pc, #168]	; (400ec4 <board_init+0x12c>)
  400e1c:	695a      	ldr	r2, [r3, #20]
  400e1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400e22:	615a      	str	r2, [r3, #20]
  400e24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e28:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400e2c:	4a26      	ldr	r2, [pc, #152]	; (400ec8 <board_init+0x130>)
  400e2e:	4927      	ldr	r1, [pc, #156]	; (400ecc <board_init+0x134>)
  400e30:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400e32:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400e36:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400e38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e3c:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400e40:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400e44:	f022 0201 	bic.w	r2, r2, #1
  400e48:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400e4c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400e50:	f022 0201 	bic.w	r2, r2, #1
  400e54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400e58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e5c:	f3bf 8f6f 	isb	sy
  400e60:	200a      	movs	r0, #10
  400e62:	4c1b      	ldr	r4, [pc, #108]	; (400ed0 <board_init+0x138>)
  400e64:	47a0      	blx	r4
  400e66:	200b      	movs	r0, #11
  400e68:	47a0      	blx	r4
  400e6a:	200c      	movs	r0, #12
  400e6c:	47a0      	blx	r4
  400e6e:	2010      	movs	r0, #16
  400e70:	47a0      	blx	r4
  400e72:	2011      	movs	r0, #17
  400e74:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400e76:	4b17      	ldr	r3, [pc, #92]	; (400ed4 <board_init+0x13c>)
  400e78:	f44f 7280 	mov.w	r2, #256	; 0x100
  400e7c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400e7e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400e82:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400e84:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400e8c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400e8e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400e92:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400e94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e98:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400e9a:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400ea0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400ea2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400ea6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400ea8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400eaa:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400eae:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400eb0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400eb4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400eb8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ebe:	bf00      	nop
  400ec0:	400e1850 	.word	0x400e1850
  400ec4:	e000ed00 	.word	0xe000ed00
  400ec8:	400e0c00 	.word	0x400e0c00
  400ecc:	5a00080c 	.word	0x5a00080c
  400ed0:	00401249 	.word	0x00401249
  400ed4:	400e1200 	.word	0x400e1200

00400ed8 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400ed8:	6301      	str	r1, [r0, #48]	; 0x30
  400eda:	4770      	bx	lr

00400edc <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400edc:	6341      	str	r1, [r0, #52]	; 0x34
  400ede:	4770      	bx	lr

00400ee0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400ee0:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400ee2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400ee6:	d03a      	beq.n	400f5e <pio_set_peripheral+0x7e>
  400ee8:	d813      	bhi.n	400f12 <pio_set_peripheral+0x32>
  400eea:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400eee:	d025      	beq.n	400f3c <pio_set_peripheral+0x5c>
  400ef0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400ef4:	d10a      	bne.n	400f0c <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ef6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400ef8:	4313      	orrs	r3, r2
  400efa:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400efc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400efe:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400f00:	400b      	ands	r3, r1
  400f02:	ea23 0302 	bic.w	r3, r3, r2
  400f06:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400f08:	6042      	str	r2, [r0, #4]
  400f0a:	4770      	bx	lr
	switch (ul_type) {
  400f0c:	2900      	cmp	r1, #0
  400f0e:	d1fb      	bne.n	400f08 <pio_set_peripheral+0x28>
  400f10:	4770      	bx	lr
  400f12:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400f16:	d021      	beq.n	400f5c <pio_set_peripheral+0x7c>
  400f18:	d809      	bhi.n	400f2e <pio_set_peripheral+0x4e>
  400f1a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400f1e:	d1f3      	bne.n	400f08 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f20:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400f22:	4313      	orrs	r3, r2
  400f24:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400f26:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400f28:	4313      	orrs	r3, r2
  400f2a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400f2c:	e7ec      	b.n	400f08 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400f2e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400f32:	d013      	beq.n	400f5c <pio_set_peripheral+0x7c>
  400f34:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400f38:	d010      	beq.n	400f5c <pio_set_peripheral+0x7c>
  400f3a:	e7e5      	b.n	400f08 <pio_set_peripheral+0x28>
{
  400f3c:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f3e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400f40:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400f42:	43d3      	mvns	r3, r2
  400f44:	4021      	ands	r1, r4
  400f46:	461c      	mov	r4, r3
  400f48:	4019      	ands	r1, r3
  400f4a:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400f4c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400f4e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400f50:	400b      	ands	r3, r1
  400f52:	4023      	ands	r3, r4
  400f54:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400f56:	6042      	str	r2, [r0, #4]
}
  400f58:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f5c:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f5e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400f60:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400f62:	400b      	ands	r3, r1
  400f64:	ea23 0302 	bic.w	r3, r3, r2
  400f68:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400f6a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400f6c:	4313      	orrs	r3, r2
  400f6e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400f70:	e7ca      	b.n	400f08 <pio_set_peripheral+0x28>

00400f72 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400f72:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400f74:	f012 0f01 	tst.w	r2, #1
  400f78:	d10d      	bne.n	400f96 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400f7a:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400f7c:	f012 0f0a 	tst.w	r2, #10
  400f80:	d00b      	beq.n	400f9a <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400f82:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400f84:	f012 0f02 	tst.w	r2, #2
  400f88:	d109      	bne.n	400f9e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400f8a:	f012 0f08 	tst.w	r2, #8
  400f8e:	d008      	beq.n	400fa2 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400f90:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400f94:	e005      	b.n	400fa2 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400f96:	6641      	str	r1, [r0, #100]	; 0x64
  400f98:	e7f0      	b.n	400f7c <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400f9a:	6241      	str	r1, [r0, #36]	; 0x24
  400f9c:	e7f2      	b.n	400f84 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400f9e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400fa2:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400fa4:	6001      	str	r1, [r0, #0]
  400fa6:	4770      	bx	lr

00400fa8 <pio_set_output>:
{
  400fa8:	b410      	push	{r4}
  400faa:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400fac:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400fae:	b94c      	cbnz	r4, 400fc4 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400fb0:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400fb2:	b14b      	cbz	r3, 400fc8 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400fb4:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400fb6:	b94a      	cbnz	r2, 400fcc <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400fb8:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400fba:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400fbc:	6001      	str	r1, [r0, #0]
}
  400fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
  400fc2:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400fc4:	6641      	str	r1, [r0, #100]	; 0x64
  400fc6:	e7f4      	b.n	400fb2 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400fc8:	6541      	str	r1, [r0, #84]	; 0x54
  400fca:	e7f4      	b.n	400fb6 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400fcc:	6301      	str	r1, [r0, #48]	; 0x30
  400fce:	e7f4      	b.n	400fba <pio_set_output+0x12>

00400fd0 <pio_configure>:
{
  400fd0:	b570      	push	{r4, r5, r6, lr}
  400fd2:	b082      	sub	sp, #8
  400fd4:	4605      	mov	r5, r0
  400fd6:	4616      	mov	r6, r2
  400fd8:	461c      	mov	r4, r3
	switch (ul_type) {
  400fda:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400fde:	d014      	beq.n	40100a <pio_configure+0x3a>
  400fe0:	d90a      	bls.n	400ff8 <pio_configure+0x28>
  400fe2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400fe6:	d024      	beq.n	401032 <pio_configure+0x62>
  400fe8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400fec:	d021      	beq.n	401032 <pio_configure+0x62>
  400fee:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400ff2:	d017      	beq.n	401024 <pio_configure+0x54>
		return 0;
  400ff4:	2000      	movs	r0, #0
  400ff6:	e01a      	b.n	40102e <pio_configure+0x5e>
	switch (ul_type) {
  400ff8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400ffc:	d005      	beq.n	40100a <pio_configure+0x3a>
  400ffe:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401002:	d002      	beq.n	40100a <pio_configure+0x3a>
  401004:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401008:	d1f4      	bne.n	400ff4 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40100a:	4632      	mov	r2, r6
  40100c:	4628      	mov	r0, r5
  40100e:	4b11      	ldr	r3, [pc, #68]	; (401054 <pio_configure+0x84>)
  401010:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401012:	f014 0f01 	tst.w	r4, #1
  401016:	d102      	bne.n	40101e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  401018:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40101a:	2001      	movs	r0, #1
  40101c:	e007      	b.n	40102e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  40101e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401020:	2001      	movs	r0, #1
  401022:	e004      	b.n	40102e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401024:	461a      	mov	r2, r3
  401026:	4631      	mov	r1, r6
  401028:	4b0b      	ldr	r3, [pc, #44]	; (401058 <pio_configure+0x88>)
  40102a:	4798      	blx	r3
	return 1;
  40102c:	2001      	movs	r0, #1
}
  40102e:	b002      	add	sp, #8
  401030:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401032:	f004 0301 	and.w	r3, r4, #1
  401036:	9300      	str	r3, [sp, #0]
  401038:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40103c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401040:	bf14      	ite	ne
  401042:	2200      	movne	r2, #0
  401044:	2201      	moveq	r2, #1
  401046:	4631      	mov	r1, r6
  401048:	4628      	mov	r0, r5
  40104a:	4c04      	ldr	r4, [pc, #16]	; (40105c <pio_configure+0x8c>)
  40104c:	47a0      	blx	r4
	return 1;
  40104e:	2001      	movs	r0, #1
		break;
  401050:	e7ed      	b.n	40102e <pio_configure+0x5e>
  401052:	bf00      	nop
  401054:	00400ee1 	.word	0x00400ee1
  401058:	00400f73 	.word	0x00400f73
  40105c:	00400fa9 	.word	0x00400fa9

00401060 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  401060:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401062:	420b      	tst	r3, r1
}
  401064:	bf14      	ite	ne
  401066:	2001      	movne	r0, #1
  401068:	2000      	moveq	r0, #0
  40106a:	4770      	bx	lr

0040106c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40106c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40106e:	4770      	bx	lr

00401070 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401070:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401072:	4770      	bx	lr

00401074 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401078:	4604      	mov	r4, r0
  40107a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40107c:	4b0e      	ldr	r3, [pc, #56]	; (4010b8 <pio_handler_process+0x44>)
  40107e:	4798      	blx	r3
  401080:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401082:	4620      	mov	r0, r4
  401084:	4b0d      	ldr	r3, [pc, #52]	; (4010bc <pio_handler_process+0x48>)
  401086:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401088:	4005      	ands	r5, r0
  40108a:	d013      	beq.n	4010b4 <pio_handler_process+0x40>
  40108c:	4c0c      	ldr	r4, [pc, #48]	; (4010c0 <pio_handler_process+0x4c>)
  40108e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401092:	e003      	b.n	40109c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401094:	42b4      	cmp	r4, r6
  401096:	d00d      	beq.n	4010b4 <pio_handler_process+0x40>
  401098:	3410      	adds	r4, #16
		while (status != 0) {
  40109a:	b15d      	cbz	r5, 4010b4 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40109c:	6820      	ldr	r0, [r4, #0]
  40109e:	4540      	cmp	r0, r8
  4010a0:	d1f8      	bne.n	401094 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4010a2:	6861      	ldr	r1, [r4, #4]
  4010a4:	4229      	tst	r1, r5
  4010a6:	d0f5      	beq.n	401094 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4010a8:	68e3      	ldr	r3, [r4, #12]
  4010aa:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4010ac:	6863      	ldr	r3, [r4, #4]
  4010ae:	ea25 0503 	bic.w	r5, r5, r3
  4010b2:	e7ef      	b.n	401094 <pio_handler_process+0x20>
  4010b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4010b8:	0040106d 	.word	0x0040106d
  4010bc:	00401071 	.word	0x00401071
  4010c0:	20400bf4 	.word	0x20400bf4

004010c4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4010c4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4010c6:	210a      	movs	r1, #10
  4010c8:	4801      	ldr	r0, [pc, #4]	; (4010d0 <PIOA_Handler+0xc>)
  4010ca:	4b02      	ldr	r3, [pc, #8]	; (4010d4 <PIOA_Handler+0x10>)
  4010cc:	4798      	blx	r3
  4010ce:	bd08      	pop	{r3, pc}
  4010d0:	400e0e00 	.word	0x400e0e00
  4010d4:	00401075 	.word	0x00401075

004010d8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4010d8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4010da:	210b      	movs	r1, #11
  4010dc:	4801      	ldr	r0, [pc, #4]	; (4010e4 <PIOB_Handler+0xc>)
  4010de:	4b02      	ldr	r3, [pc, #8]	; (4010e8 <PIOB_Handler+0x10>)
  4010e0:	4798      	blx	r3
  4010e2:	bd08      	pop	{r3, pc}
  4010e4:	400e1000 	.word	0x400e1000
  4010e8:	00401075 	.word	0x00401075

004010ec <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4010ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4010ee:	210c      	movs	r1, #12
  4010f0:	4801      	ldr	r0, [pc, #4]	; (4010f8 <PIOC_Handler+0xc>)
  4010f2:	4b02      	ldr	r3, [pc, #8]	; (4010fc <PIOC_Handler+0x10>)
  4010f4:	4798      	blx	r3
  4010f6:	bd08      	pop	{r3, pc}
  4010f8:	400e1200 	.word	0x400e1200
  4010fc:	00401075 	.word	0x00401075

00401100 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401100:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401102:	2110      	movs	r1, #16
  401104:	4801      	ldr	r0, [pc, #4]	; (40110c <PIOD_Handler+0xc>)
  401106:	4b02      	ldr	r3, [pc, #8]	; (401110 <PIOD_Handler+0x10>)
  401108:	4798      	blx	r3
  40110a:	bd08      	pop	{r3, pc}
  40110c:	400e1400 	.word	0x400e1400
  401110:	00401075 	.word	0x00401075

00401114 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401114:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401116:	2111      	movs	r1, #17
  401118:	4801      	ldr	r0, [pc, #4]	; (401120 <PIOE_Handler+0xc>)
  40111a:	4b02      	ldr	r3, [pc, #8]	; (401124 <PIOE_Handler+0x10>)
  40111c:	4798      	blx	r3
  40111e:	bd08      	pop	{r3, pc}
  401120:	400e1600 	.word	0x400e1600
  401124:	00401075 	.word	0x00401075

00401128 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401128:	2803      	cmp	r0, #3
  40112a:	d011      	beq.n	401150 <pmc_mck_set_division+0x28>
  40112c:	2804      	cmp	r0, #4
  40112e:	d012      	beq.n	401156 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401130:	2802      	cmp	r0, #2
  401132:	bf0c      	ite	eq
  401134:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401138:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40113a:	4a08      	ldr	r2, [pc, #32]	; (40115c <pmc_mck_set_division+0x34>)
  40113c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40113e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401142:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401144:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401146:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401148:	f013 0f08 	tst.w	r3, #8
  40114c:	d0fb      	beq.n	401146 <pmc_mck_set_division+0x1e>
}
  40114e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401150:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401154:	e7f1      	b.n	40113a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401156:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40115a:	e7ee      	b.n	40113a <pmc_mck_set_division+0x12>
  40115c:	400e0600 	.word	0x400e0600

00401160 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401160:	4a17      	ldr	r2, [pc, #92]	; (4011c0 <pmc_switch_mck_to_pllack+0x60>)
  401162:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401168:	4318      	orrs	r0, r3
  40116a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40116c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40116e:	f013 0f08 	tst.w	r3, #8
  401172:	d10a      	bne.n	40118a <pmc_switch_mck_to_pllack+0x2a>
  401174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401178:	4911      	ldr	r1, [pc, #68]	; (4011c0 <pmc_switch_mck_to_pllack+0x60>)
  40117a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40117c:	f012 0f08 	tst.w	r2, #8
  401180:	d103      	bne.n	40118a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401182:	3b01      	subs	r3, #1
  401184:	d1f9      	bne.n	40117a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401186:	2001      	movs	r0, #1
  401188:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40118a:	4a0d      	ldr	r2, [pc, #52]	; (4011c0 <pmc_switch_mck_to_pllack+0x60>)
  40118c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40118e:	f023 0303 	bic.w	r3, r3, #3
  401192:	f043 0302 	orr.w	r3, r3, #2
  401196:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401198:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40119a:	f013 0f08 	tst.w	r3, #8
  40119e:	d10a      	bne.n	4011b6 <pmc_switch_mck_to_pllack+0x56>
  4011a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4011a4:	4906      	ldr	r1, [pc, #24]	; (4011c0 <pmc_switch_mck_to_pllack+0x60>)
  4011a6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4011a8:	f012 0f08 	tst.w	r2, #8
  4011ac:	d105      	bne.n	4011ba <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011ae:	3b01      	subs	r3, #1
  4011b0:	d1f9      	bne.n	4011a6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4011b2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4011b4:	4770      	bx	lr
	return 0;
  4011b6:	2000      	movs	r0, #0
  4011b8:	4770      	bx	lr
  4011ba:	2000      	movs	r0, #0
  4011bc:	4770      	bx	lr
  4011be:	bf00      	nop
  4011c0:	400e0600 	.word	0x400e0600

004011c4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4011c4:	b9a0      	cbnz	r0, 4011f0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4011c6:	480e      	ldr	r0, [pc, #56]	; (401200 <pmc_switch_mainck_to_xtal+0x3c>)
  4011c8:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4011ca:	0209      	lsls	r1, r1, #8
  4011cc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4011ce:	4a0d      	ldr	r2, [pc, #52]	; (401204 <pmc_switch_mainck_to_xtal+0x40>)
  4011d0:	401a      	ands	r2, r3
  4011d2:	4b0d      	ldr	r3, [pc, #52]	; (401208 <pmc_switch_mainck_to_xtal+0x44>)
  4011d4:	4313      	orrs	r3, r2
  4011d6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4011d8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4011da:	4602      	mov	r2, r0
  4011dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011de:	f013 0f01 	tst.w	r3, #1
  4011e2:	d0fb      	beq.n	4011dc <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4011e4:	4a06      	ldr	r2, [pc, #24]	; (401200 <pmc_switch_mainck_to_xtal+0x3c>)
  4011e6:	6a11      	ldr	r1, [r2, #32]
  4011e8:	4b08      	ldr	r3, [pc, #32]	; (40120c <pmc_switch_mainck_to_xtal+0x48>)
  4011ea:	430b      	orrs	r3, r1
  4011ec:	6213      	str	r3, [r2, #32]
  4011ee:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4011f0:	4903      	ldr	r1, [pc, #12]	; (401200 <pmc_switch_mainck_to_xtal+0x3c>)
  4011f2:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4011f4:	4a06      	ldr	r2, [pc, #24]	; (401210 <pmc_switch_mainck_to_xtal+0x4c>)
  4011f6:	401a      	ands	r2, r3
  4011f8:	4b06      	ldr	r3, [pc, #24]	; (401214 <pmc_switch_mainck_to_xtal+0x50>)
  4011fa:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4011fc:	620b      	str	r3, [r1, #32]
  4011fe:	4770      	bx	lr
  401200:	400e0600 	.word	0x400e0600
  401204:	ffc8fffc 	.word	0xffc8fffc
  401208:	00370001 	.word	0x00370001
  40120c:	01370000 	.word	0x01370000
  401210:	fec8fffc 	.word	0xfec8fffc
  401214:	01370002 	.word	0x01370002

00401218 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401218:	4b02      	ldr	r3, [pc, #8]	; (401224 <pmc_osc_is_ready_mainck+0xc>)
  40121a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40121c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401220:	4770      	bx	lr
  401222:	bf00      	nop
  401224:	400e0600 	.word	0x400e0600

00401228 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401228:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40122c:	4b01      	ldr	r3, [pc, #4]	; (401234 <pmc_disable_pllack+0xc>)
  40122e:	629a      	str	r2, [r3, #40]	; 0x28
  401230:	4770      	bx	lr
  401232:	bf00      	nop
  401234:	400e0600 	.word	0x400e0600

00401238 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401238:	4b02      	ldr	r3, [pc, #8]	; (401244 <pmc_is_locked_pllack+0xc>)
  40123a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40123c:	f000 0002 	and.w	r0, r0, #2
  401240:	4770      	bx	lr
  401242:	bf00      	nop
  401244:	400e0600 	.word	0x400e0600

00401248 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401248:	283f      	cmp	r0, #63	; 0x3f
  40124a:	d81e      	bhi.n	40128a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40124c:	281f      	cmp	r0, #31
  40124e:	d80c      	bhi.n	40126a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401250:	4b11      	ldr	r3, [pc, #68]	; (401298 <pmc_enable_periph_clk+0x50>)
  401252:	699a      	ldr	r2, [r3, #24]
  401254:	2301      	movs	r3, #1
  401256:	4083      	lsls	r3, r0
  401258:	4393      	bics	r3, r2
  40125a:	d018      	beq.n	40128e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40125c:	2301      	movs	r3, #1
  40125e:	fa03 f000 	lsl.w	r0, r3, r0
  401262:	4b0d      	ldr	r3, [pc, #52]	; (401298 <pmc_enable_periph_clk+0x50>)
  401264:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401266:	2000      	movs	r0, #0
  401268:	4770      	bx	lr
		ul_id -= 32;
  40126a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40126c:	4b0a      	ldr	r3, [pc, #40]	; (401298 <pmc_enable_periph_clk+0x50>)
  40126e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401272:	2301      	movs	r3, #1
  401274:	4083      	lsls	r3, r0
  401276:	4393      	bics	r3, r2
  401278:	d00b      	beq.n	401292 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40127a:	2301      	movs	r3, #1
  40127c:	fa03 f000 	lsl.w	r0, r3, r0
  401280:	4b05      	ldr	r3, [pc, #20]	; (401298 <pmc_enable_periph_clk+0x50>)
  401282:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401286:	2000      	movs	r0, #0
  401288:	4770      	bx	lr
		return 1;
  40128a:	2001      	movs	r0, #1
  40128c:	4770      	bx	lr
	return 0;
  40128e:	2000      	movs	r0, #0
  401290:	4770      	bx	lr
  401292:	2000      	movs	r0, #0
}
  401294:	4770      	bx	lr
  401296:	bf00      	nop
  401298:	400e0600 	.word	0x400e0600

0040129c <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  40129c:	4770      	bx	lr
	...

004012a0 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  4012a0:	4a10      	ldr	r2, [pc, #64]	; (4012e4 <pmc_enable_waitmode+0x44>)
  4012a2:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4012a4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4012a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  4012ac:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  4012ae:	6a11      	ldr	r1, [r2, #32]
  4012b0:	4b0d      	ldr	r3, [pc, #52]	; (4012e8 <pmc_enable_waitmode+0x48>)
  4012b2:	430b      	orrs	r3, r1
  4012b4:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4012b6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012b8:	f013 0f08 	tst.w	r3, #8
  4012bc:	d0fb      	beq.n	4012b6 <pmc_enable_waitmode+0x16>
  4012be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  4012c2:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  4012c4:	3b01      	subs	r3, #1
  4012c6:	d1fc      	bne.n	4012c2 <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4012c8:	4a06      	ldr	r2, [pc, #24]	; (4012e4 <pmc_enable_waitmode+0x44>)
  4012ca:	6a13      	ldr	r3, [r2, #32]
  4012cc:	f013 0f08 	tst.w	r3, #8
  4012d0:	d0fb      	beq.n	4012ca <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4012d2:	4a04      	ldr	r2, [pc, #16]	; (4012e4 <pmc_enable_waitmode+0x44>)
  4012d4:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4012d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4012da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  4012de:	6713      	str	r3, [r2, #112]	; 0x70
  4012e0:	4770      	bx	lr
  4012e2:	bf00      	nop
  4012e4:	400e0600 	.word	0x400e0600
  4012e8:	00370004 	.word	0x00370004

004012ec <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  4012ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  4012f0:	1e43      	subs	r3, r0, #1
  4012f2:	2b04      	cmp	r3, #4
  4012f4:	f200 8107 	bhi.w	401506 <pmc_sleep+0x21a>
  4012f8:	e8df f013 	tbh	[pc, r3, lsl #1]
  4012fc:	00050005 	.word	0x00050005
  401300:	00150015 	.word	0x00150015
  401304:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  401306:	4a81      	ldr	r2, [pc, #516]	; (40150c <pmc_sleep+0x220>)
  401308:	6913      	ldr	r3, [r2, #16]
  40130a:	f023 0304 	bic.w	r3, r3, #4
  40130e:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  401310:	2201      	movs	r2, #1
  401312:	4b7f      	ldr	r3, [pc, #508]	; (401510 <pmc_sleep+0x224>)
  401314:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401316:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40131a:	b662      	cpsie	i
  __ASM volatile ("dsb");
  40131c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  401320:	bf30      	wfi
  401322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401326:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  401328:	2803      	cmp	r0, #3
  40132a:	bf0c      	ite	eq
  40132c:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  40132e:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  401332:	4b78      	ldr	r3, [pc, #480]	; (401514 <pmc_sleep+0x228>)
  401334:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401336:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401338:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  40133c:	2200      	movs	r2, #0
  40133e:	4b74      	ldr	r3, [pc, #464]	; (401510 <pmc_sleep+0x224>)
  401340:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  401342:	2201      	movs	r2, #1
  401344:	4b74      	ldr	r3, [pc, #464]	; (401518 <pmc_sleep+0x22c>)
  401346:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  401348:	4b74      	ldr	r3, [pc, #464]	; (40151c <pmc_sleep+0x230>)
  40134a:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  40134c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  40134e:	4a74      	ldr	r2, [pc, #464]	; (401520 <pmc_sleep+0x234>)
  401350:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  401354:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  401356:	4a73      	ldr	r2, [pc, #460]	; (401524 <pmc_sleep+0x238>)
  401358:	433a      	orrs	r2, r7
  40135a:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  40135c:	f005 0903 	and.w	r9, r5, #3
  401360:	f1b9 0f01 	cmp.w	r9, #1
  401364:	f240 8089 	bls.w	40147a <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  401368:	f025 0103 	bic.w	r1, r5, #3
  40136c:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  401370:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401372:	461a      	mov	r2, r3
  401374:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401376:	f013 0f08 	tst.w	r3, #8
  40137a:	d0fb      	beq.n	401374 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  40137c:	f011 0f70 	tst.w	r1, #112	; 0x70
  401380:	d008      	beq.n	401394 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  401382:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  401386:	4b65      	ldr	r3, [pc, #404]	; (40151c <pmc_sleep+0x230>)
  401388:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40138a:	461a      	mov	r2, r3
  40138c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40138e:	f013 0f08 	tst.w	r3, #8
  401392:	d0fb      	beq.n	40138c <pmc_sleep+0xa0>
	pmc_disable_pllack();
  401394:	4b64      	ldr	r3, [pc, #400]	; (401528 <pmc_sleep+0x23c>)
  401396:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401398:	4a60      	ldr	r2, [pc, #384]	; (40151c <pmc_sleep+0x230>)
  40139a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40139c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4013a0:	d0fb      	beq.n	40139a <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4013a2:	4a5e      	ldr	r2, [pc, #376]	; (40151c <pmc_sleep+0x230>)
  4013a4:	6a11      	ldr	r1, [r2, #32]
  4013a6:	4b61      	ldr	r3, [pc, #388]	; (40152c <pmc_sleep+0x240>)
  4013a8:	400b      	ands	r3, r1
  4013aa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4013ae:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4013b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013b2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4013b6:	d0fb      	beq.n	4013b0 <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  4013b8:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  4013bc:	4a58      	ldr	r2, [pc, #352]	; (401520 <pmc_sleep+0x234>)
  4013be:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  4013c0:	2c04      	cmp	r4, #4
  4013c2:	d05c      	beq.n	40147e <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4013c4:	4c52      	ldr	r4, [pc, #328]	; (401510 <pmc_sleep+0x224>)
  4013c6:	2301      	movs	r3, #1
  4013c8:	7023      	strb	r3, [r4, #0]
  4013ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4013ce:	b662      	cpsie	i

		pmc_enable_waitmode();
  4013d0:	4b57      	ldr	r3, [pc, #348]	; (401530 <pmc_sleep+0x244>)
  4013d2:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4013d4:	b672      	cpsid	i
  4013d6:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4013da:	2300      	movs	r3, #0
  4013dc:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4013de:	f017 0f02 	tst.w	r7, #2
  4013e2:	d055      	beq.n	401490 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4013e4:	4a4d      	ldr	r2, [pc, #308]	; (40151c <pmc_sleep+0x230>)
  4013e6:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4013e8:	4952      	ldr	r1, [pc, #328]	; (401534 <pmc_sleep+0x248>)
  4013ea:	4019      	ands	r1, r3
  4013ec:	4b52      	ldr	r3, [pc, #328]	; (401538 <pmc_sleep+0x24c>)
  4013ee:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4013f0:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4013f2:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  4013f4:	4b51      	ldr	r3, [pc, #324]	; (40153c <pmc_sleep+0x250>)
  4013f6:	400b      	ands	r3, r1
  4013f8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4013fc:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  4013fe:	4b50      	ldr	r3, [pc, #320]	; (401540 <pmc_sleep+0x254>)
  401400:	4033      	ands	r3, r6
  401402:	2b00      	cmp	r3, #0
  401404:	d06e      	beq.n	4014e4 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  401406:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  40140a:	4b44      	ldr	r3, [pc, #272]	; (40151c <pmc_sleep+0x230>)
  40140c:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  40140e:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  401410:	f1b9 0f02 	cmp.w	r9, #2
  401414:	d104      	bne.n	401420 <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  401416:	4a41      	ldr	r2, [pc, #260]	; (40151c <pmc_sleep+0x230>)
  401418:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40141a:	f013 0f02 	tst.w	r3, #2
  40141e:	d0fb      	beq.n	401418 <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  401420:	4a3e      	ldr	r2, [pc, #248]	; (40151c <pmc_sleep+0x230>)
  401422:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  401424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  401428:	f005 0070 	and.w	r0, r5, #112	; 0x70
  40142c:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  40142e:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401430:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401432:	f013 0f08 	tst.w	r3, #8
  401436:	d0fb      	beq.n	401430 <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  401438:	4b39      	ldr	r3, [pc, #228]	; (401520 <pmc_sleep+0x234>)
  40143a:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  40143e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  401442:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401444:	461a      	mov	r2, r3
  401446:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401448:	f013 0f08 	tst.w	r3, #8
  40144c:	d0fb      	beq.n	401446 <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  40144e:	4a33      	ldr	r2, [pc, #204]	; (40151c <pmc_sleep+0x230>)
  401450:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401452:	420b      	tst	r3, r1
  401454:	d0fc      	beq.n	401450 <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  401456:	2200      	movs	r2, #0
  401458:	4b2f      	ldr	r3, [pc, #188]	; (401518 <pmc_sleep+0x22c>)
  40145a:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  40145c:	4b39      	ldr	r3, [pc, #228]	; (401544 <pmc_sleep+0x258>)
  40145e:	681b      	ldr	r3, [r3, #0]
  401460:	b11b      	cbz	r3, 40146a <pmc_sleep+0x17e>
			callback_clocks_restored();
  401462:	4798      	blx	r3
			callback_clocks_restored = NULL;
  401464:	2200      	movs	r2, #0
  401466:	4b37      	ldr	r3, [pc, #220]	; (401544 <pmc_sleep+0x258>)
  401468:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  40146a:	2201      	movs	r2, #1
  40146c:	4b28      	ldr	r3, [pc, #160]	; (401510 <pmc_sleep+0x224>)
  40146e:	701a      	strb	r2, [r3, #0]
  401470:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401474:	b662      	cpsie	i
  401476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  40147a:	4629      	mov	r1, r5
  40147c:	e77e      	b.n	40137c <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40147e:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  401482:	6a11      	ldr	r1, [r2, #32]
  401484:	4b30      	ldr	r3, [pc, #192]	; (401548 <pmc_sleep+0x25c>)
  401486:	400b      	ands	r3, r1
  401488:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40148c:	6213      	str	r3, [r2, #32]
  40148e:	e799      	b.n	4013c4 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  401490:	f017 0f01 	tst.w	r7, #1
  401494:	d0b3      	beq.n	4013fe <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  401496:	4b21      	ldr	r3, [pc, #132]	; (40151c <pmc_sleep+0x230>)
  401498:	6a1b      	ldr	r3, [r3, #32]
  40149a:	f013 0f01 	tst.w	r3, #1
  40149e:	d10b      	bne.n	4014b8 <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4014a0:	491e      	ldr	r1, [pc, #120]	; (40151c <pmc_sleep+0x230>)
  4014a2:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  4014a4:	4a29      	ldr	r2, [pc, #164]	; (40154c <pmc_sleep+0x260>)
  4014a6:	401a      	ands	r2, r3
  4014a8:	4b29      	ldr	r3, [pc, #164]	; (401550 <pmc_sleep+0x264>)
  4014aa:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4014ac:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4014ae:	460a      	mov	r2, r1
  4014b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4014b2:	f013 0f01 	tst.w	r3, #1
  4014b6:	d0fb      	beq.n	4014b0 <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  4014b8:	4b18      	ldr	r3, [pc, #96]	; (40151c <pmc_sleep+0x230>)
  4014ba:	6a1b      	ldr	r3, [r3, #32]
  4014bc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4014c0:	d108      	bne.n	4014d4 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4014c2:	4a16      	ldr	r2, [pc, #88]	; (40151c <pmc_sleep+0x230>)
  4014c4:	6a11      	ldr	r1, [r2, #32]
  4014c6:	4b23      	ldr	r3, [pc, #140]	; (401554 <pmc_sleep+0x268>)
  4014c8:	430b      	orrs	r3, r1
  4014ca:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4014cc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4014ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4014d2:	d0fb      	beq.n	4014cc <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4014d4:	4a11      	ldr	r2, [pc, #68]	; (40151c <pmc_sleep+0x230>)
  4014d6:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  4014d8:	4b18      	ldr	r3, [pc, #96]	; (40153c <pmc_sleep+0x250>)
  4014da:	400b      	ands	r3, r1
  4014dc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4014e0:	6213      	str	r3, [r2, #32]
  4014e2:	e78c      	b.n	4013fe <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  4014e4:	2100      	movs	r1, #0
  4014e6:	e793      	b.n	401410 <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  4014e8:	4a08      	ldr	r2, [pc, #32]	; (40150c <pmc_sleep+0x220>)
  4014ea:	6913      	ldr	r3, [r2, #16]
  4014ec:	f043 0304 	orr.w	r3, r3, #4
  4014f0:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  4014f2:	4a19      	ldr	r2, [pc, #100]	; (401558 <pmc_sleep+0x26c>)
  4014f4:	4b19      	ldr	r3, [pc, #100]	; (40155c <pmc_sleep+0x270>)
  4014f6:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  4014f8:	2201      	movs	r2, #1
  4014fa:	4b05      	ldr	r3, [pc, #20]	; (401510 <pmc_sleep+0x224>)
  4014fc:	701a      	strb	r2, [r3, #0]
  4014fe:	f3bf 8f5f 	dmb	sy
  401502:	b662      	cpsie	i
  __ASM volatile ("wfi");
  401504:	bf30      	wfi
  401506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40150a:	bf00      	nop
  40150c:	e000ed00 	.word	0xe000ed00
  401510:	20400018 	.word	0x20400018
  401514:	0040129d 	.word	0x0040129d
  401518:	20400c64 	.word	0x20400c64
  40151c:	400e0600 	.word	0x400e0600
  401520:	400e0c00 	.word	0x400e0c00
  401524:	00370008 	.word	0x00370008
  401528:	00401229 	.word	0x00401229
  40152c:	fec8ffff 	.word	0xfec8ffff
  401530:	004012a1 	.word	0x004012a1
  401534:	fec8fffc 	.word	0xfec8fffc
  401538:	01370002 	.word	0x01370002
  40153c:	ffc8ff87 	.word	0xffc8ff87
  401540:	07ff0000 	.word	0x07ff0000
  401544:	20400c68 	.word	0x20400c68
  401548:	ffc8fffe 	.word	0xffc8fffe
  40154c:	ffc8fffc 	.word	0xffc8fffc
  401550:	00370001 	.word	0x00370001
  401554:	01370000 	.word	0x01370000
  401558:	a5000004 	.word	0xa5000004
  40155c:	400e1810 	.word	0x400e1810

00401560 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401560:	e7fe      	b.n	401560 <Dummy_Handler>
	...

00401564 <Reset_Handler>:
{
  401564:	b500      	push	{lr}
  401566:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401568:	4b25      	ldr	r3, [pc, #148]	; (401600 <Reset_Handler+0x9c>)
  40156a:	4a26      	ldr	r2, [pc, #152]	; (401604 <Reset_Handler+0xa0>)
  40156c:	429a      	cmp	r2, r3
  40156e:	d010      	beq.n	401592 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401570:	4b25      	ldr	r3, [pc, #148]	; (401608 <Reset_Handler+0xa4>)
  401572:	4a23      	ldr	r2, [pc, #140]	; (401600 <Reset_Handler+0x9c>)
  401574:	429a      	cmp	r2, r3
  401576:	d20c      	bcs.n	401592 <Reset_Handler+0x2e>
  401578:	3b01      	subs	r3, #1
  40157a:	1a9b      	subs	r3, r3, r2
  40157c:	f023 0303 	bic.w	r3, r3, #3
  401580:	3304      	adds	r3, #4
  401582:	4413      	add	r3, r2
  401584:	491f      	ldr	r1, [pc, #124]	; (401604 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401586:	f851 0b04 	ldr.w	r0, [r1], #4
  40158a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40158e:	429a      	cmp	r2, r3
  401590:	d1f9      	bne.n	401586 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401592:	4b1e      	ldr	r3, [pc, #120]	; (40160c <Reset_Handler+0xa8>)
  401594:	4a1e      	ldr	r2, [pc, #120]	; (401610 <Reset_Handler+0xac>)
  401596:	429a      	cmp	r2, r3
  401598:	d20a      	bcs.n	4015b0 <Reset_Handler+0x4c>
  40159a:	3b01      	subs	r3, #1
  40159c:	1a9b      	subs	r3, r3, r2
  40159e:	f023 0303 	bic.w	r3, r3, #3
  4015a2:	3304      	adds	r3, #4
  4015a4:	4413      	add	r3, r2
                *pDest++ = 0;
  4015a6:	2100      	movs	r1, #0
  4015a8:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4015ac:	4293      	cmp	r3, r2
  4015ae:	d1fb      	bne.n	4015a8 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4015b0:	4a18      	ldr	r2, [pc, #96]	; (401614 <Reset_Handler+0xb0>)
  4015b2:	4b19      	ldr	r3, [pc, #100]	; (401618 <Reset_Handler+0xb4>)
  4015b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4015b8:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4015ba:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4015be:	fab3 f383 	clz	r3, r3
  4015c2:	095b      	lsrs	r3, r3, #5
  4015c4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4015c6:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4015c8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4015cc:	2200      	movs	r2, #0
  4015ce:	4b13      	ldr	r3, [pc, #76]	; (40161c <Reset_Handler+0xb8>)
  4015d0:	701a      	strb	r2, [r3, #0]
	return flags;
  4015d2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4015d4:	4a12      	ldr	r2, [pc, #72]	; (401620 <Reset_Handler+0xbc>)
  4015d6:	6813      	ldr	r3, [r2, #0]
  4015d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4015dc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4015de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4015e2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4015e6:	b129      	cbz	r1, 4015f4 <Reset_Handler+0x90>
		cpu_irq_enable();
  4015e8:	2201      	movs	r2, #1
  4015ea:	4b0c      	ldr	r3, [pc, #48]	; (40161c <Reset_Handler+0xb8>)
  4015ec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4015ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4015f2:	b662      	cpsie	i
        __libc_init_array();
  4015f4:	4b0b      	ldr	r3, [pc, #44]	; (401624 <Reset_Handler+0xc0>)
  4015f6:	4798      	blx	r3
        main();
  4015f8:	4b0b      	ldr	r3, [pc, #44]	; (401628 <Reset_Handler+0xc4>)
  4015fa:	4798      	blx	r3
  4015fc:	e7fe      	b.n	4015fc <Reset_Handler+0x98>
  4015fe:	bf00      	nop
  401600:	20400000 	.word	0x20400000
  401604:	004073cc 	.word	0x004073cc
  401608:	204009d0 	.word	0x204009d0
  40160c:	20400cd0 	.word	0x20400cd0
  401610:	204009d0 	.word	0x204009d0
  401614:	e000ed00 	.word	0xe000ed00
  401618:	00400000 	.word	0x00400000
  40161c:	20400018 	.word	0x20400018
  401620:	e000ed88 	.word	0xe000ed88
  401624:	004020a9 	.word	0x004020a9
  401628:	00401c21 	.word	0x00401c21

0040162c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40162c:	4b3b      	ldr	r3, [pc, #236]	; (40171c <SystemCoreClockUpdate+0xf0>)
  40162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401630:	f003 0303 	and.w	r3, r3, #3
  401634:	2b01      	cmp	r3, #1
  401636:	d01d      	beq.n	401674 <SystemCoreClockUpdate+0x48>
  401638:	b183      	cbz	r3, 40165c <SystemCoreClockUpdate+0x30>
  40163a:	2b02      	cmp	r3, #2
  40163c:	d036      	beq.n	4016ac <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40163e:	4b37      	ldr	r3, [pc, #220]	; (40171c <SystemCoreClockUpdate+0xf0>)
  401640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401642:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401646:	2b70      	cmp	r3, #112	; 0x70
  401648:	d05f      	beq.n	40170a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40164a:	4b34      	ldr	r3, [pc, #208]	; (40171c <SystemCoreClockUpdate+0xf0>)
  40164c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40164e:	4934      	ldr	r1, [pc, #208]	; (401720 <SystemCoreClockUpdate+0xf4>)
  401650:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401654:	680b      	ldr	r3, [r1, #0]
  401656:	40d3      	lsrs	r3, r2
  401658:	600b      	str	r3, [r1, #0]
  40165a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40165c:	4b31      	ldr	r3, [pc, #196]	; (401724 <SystemCoreClockUpdate+0xf8>)
  40165e:	695b      	ldr	r3, [r3, #20]
  401660:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401664:	bf14      	ite	ne
  401666:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40166a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40166e:	4b2c      	ldr	r3, [pc, #176]	; (401720 <SystemCoreClockUpdate+0xf4>)
  401670:	601a      	str	r2, [r3, #0]
  401672:	e7e4      	b.n	40163e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401674:	4b29      	ldr	r3, [pc, #164]	; (40171c <SystemCoreClockUpdate+0xf0>)
  401676:	6a1b      	ldr	r3, [r3, #32]
  401678:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40167c:	d003      	beq.n	401686 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40167e:	4a2a      	ldr	r2, [pc, #168]	; (401728 <SystemCoreClockUpdate+0xfc>)
  401680:	4b27      	ldr	r3, [pc, #156]	; (401720 <SystemCoreClockUpdate+0xf4>)
  401682:	601a      	str	r2, [r3, #0]
  401684:	e7db      	b.n	40163e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401686:	4a29      	ldr	r2, [pc, #164]	; (40172c <SystemCoreClockUpdate+0x100>)
  401688:	4b25      	ldr	r3, [pc, #148]	; (401720 <SystemCoreClockUpdate+0xf4>)
  40168a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40168c:	4b23      	ldr	r3, [pc, #140]	; (40171c <SystemCoreClockUpdate+0xf0>)
  40168e:	6a1b      	ldr	r3, [r3, #32]
  401690:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401694:	2b10      	cmp	r3, #16
  401696:	d005      	beq.n	4016a4 <SystemCoreClockUpdate+0x78>
  401698:	2b20      	cmp	r3, #32
  40169a:	d1d0      	bne.n	40163e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  40169c:	4a22      	ldr	r2, [pc, #136]	; (401728 <SystemCoreClockUpdate+0xfc>)
  40169e:	4b20      	ldr	r3, [pc, #128]	; (401720 <SystemCoreClockUpdate+0xf4>)
  4016a0:	601a      	str	r2, [r3, #0]
          break;
  4016a2:	e7cc      	b.n	40163e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4016a4:	4a22      	ldr	r2, [pc, #136]	; (401730 <SystemCoreClockUpdate+0x104>)
  4016a6:	4b1e      	ldr	r3, [pc, #120]	; (401720 <SystemCoreClockUpdate+0xf4>)
  4016a8:	601a      	str	r2, [r3, #0]
          break;
  4016aa:	e7c8      	b.n	40163e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4016ac:	4b1b      	ldr	r3, [pc, #108]	; (40171c <SystemCoreClockUpdate+0xf0>)
  4016ae:	6a1b      	ldr	r3, [r3, #32]
  4016b0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4016b4:	d016      	beq.n	4016e4 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4016b6:	4a1c      	ldr	r2, [pc, #112]	; (401728 <SystemCoreClockUpdate+0xfc>)
  4016b8:	4b19      	ldr	r3, [pc, #100]	; (401720 <SystemCoreClockUpdate+0xf4>)
  4016ba:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4016bc:	4b17      	ldr	r3, [pc, #92]	; (40171c <SystemCoreClockUpdate+0xf0>)
  4016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016c0:	f003 0303 	and.w	r3, r3, #3
  4016c4:	2b02      	cmp	r3, #2
  4016c6:	d1ba      	bne.n	40163e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4016c8:	4a14      	ldr	r2, [pc, #80]	; (40171c <SystemCoreClockUpdate+0xf0>)
  4016ca:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4016cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4016ce:	4814      	ldr	r0, [pc, #80]	; (401720 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4016d0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4016d4:	6803      	ldr	r3, [r0, #0]
  4016d6:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4016da:	b2d2      	uxtb	r2, r2
  4016dc:	fbb3 f3f2 	udiv	r3, r3, r2
  4016e0:	6003      	str	r3, [r0, #0]
  4016e2:	e7ac      	b.n	40163e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4016e4:	4a11      	ldr	r2, [pc, #68]	; (40172c <SystemCoreClockUpdate+0x100>)
  4016e6:	4b0e      	ldr	r3, [pc, #56]	; (401720 <SystemCoreClockUpdate+0xf4>)
  4016e8:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4016ea:	4b0c      	ldr	r3, [pc, #48]	; (40171c <SystemCoreClockUpdate+0xf0>)
  4016ec:	6a1b      	ldr	r3, [r3, #32]
  4016ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4016f2:	2b10      	cmp	r3, #16
  4016f4:	d005      	beq.n	401702 <SystemCoreClockUpdate+0xd6>
  4016f6:	2b20      	cmp	r3, #32
  4016f8:	d1e0      	bne.n	4016bc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4016fa:	4a0b      	ldr	r2, [pc, #44]	; (401728 <SystemCoreClockUpdate+0xfc>)
  4016fc:	4b08      	ldr	r3, [pc, #32]	; (401720 <SystemCoreClockUpdate+0xf4>)
  4016fe:	601a      	str	r2, [r3, #0]
          break;
  401700:	e7dc      	b.n	4016bc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401702:	4a0b      	ldr	r2, [pc, #44]	; (401730 <SystemCoreClockUpdate+0x104>)
  401704:	4b06      	ldr	r3, [pc, #24]	; (401720 <SystemCoreClockUpdate+0xf4>)
  401706:	601a      	str	r2, [r3, #0]
          break;
  401708:	e7d8      	b.n	4016bc <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40170a:	4a05      	ldr	r2, [pc, #20]	; (401720 <SystemCoreClockUpdate+0xf4>)
  40170c:	6813      	ldr	r3, [r2, #0]
  40170e:	4909      	ldr	r1, [pc, #36]	; (401734 <SystemCoreClockUpdate+0x108>)
  401710:	fba1 1303 	umull	r1, r3, r1, r3
  401714:	085b      	lsrs	r3, r3, #1
  401716:	6013      	str	r3, [r2, #0]
  401718:	4770      	bx	lr
  40171a:	bf00      	nop
  40171c:	400e0600 	.word	0x400e0600
  401720:	2040001c 	.word	0x2040001c
  401724:	400e1810 	.word	0x400e1810
  401728:	00b71b00 	.word	0x00b71b00
  40172c:	003d0900 	.word	0x003d0900
  401730:	007a1200 	.word	0x007a1200
  401734:	aaaaaaab 	.word	0xaaaaaaab

00401738 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401738:	4b16      	ldr	r3, [pc, #88]	; (401794 <system_init_flash+0x5c>)
  40173a:	4298      	cmp	r0, r3
  40173c:	d913      	bls.n	401766 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40173e:	4b16      	ldr	r3, [pc, #88]	; (401798 <system_init_flash+0x60>)
  401740:	4298      	cmp	r0, r3
  401742:	d915      	bls.n	401770 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401744:	4b15      	ldr	r3, [pc, #84]	; (40179c <system_init_flash+0x64>)
  401746:	4298      	cmp	r0, r3
  401748:	d916      	bls.n	401778 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40174a:	4b15      	ldr	r3, [pc, #84]	; (4017a0 <system_init_flash+0x68>)
  40174c:	4298      	cmp	r0, r3
  40174e:	d917      	bls.n	401780 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401750:	4b14      	ldr	r3, [pc, #80]	; (4017a4 <system_init_flash+0x6c>)
  401752:	4298      	cmp	r0, r3
  401754:	d918      	bls.n	401788 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401756:	4b14      	ldr	r3, [pc, #80]	; (4017a8 <system_init_flash+0x70>)
  401758:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40175a:	bf94      	ite	ls
  40175c:	4a13      	ldrls	r2, [pc, #76]	; (4017ac <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40175e:	4a14      	ldrhi	r2, [pc, #80]	; (4017b0 <system_init_flash+0x78>)
  401760:	4b14      	ldr	r3, [pc, #80]	; (4017b4 <system_init_flash+0x7c>)
  401762:	601a      	str	r2, [r3, #0]
  401764:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401766:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40176a:	4b12      	ldr	r3, [pc, #72]	; (4017b4 <system_init_flash+0x7c>)
  40176c:	601a      	str	r2, [r3, #0]
  40176e:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401770:	4a11      	ldr	r2, [pc, #68]	; (4017b8 <system_init_flash+0x80>)
  401772:	4b10      	ldr	r3, [pc, #64]	; (4017b4 <system_init_flash+0x7c>)
  401774:	601a      	str	r2, [r3, #0]
  401776:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401778:	4a10      	ldr	r2, [pc, #64]	; (4017bc <system_init_flash+0x84>)
  40177a:	4b0e      	ldr	r3, [pc, #56]	; (4017b4 <system_init_flash+0x7c>)
  40177c:	601a      	str	r2, [r3, #0]
  40177e:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401780:	4a0f      	ldr	r2, [pc, #60]	; (4017c0 <system_init_flash+0x88>)
  401782:	4b0c      	ldr	r3, [pc, #48]	; (4017b4 <system_init_flash+0x7c>)
  401784:	601a      	str	r2, [r3, #0]
  401786:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401788:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40178c:	4b09      	ldr	r3, [pc, #36]	; (4017b4 <system_init_flash+0x7c>)
  40178e:	601a      	str	r2, [r3, #0]
  401790:	4770      	bx	lr
  401792:	bf00      	nop
  401794:	015ef3bf 	.word	0x015ef3bf
  401798:	02bde77f 	.word	0x02bde77f
  40179c:	041cdb3f 	.word	0x041cdb3f
  4017a0:	057bceff 	.word	0x057bceff
  4017a4:	06dac2bf 	.word	0x06dac2bf
  4017a8:	0839b67f 	.word	0x0839b67f
  4017ac:	04000500 	.word	0x04000500
  4017b0:	04000600 	.word	0x04000600
  4017b4:	400e0c00 	.word	0x400e0c00
  4017b8:	04000100 	.word	0x04000100
  4017bc:	04000200 	.word	0x04000200
  4017c0:	04000300 	.word	0x04000300

004017c4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4017c4:	4b0a      	ldr	r3, [pc, #40]	; (4017f0 <_sbrk+0x2c>)
  4017c6:	681b      	ldr	r3, [r3, #0]
  4017c8:	b153      	cbz	r3, 4017e0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4017ca:	4b09      	ldr	r3, [pc, #36]	; (4017f0 <_sbrk+0x2c>)
  4017cc:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4017ce:	181a      	adds	r2, r3, r0
  4017d0:	4908      	ldr	r1, [pc, #32]	; (4017f4 <_sbrk+0x30>)
  4017d2:	4291      	cmp	r1, r2
  4017d4:	db08      	blt.n	4017e8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4017d6:	4610      	mov	r0, r2
  4017d8:	4a05      	ldr	r2, [pc, #20]	; (4017f0 <_sbrk+0x2c>)
  4017da:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4017dc:	4618      	mov	r0, r3
  4017de:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4017e0:	4a05      	ldr	r2, [pc, #20]	; (4017f8 <_sbrk+0x34>)
  4017e2:	4b03      	ldr	r3, [pc, #12]	; (4017f0 <_sbrk+0x2c>)
  4017e4:	601a      	str	r2, [r3, #0]
  4017e6:	e7f0      	b.n	4017ca <_sbrk+0x6>
		return (caddr_t) -1;	
  4017e8:	f04f 30ff 	mov.w	r0, #4294967295
}
  4017ec:	4770      	bx	lr
  4017ee:	bf00      	nop
  4017f0:	20400c6c 	.word	0x20400c6c
  4017f4:	2045fffc 	.word	0x2045fffc
  4017f8:	20402ed0 	.word	0x20402ed0

004017fc <RTT_init>:
	NVIC_EnableIRQ((IRQn_Type) ID_TC);
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
}


static void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource) {
  4017fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401800:	ed2d 8b02 	vpush	{d8}
  401804:	b082      	sub	sp, #8
  401806:	eeb0 8a40 	vmov.f32	s16, s0
  40180a:	4680      	mov	r8, r0
  40180c:	460f      	mov	r7, r1

	uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
	
	rtt_sel_source(RTT, false);
  40180e:	4c20      	ldr	r4, [pc, #128]	; (401890 <RTT_init+0x94>)
  401810:	2100      	movs	r1, #0
  401812:	4620      	mov	r0, r4
  401814:	4b1f      	ldr	r3, [pc, #124]	; (401894 <RTT_init+0x98>)
  401816:	4798      	blx	r3
	uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
  401818:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 401898 <RTT_init+0x9c>
  40181c:	eec7 7a08 	vdiv.f32	s15, s14, s16
  401820:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  401824:	edcd 7a01 	vstr	s15, [sp, #4]
	rtt_init(RTT, pllPreScale);
  401828:	f8bd 1004 	ldrh.w	r1, [sp, #4]
  40182c:	4620      	mov	r0, r4
  40182e:	4b1b      	ldr	r3, [pc, #108]	; (40189c <RTT_init+0xa0>)
  401830:	4798      	blx	r3
	
	if (rttIRQSource & RTT_MR_ALMIEN) {
  401832:	f417 3f80 	tst.w	r7, #65536	; 0x10000
  401836:	d116      	bne.n	401866 <RTT_init+0x6a>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401838:	4b19      	ldr	r3, [pc, #100]	; (4018a0 <RTT_init+0xa4>)
  40183a:	2208      	movs	r2, #8
  40183c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401840:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401844:	2180      	movs	r1, #128	; 0x80
  401846:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40184a:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 4);
	NVIC_EnableIRQ(RTT_IRQn);

	/* Enable RTT interrupt */
	if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  40184c:	f417 3f40 	tst.w	r7, #196608	; 0x30000
  401850:	d119      	bne.n	401886 <RTT_init+0x8a>
	rtt_enable_interrupt(RTT, rttIRQSource);
	else
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  401852:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  401856:	480e      	ldr	r0, [pc, #56]	; (401890 <RTT_init+0x94>)
  401858:	4b12      	ldr	r3, [pc, #72]	; (4018a4 <RTT_init+0xa8>)
  40185a:	4798      	blx	r3
	
}
  40185c:	b002      	add	sp, #8
  40185e:	ecbd 8b02 	vpop	{d8}
  401862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ul_previous_time = rtt_read_timer_value(RTT);
  401866:	4620      	mov	r0, r4
  401868:	4b0f      	ldr	r3, [pc, #60]	; (4018a8 <RTT_init+0xac>)
  40186a:	4798      	blx	r3
  40186c:	4604      	mov	r4, r0
		while (ul_previous_time == rtt_read_timer_value(RTT));
  40186e:	4e08      	ldr	r6, [pc, #32]	; (401890 <RTT_init+0x94>)
  401870:	4d0d      	ldr	r5, [pc, #52]	; (4018a8 <RTT_init+0xac>)
  401872:	4630      	mov	r0, r6
  401874:	47a8      	blx	r5
  401876:	4284      	cmp	r4, r0
  401878:	d0fb      	beq.n	401872 <RTT_init+0x76>
		rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  40187a:	eb04 0108 	add.w	r1, r4, r8
  40187e:	4804      	ldr	r0, [pc, #16]	; (401890 <RTT_init+0x94>)
  401880:	4b0a      	ldr	r3, [pc, #40]	; (4018ac <RTT_init+0xb0>)
  401882:	4798      	blx	r3
  401884:	e7d8      	b.n	401838 <RTT_init+0x3c>
	rtt_enable_interrupt(RTT, rttIRQSource);
  401886:	4639      	mov	r1, r7
  401888:	4801      	ldr	r0, [pc, #4]	; (401890 <RTT_init+0x94>)
  40188a:	4b09      	ldr	r3, [pc, #36]	; (4018b0 <RTT_init+0xb4>)
  40188c:	4798      	blx	r3
  40188e:	e7e5      	b.n	40185c <RTT_init+0x60>
  401890:	400e1830 	.word	0x400e1830
  401894:	004004ed 	.word	0x004004ed
  401898:	47000000 	.word	0x47000000
  40189c:	004004d9 	.word	0x004004d9
  4018a0:	e000e100 	.word	0xe000e100
  4018a4:	0040052d 	.word	0x0040052d
  4018a8:	00400541 	.word	0x00400541
  4018ac:	00400559 	.word	0x00400559
  4018b0:	00400519 	.word	0x00400519

004018b4 <RTC_Handler>:
void RTC_Handler(void) {
  4018b4:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_status = rtc_get_status(RTC);
  4018b6:	480f      	ldr	r0, [pc, #60]	; (4018f4 <RTC_Handler+0x40>)
  4018b8:	4b0f      	ldr	r3, [pc, #60]	; (4018f8 <RTC_Handler+0x44>)
  4018ba:	4798      	blx	r3
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  4018bc:	f010 0f02 	tst.w	r0, #2
  4018c0:	d002      	beq.n	4018c8 <RTC_Handler+0x14>
		flag_rtc_alarm = 1;
  4018c2:	2201      	movs	r2, #1
  4018c4:	4b0d      	ldr	r3, [pc, #52]	; (4018fc <RTC_Handler+0x48>)
  4018c6:	701a      	strb	r2, [r3, #0]
	rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  4018c8:	4d0a      	ldr	r5, [pc, #40]	; (4018f4 <RTC_Handler+0x40>)
  4018ca:	2104      	movs	r1, #4
  4018cc:	4628      	mov	r0, r5
  4018ce:	4c0c      	ldr	r4, [pc, #48]	; (401900 <RTC_Handler+0x4c>)
  4018d0:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  4018d2:	2102      	movs	r1, #2
  4018d4:	4628      	mov	r0, r5
  4018d6:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  4018d8:	2101      	movs	r1, #1
  4018da:	4628      	mov	r0, r5
  4018dc:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  4018de:	2108      	movs	r1, #8
  4018e0:	4628      	mov	r0, r5
  4018e2:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  4018e4:	2110      	movs	r1, #16
  4018e6:	4628      	mov	r0, r5
  4018e8:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  4018ea:	2120      	movs	r1, #32
  4018ec:	4628      	mov	r0, r5
  4018ee:	47a0      	blx	r4
  4018f0:	bd38      	pop	{r3, r4, r5, pc}
  4018f2:	bf00      	nop
  4018f4:	400e1860 	.word	0x400e1860
  4018f8:	004004d1 	.word	0x004004d1
  4018fc:	20400c70 	.word	0x20400c70
  401900:	004004d5 	.word	0x004004d5

00401904 <pisca_led>:
void pisca_led (int n, int t) {
  401904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (int i=0;i<n;i++){
  401908:	1e07      	subs	r7, r0, #0
  40190a:	dd31      	ble.n	401970 <pisca_led+0x6c>
  40190c:	460e      	mov	r6, r1
		delay_ms(t);
  40190e:	17cd      	asrs	r5, r1, #31
  401910:	4b18      	ldr	r3, [pc, #96]	; (401974 <pisca_led+0x70>)
  401912:	fba1 0103 	umull	r0, r1, r1, r3
  401916:	fb03 1105 	mla	r1, r3, r5, r1
  40191a:	f241 722c 	movw	r2, #5932	; 0x172c
  40191e:	2300      	movs	r3, #0
  401920:	f241 742b 	movw	r4, #5931	; 0x172b
  401924:	2500      	movs	r5, #0
  401926:	1900      	adds	r0, r0, r4
  401928:	4169      	adcs	r1, r5
  40192a:	4c13      	ldr	r4, [pc, #76]	; (401978 <pisca_led+0x74>)
  40192c:	47a0      	blx	r4
  40192e:	4682      	mov	sl, r0
  401930:	2400      	movs	r4, #0
		pio_clear(LED_PIO_IDX_3, LED_PIO_IDX_MASK_3);
  401932:	f8df 9050 	ldr.w	r9, [pc, #80]	; 401984 <pisca_led+0x80>
		delay_ms(t);
  401936:	4d11      	ldr	r5, [pc, #68]	; (40197c <pisca_led+0x78>)
		pio_set(LED_PIO_3, LED_PIO_IDX_MASK_3);
  401938:	f8df 804c 	ldr.w	r8, [pc, #76]	; 401988 <pisca_led+0x84>
  40193c:	e00a      	b.n	401954 <pisca_led+0x50>
		delay_ms(t);
  40193e:	2033      	movs	r0, #51	; 0x33
  401940:	47a8      	blx	r5
		pio_set(LED_PIO_3, LED_PIO_IDX_MASK_3);
  401942:	2104      	movs	r1, #4
  401944:	4640      	mov	r0, r8
  401946:	4b0e      	ldr	r3, [pc, #56]	; (401980 <pisca_led+0x7c>)
  401948:	4798      	blx	r3
		delay_ms(t);
  40194a:	2033      	movs	r0, #51	; 0x33
  40194c:	47a8      	blx	r5
	for (int i=0;i<n;i++){
  40194e:	3401      	adds	r4, #1
  401950:	42a7      	cmp	r7, r4
  401952:	d00d      	beq.n	401970 <pisca_led+0x6c>
		pio_clear(LED_PIO_IDX_3, LED_PIO_IDX_MASK_3);
  401954:	2104      	movs	r1, #4
  401956:	2002      	movs	r0, #2
  401958:	47c8      	blx	r9
		delay_ms(t);
  40195a:	2e00      	cmp	r6, #0
  40195c:	d0ef      	beq.n	40193e <pisca_led+0x3a>
  40195e:	4650      	mov	r0, sl
  401960:	47a8      	blx	r5
		pio_set(LED_PIO_3, LED_PIO_IDX_MASK_3);
  401962:	2104      	movs	r1, #4
  401964:	4640      	mov	r0, r8
  401966:	4b06      	ldr	r3, [pc, #24]	; (401980 <pisca_led+0x7c>)
  401968:	4798      	blx	r3
		delay_ms(t);
  40196a:	4650      	mov	r0, sl
  40196c:	47a8      	blx	r5
  40196e:	e7ee      	b.n	40194e <pisca_led+0x4a>
  401970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401974:	11e1a300 	.word	0x11e1a300
  401978:	00401d99 	.word	0x00401d99
  40197c:	20400001 	.word	0x20400001
  401980:	00400ed9 	.word	0x00400ed9
  401984:	00400edd 	.word	0x00400edd
  401988:	400e1000 	.word	0x400e1000

0040198c <LED_init>:
void LED_init(int estado) {
  40198c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401990:	b082      	sub	sp, #8
  401992:	4607      	mov	r7, r0
	pmc_enable_periph_clk(LED_PIO_ID_1);
  401994:	2007      	movs	r0, #7
  401996:	4d15      	ldr	r5, [pc, #84]	; (4019ec <LED_init+0x60>)
  401998:	47a8      	blx	r5
	pio_set_output(LED_PIO_1, LED_PIO_IDX_MASK_1, estado, 0, 0);
  40199a:	2400      	movs	r4, #0
  40199c:	9400      	str	r4, [sp, #0]
  40199e:	4623      	mov	r3, r4
  4019a0:	463a      	mov	r2, r7
  4019a2:	2101      	movs	r1, #1
  4019a4:	4812      	ldr	r0, [pc, #72]	; (4019f0 <LED_init+0x64>)
  4019a6:	4e13      	ldr	r6, [pc, #76]	; (4019f4 <LED_init+0x68>)
  4019a8:	47b0      	blx	r6
    pmc_enable_periph_clk(LED_PIO_ID_3);
  4019aa:	2006      	movs	r0, #6
  4019ac:	47a8      	blx	r5
    pio_set_output(LED_PIO_3, LED_PIO_IDX_MASK_3, estado, 0, 0 );
  4019ae:	9400      	str	r4, [sp, #0]
  4019b0:	4623      	mov	r3, r4
  4019b2:	463a      	mov	r2, r7
  4019b4:	2104      	movs	r1, #4
  4019b6:	4810      	ldr	r0, [pc, #64]	; (4019f8 <LED_init+0x6c>)
  4019b8:	47b0      	blx	r6
	pmc_enable_periph_clk(LED_PIO_ID);
  4019ba:	200c      	movs	r0, #12
  4019bc:	47a8      	blx	r5
	pio_set_output(LED_PIO, LED_PIO_IDX_MASK, estado, 0, 0);
  4019be:	f8df 8040 	ldr.w	r8, [pc, #64]	; 401a00 <LED_init+0x74>
  4019c2:	9400      	str	r4, [sp, #0]
  4019c4:	4623      	mov	r3, r4
  4019c6:	463a      	mov	r2, r7
  4019c8:	f44f 7180 	mov.w	r1, #256	; 0x100
  4019cc:	4640      	mov	r0, r8
  4019ce:	47b0      	blx	r6
	pmc_enable_periph_clk(LED_PIO_ID_2);
  4019d0:	2008      	movs	r0, #8
  4019d2:	47a8      	blx	r5
	pio_configure(LED_PIO_2, PIO_OUTPUT_1, LED_PIO_IDX_MASK_2, PIO_DEFAULT);
  4019d4:	4623      	mov	r3, r4
  4019d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4019da:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4019de:	4640      	mov	r0, r8
  4019e0:	4c06      	ldr	r4, [pc, #24]	; (4019fc <LED_init+0x70>)
  4019e2:	47a0      	blx	r4
};
  4019e4:	b002      	add	sp, #8
  4019e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4019ea:	bf00      	nop
  4019ec:	00401249 	.word	0x00401249
  4019f0:	400e0e00 	.word	0x400e0e00
  4019f4:	00400fa9 	.word	0x00400fa9
  4019f8:	400e1000 	.word	0x400e1000
  4019fc:	00400fd1 	.word	0x00400fd1
  401a00:	400e1200 	.word	0x400e1200

00401a04 <pin_toggle>:
void pin_toggle(Pio *pio, uint32_t mask) {
  401a04:	b538      	push	{r3, r4, r5, lr}
  401a06:	4604      	mov	r4, r0
  401a08:	460d      	mov	r5, r1
	if(pio_get_output_data_status(pio, mask))
  401a0a:	4b06      	ldr	r3, [pc, #24]	; (401a24 <pin_toggle+0x20>)
  401a0c:	4798      	blx	r3
  401a0e:	b920      	cbnz	r0, 401a1a <pin_toggle+0x16>
	pio_set(pio,mask);
  401a10:	4629      	mov	r1, r5
  401a12:	4620      	mov	r0, r4
  401a14:	4b04      	ldr	r3, [pc, #16]	; (401a28 <pin_toggle+0x24>)
  401a16:	4798      	blx	r3
  401a18:	bd38      	pop	{r3, r4, r5, pc}
	pio_clear(pio, mask);
  401a1a:	4629      	mov	r1, r5
  401a1c:	4620      	mov	r0, r4
  401a1e:	4b03      	ldr	r3, [pc, #12]	; (401a2c <pin_toggle+0x28>)
  401a20:	4798      	blx	r3
  401a22:	bd38      	pop	{r3, r4, r5, pc}
  401a24:	00401061 	.word	0x00401061
  401a28:	00400ed9 	.word	0x00400ed9
  401a2c:	00400edd 	.word	0x00400edd

00401a30 <TC1_Handler>:
void TC1_Handler(void) {
  401a30:	b500      	push	{lr}
  401a32:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 1);
  401a34:	2101      	movs	r1, #1
  401a36:	4805      	ldr	r0, [pc, #20]	; (401a4c <TC1_Handler+0x1c>)
  401a38:	4b05      	ldr	r3, [pc, #20]	; (401a50 <TC1_Handler+0x20>)
  401a3a:	4798      	blx	r3
  401a3c:	9001      	str	r0, [sp, #4]
	pin_toggle(LED_PIO_1, LED_PIO_IDX_MASK_1);  
  401a3e:	2101      	movs	r1, #1
  401a40:	4804      	ldr	r0, [pc, #16]	; (401a54 <TC1_Handler+0x24>)
  401a42:	4b05      	ldr	r3, [pc, #20]	; (401a58 <TC1_Handler+0x28>)
  401a44:	4798      	blx	r3
}
  401a46:	b003      	add	sp, #12
  401a48:	f85d fb04 	ldr.w	pc, [sp], #4
  401a4c:	4000c000 	.word	0x4000c000
  401a50:	00400719 	.word	0x00400719
  401a54:	400e0e00 	.word	0x400e0e00
  401a58:	00401a05 	.word	0x00401a05

00401a5c <TC2_Handler>:
void TC2_Handler(void) {
  401a5c:	b500      	push	{lr}
  401a5e:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 2);
  401a60:	2102      	movs	r1, #2
  401a62:	4806      	ldr	r0, [pc, #24]	; (401a7c <TC2_Handler+0x20>)
  401a64:	4b06      	ldr	r3, [pc, #24]	; (401a80 <TC2_Handler+0x24>)
  401a66:	4798      	blx	r3
  401a68:	9001      	str	r0, [sp, #4]
	pin_toggle(LED_PIO, LED_PIO_IDX_MASK);  
  401a6a:	f44f 7180 	mov.w	r1, #256	; 0x100
  401a6e:	4805      	ldr	r0, [pc, #20]	; (401a84 <TC2_Handler+0x28>)
  401a70:	4b05      	ldr	r3, [pc, #20]	; (401a88 <TC2_Handler+0x2c>)
  401a72:	4798      	blx	r3
}
  401a74:	b003      	add	sp, #12
  401a76:	f85d fb04 	ldr.w	pc, [sp], #4
  401a7a:	bf00      	nop
  401a7c:	4000c000 	.word	0x4000c000
  401a80:	00400719 	.word	0x00400719
  401a84:	400e1200 	.word	0x400e1200
  401a88:	00401a05 	.word	0x00401a05

00401a8c <RTT_Handler>:
void RTT_Handler(void) {
  401a8c:	b510      	push	{r4, lr}
	ul_status = rtt_get_status(RTT);
  401a8e:	480c      	ldr	r0, [pc, #48]	; (401ac0 <RTT_Handler+0x34>)
  401a90:	4b0c      	ldr	r3, [pc, #48]	; (401ac4 <RTT_Handler+0x38>)
  401a92:	4798      	blx	r3
  401a94:	4604      	mov	r4, r0
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  401a96:	f010 0f01 	tst.w	r0, #1
  401a9a:	d103      	bne.n	401aa4 <RTT_Handler+0x18>
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {
  401a9c:	f014 0f02 	tst.w	r4, #2
  401aa0:	d108      	bne.n	401ab4 <RTT_Handler+0x28>
  401aa2:	bd10      	pop	{r4, pc}
		RTT_init(4, 0, RTT_MR_RTTINCIEN);
  401aa4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  401aa8:	2000      	movs	r0, #0
  401aaa:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  401aae:	4b06      	ldr	r3, [pc, #24]	; (401ac8 <RTT_Handler+0x3c>)
  401ab0:	4798      	blx	r3
  401ab2:	e7f3      	b.n	401a9c <RTT_Handler+0x10>
		pin_toggle(LED_PIO_2, LED_PIO_IDX_MASK_2);    // BLINK Led
  401ab4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401ab8:	4804      	ldr	r0, [pc, #16]	; (401acc <RTT_Handler+0x40>)
  401aba:	4b05      	ldr	r3, [pc, #20]	; (401ad0 <RTT_Handler+0x44>)
  401abc:	4798      	blx	r3
}
  401abe:	e7f0      	b.n	401aa2 <RTT_Handler+0x16>
  401ac0:	400e1830 	.word	0x400e1830
  401ac4:	00400555 	.word	0x00400555
  401ac8:	004017fd 	.word	0x004017fd
  401acc:	400e1200 	.word	0x400e1200
  401ad0:	00401a05 	.word	0x00401a05

00401ad4 <TC_init>:
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  401ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401ad8:	b085      	sub	sp, #20
  401ada:	4606      	mov	r6, r0
  401adc:	460c      	mov	r4, r1
  401ade:	4617      	mov	r7, r2
  401ae0:	4698      	mov	r8, r3
	pmc_enable_periph_clk(ID_TC);
  401ae2:	4608      	mov	r0, r1
  401ae4:	4b1c      	ldr	r3, [pc, #112]	; (401b58 <TC_init+0x84>)
  401ae6:	4798      	blx	r3
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  401ae8:	4d1c      	ldr	r5, [pc, #112]	; (401b5c <TC_init+0x88>)
  401aea:	9500      	str	r5, [sp, #0]
  401aec:	ab02      	add	r3, sp, #8
  401aee:	aa03      	add	r2, sp, #12
  401af0:	4629      	mov	r1, r5
  401af2:	4640      	mov	r0, r8
  401af4:	f8df 9080 	ldr.w	r9, [pc, #128]	; 401b78 <TC_init+0xa4>
  401af8:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  401afa:	9a02      	ldr	r2, [sp, #8]
  401afc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401b00:	4639      	mov	r1, r7
  401b02:	4630      	mov	r0, r6
  401b04:	4b16      	ldr	r3, [pc, #88]	; (401b60 <TC_init+0x8c>)
  401b06:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  401b08:	9a03      	ldr	r2, [sp, #12]
  401b0a:	fbb5 f2f2 	udiv	r2, r5, r2
  401b0e:	fbb2 f2f8 	udiv	r2, r2, r8
  401b12:	4639      	mov	r1, r7
  401b14:	4630      	mov	r0, r6
  401b16:	4b13      	ldr	r3, [pc, #76]	; (401b64 <TC_init+0x90>)
  401b18:	4798      	blx	r3
	NVIC_SetPriority(ID_TC, 4);
  401b1a:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  401b1c:	2b00      	cmp	r3, #0
  401b1e:	db13      	blt.n	401b48 <TC_init+0x74>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401b20:	4a11      	ldr	r2, [pc, #68]	; (401b68 <TC_init+0x94>)
  401b22:	2180      	movs	r1, #128	; 0x80
  401b24:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401b26:	095b      	lsrs	r3, r3, #5
  401b28:	f004 041f 	and.w	r4, r4, #31
  401b2c:	2201      	movs	r2, #1
  401b2e:	fa02 f404 	lsl.w	r4, r2, r4
  401b32:	4a0e      	ldr	r2, [pc, #56]	; (401b6c <TC_init+0x98>)
  401b34:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  401b38:	2210      	movs	r2, #16
  401b3a:	4639      	mov	r1, r7
  401b3c:	4630      	mov	r0, r6
  401b3e:	4b0c      	ldr	r3, [pc, #48]	; (401b70 <TC_init+0x9c>)
  401b40:	4798      	blx	r3
}
  401b42:	b005      	add	sp, #20
  401b44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401b48:	f004 010f 	and.w	r1, r4, #15
  401b4c:	4a09      	ldr	r2, [pc, #36]	; (401b74 <TC_init+0xa0>)
  401b4e:	440a      	add	r2, r1
  401b50:	2180      	movs	r1, #128	; 0x80
  401b52:	7611      	strb	r1, [r2, #24]
  401b54:	e7e7      	b.n	401b26 <TC_init+0x52>
  401b56:	bf00      	nop
  401b58:	00401249 	.word	0x00401249
  401b5c:	11e1a300 	.word	0x11e1a300
  401b60:	004006e7 	.word	0x004006e7
  401b64:	00400709 	.word	0x00400709
  401b68:	e000e400 	.word	0xe000e400
  401b6c:	e000e100 	.word	0xe000e100
  401b70:	00400711 	.word	0x00400711
  401b74:	e000ecfc 	.word	0xe000ecfc
  401b78:	00400721 	.word	0x00400721

00401b7c <RTC_init>:


void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type) {
  401b7c:	b082      	sub	sp, #8
  401b7e:	b570      	push	{r4, r5, r6, lr}
  401b80:	b082      	sub	sp, #8
  401b82:	4605      	mov	r5, r0
  401b84:	460c      	mov	r4, r1
  401b86:	a906      	add	r1, sp, #24
  401b88:	e881 000c 	stmia.w	r1, {r2, r3}
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  401b8c:	2002      	movs	r0, #2
  401b8e:	4b1d      	ldr	r3, [pc, #116]	; (401c04 <RTC_init+0x88>)
  401b90:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(rtc, 0);
  401b92:	2100      	movs	r1, #0
  401b94:	4628      	mov	r0, r5
  401b96:	4b1c      	ldr	r3, [pc, #112]	; (401c08 <RTC_init+0x8c>)
  401b98:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  401b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401b9c:	9300      	str	r3, [sp, #0]
  401b9e:	9b08      	ldr	r3, [sp, #32]
  401ba0:	9a07      	ldr	r2, [sp, #28]
  401ba2:	9906      	ldr	r1, [sp, #24]
  401ba4:	4628      	mov	r0, r5
  401ba6:	4e19      	ldr	r6, [pc, #100]	; (401c0c <RTC_init+0x90>)
  401ba8:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.second);
  401baa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401bac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  401bae:	990a      	ldr	r1, [sp, #40]	; 0x28
  401bb0:	4628      	mov	r0, r5
  401bb2:	4e17      	ldr	r6, [pc, #92]	; (401c10 <RTC_init+0x94>)
  401bb4:	47b0      	blx	r6

	/* Configure RTC interrupts */
	NVIC_DisableIRQ(id_rtc);
  401bb6:	b262      	sxtb	r2, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401bb8:	b2e4      	uxtb	r4, r4
  401bba:	f004 011f 	and.w	r1, r4, #31
  401bbe:	2301      	movs	r3, #1
  401bc0:	408b      	lsls	r3, r1
  401bc2:	0956      	lsrs	r6, r2, #5
  401bc4:	4813      	ldr	r0, [pc, #76]	; (401c14 <RTC_init+0x98>)
  401bc6:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  401bca:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401bce:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  if(IRQn < 0) {
  401bd2:	2a00      	cmp	r2, #0
  401bd4:	db0f      	blt.n	401bf6 <RTC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401bd6:	490f      	ldr	r1, [pc, #60]	; (401c14 <RTC_init+0x98>)
  401bd8:	4411      	add	r1, r2
  401bda:	2280      	movs	r2, #128	; 0x80
  401bdc:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401be0:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
	NVIC_ClearPendingIRQ(id_rtc);
	NVIC_SetPriority(id_rtc, 4);
	NVIC_EnableIRQ(id_rtc);

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(rtc,  irq_type);
  401be4:	990d      	ldr	r1, [sp, #52]	; 0x34
  401be6:	4628      	mov	r0, r5
  401be8:	4b0b      	ldr	r3, [pc, #44]	; (401c18 <RTC_init+0x9c>)
  401bea:	4798      	blx	r3
}
  401bec:	b002      	add	sp, #8
  401bee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  401bf2:	b002      	add	sp, #8
  401bf4:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401bf6:	f004 040f 	and.w	r4, r4, #15
  401bfa:	4a08      	ldr	r2, [pc, #32]	; (401c1c <RTC_init+0xa0>)
  401bfc:	2180      	movs	r1, #128	; 0x80
  401bfe:	5511      	strb	r1, [r2, r4]
  401c00:	e7ee      	b.n	401be0 <RTC_init+0x64>
  401c02:	bf00      	nop
  401c04:	00401249 	.word	0x00401249
  401c08:	004001ad 	.word	0x004001ad
  401c0c:	004003b9 	.word	0x004003b9
  401c10:	00400221 	.word	0x00400221
  401c14:	e000e100 	.word	0xe000e100
  401c18:	004001c3 	.word	0x004001c3
  401c1c:	e000ed14 	.word	0xe000ed14

00401c20 <main>:
/************************************************************************/
/* Main                                                         */
/************************************************************************/

int main (void)
{
  401c20:	b580      	push	{r7, lr}
  401c22:	b09c      	sub	sp, #112	; 0x70
	/* Initialize the SAM system */
	sysclk_init();
  401c24:	4b45      	ldr	r3, [pc, #276]	; (401d3c <main+0x11c>)
  401c26:	4798      	blx	r3
	board_init();
  401c28:	4b45      	ldr	r3, [pc, #276]	; (401d40 <main+0x120>)
  401c2a:	4798      	blx	r3
	char str[25];
	gfx_mono_ssd1306_init();
  401c2c:	4b45      	ldr	r3, [pc, #276]	; (401d44 <main+0x124>)
  401c2e:	4798      	blx	r3

	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401c30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401c34:	4b44      	ldr	r3, [pc, #272]	; (401d48 <main+0x128>)
  401c36:	605a      	str	r2, [r3, #4]

	/* Configura Leds */
	LED_init(1);
  401c38:	2001      	movs	r0, #1
  401c3a:	4b44      	ldr	r3, [pc, #272]	; (401d4c <main+0x12c>)
  401c3c:	4798      	blx	r3

	/**
	 * Configura timer TC0, canal 1 
	 * e inicializa contagem 
	 */
	TC_init(TC0, ID_TC1, 1, 4);
  401c3e:	4c44      	ldr	r4, [pc, #272]	; (401d50 <main+0x130>)
  401c40:	2304      	movs	r3, #4
  401c42:	2201      	movs	r2, #1
  401c44:	2118      	movs	r1, #24
  401c46:	4620      	mov	r0, r4
  401c48:	4e42      	ldr	r6, [pc, #264]	; (401d54 <main+0x134>)
  401c4a:	47b0      	blx	r6
	tc_start(TC0, 1);
  401c4c:	2101      	movs	r1, #1
  401c4e:	4620      	mov	r0, r4
  401c50:	4d41      	ldr	r5, [pc, #260]	; (401d58 <main+0x138>)
  401c52:	47a8      	blx	r5
	
	TC_init(TC0, ID_TC2, 2, 5);
  401c54:	2305      	movs	r3, #5
  401c56:	2202      	movs	r2, #2
  401c58:	2119      	movs	r1, #25
  401c5a:	4620      	mov	r0, r4
  401c5c:	47b0      	blx	r6
	tc_start(TC0, 2);
  401c5e:	2102      	movs	r1, #2
  401c60:	4620      	mov	r0, r4
  401c62:	47a8      	blx	r5
	
	RTT_init(4, 16, RTT_MR_ALMIEN);     
  401c64:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401c68:	2010      	movs	r0, #16
  401c6a:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  401c6e:	4b3b      	ldr	r3, [pc, #236]	; (401d5c <main+0x13c>)
  401c70:	4798      	blx	r3
	
	/** Configura RTC */
	calendar rtc_initial = {2018, 3, 19, 12, 15, 45 ,1};
  401c72:	ac0e      	add	r4, sp, #56	; 0x38
  401c74:	4d3a      	ldr	r5, [pc, #232]	; (401d60 <main+0x140>)
  401c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401c7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401c7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_ALREN);
  401c82:	4e38      	ldr	r6, [pc, #224]	; (401d64 <main+0x144>)
  401c84:	2702      	movs	r7, #2
  401c86:	9705      	str	r7, [sp, #20]
  401c88:	466c      	mov	r4, sp
  401c8a:	ad10      	add	r5, sp, #64	; 0x40
  401c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401c90:	682b      	ldr	r3, [r5, #0]
  401c92:	6023      	str	r3, [r4, #0]
  401c94:	ab0e      	add	r3, sp, #56	; 0x38
  401c96:	cb0c      	ldmia	r3, {r2, r3}
  401c98:	4639      	mov	r1, r7
  401c9a:	4630      	mov	r0, r6
  401c9c:	4c32      	ldr	r4, [pc, #200]	; (401d68 <main+0x148>)
  401c9e:	47a0      	blx	r4
	
    /* Leitura do valor atual do RTC */
    uint32_t current_hour, current_min, current_sec;
    uint32_t current_year, current_month, current_day, current_week;
    rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  401ca0:	ab0b      	add	r3, sp, #44	; 0x2c
  401ca2:	aa0c      	add	r2, sp, #48	; 0x30
  401ca4:	a90d      	add	r1, sp, #52	; 0x34
  401ca6:	4630      	mov	r0, r6
  401ca8:	4c30      	ldr	r4, [pc, #192]	; (401d6c <main+0x14c>)
  401caa:	47a0      	blx	r4
    rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  401cac:	ab07      	add	r3, sp, #28
  401cae:	9300      	str	r3, [sp, #0]
  401cb0:	ab08      	add	r3, sp, #32
  401cb2:	aa09      	add	r2, sp, #36	; 0x24
  401cb4:	a90a      	add	r1, sp, #40	; 0x28
  401cb6:	4630      	mov	r0, r6
  401cb8:	4c2d      	ldr	r4, [pc, #180]	; (401d70 <main+0x150>)
  401cba:	47a0      	blx	r4
    
    /* configura alarme do RTC para daqui 20 segundos */
    rtc_set_date_alarm(RTC, 1, current_month, 1, current_day);
  401cbc:	9b08      	ldr	r3, [sp, #32]
  401cbe:	9300      	str	r3, [sp, #0]
  401cc0:	2301      	movs	r3, #1
  401cc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  401cc4:	4619      	mov	r1, r3
  401cc6:	4630      	mov	r0, r6
  401cc8:	4c2a      	ldr	r4, [pc, #168]	; (401d74 <main+0x154>)
  401cca:	47a0      	blx	r4
    rtc_set_time_alarm(RTC, 1, current_hour, 1, current_min, 1, current_sec + 5);
  401ccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401cce:	3305      	adds	r3, #5
  401cd0:	9302      	str	r3, [sp, #8]
  401cd2:	2101      	movs	r1, #1
  401cd4:	9101      	str	r1, [sp, #4]
  401cd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401cd8:	9300      	str	r3, [sp, #0]
  401cda:	460b      	mov	r3, r1
  401cdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401cde:	4630      	mov	r0, r6
  401ce0:	4c25      	ldr	r4, [pc, #148]	; (401d78 <main+0x158>)
  401ce2:	47a0      	blx	r4

	while (1) {
      if(flag_rtc_alarm){
  401ce4:	4e25      	ldr	r6, [pc, #148]	; (401d7c <main+0x15c>)
	      pisca_led(5, 200);
  401ce6:	4f26      	ldr	r7, [pc, #152]	; (401d80 <main+0x160>)
	      flag_rtc_alarm = 0;
      }
			rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  401ce8:	4c1e      	ldr	r4, [pc, #120]	; (401d64 <main+0x144>)
  401cea:	e01e      	b.n	401d2a <main+0x10a>
  401cec:	ab07      	add	r3, sp, #28
  401cee:	9300      	str	r3, [sp, #0]
  401cf0:	ab08      	add	r3, sp, #32
  401cf2:	aa09      	add	r2, sp, #36	; 0x24
  401cf4:	a90a      	add	r1, sp, #40	; 0x28
  401cf6:	4620      	mov	r0, r4
  401cf8:	4d1d      	ldr	r5, [pc, #116]	; (401d70 <main+0x150>)
  401cfa:	47a8      	blx	r5
			rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  401cfc:	ab0b      	add	r3, sp, #44	; 0x2c
  401cfe:	aa0c      	add	r2, sp, #48	; 0x30
  401d00:	a90d      	add	r1, sp, #52	; 0x34
  401d02:	4620      	mov	r0, r4
  401d04:	4d19      	ldr	r5, [pc, #100]	; (401d6c <main+0x14c>)
  401d06:	47a8      	blx	r5
			sprintf(str, "%02d:%02d:%02d", current_hour, current_min, current_sec);
  401d08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401d0a:	9300      	str	r3, [sp, #0]
  401d0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401d0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401d10:	491c      	ldr	r1, [pc, #112]	; (401d84 <main+0x164>)
  401d12:	a815      	add	r0, sp, #84	; 0x54
  401d14:	4d1c      	ldr	r5, [pc, #112]	; (401d88 <main+0x168>)
  401d16:	47a8      	blx	r5
			gfx_mono_draw_string(str, 0, 0, &sysfont);
  401d18:	4b1c      	ldr	r3, [pc, #112]	; (401d8c <main+0x16c>)
  401d1a:	2200      	movs	r2, #0
  401d1c:	4611      	mov	r1, r2
  401d1e:	a815      	add	r0, sp, #84	; 0x54
  401d20:	4d1b      	ldr	r5, [pc, #108]	; (401d90 <main+0x170>)
  401d22:	47a8      	blx	r5
            pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  401d24:	2002      	movs	r0, #2
  401d26:	4b1b      	ldr	r3, [pc, #108]	; (401d94 <main+0x174>)
  401d28:	4798      	blx	r3
      if(flag_rtc_alarm){
  401d2a:	7833      	ldrb	r3, [r6, #0]
  401d2c:	2b00      	cmp	r3, #0
  401d2e:	d0dd      	beq.n	401cec <main+0xcc>
	      pisca_led(5, 200);
  401d30:	21c8      	movs	r1, #200	; 0xc8
  401d32:	2005      	movs	r0, #5
  401d34:	47b8      	blx	r7
	      flag_rtc_alarm = 0;
  401d36:	2300      	movs	r3, #0
  401d38:	7033      	strb	r3, [r6, #0]
  401d3a:	e7d7      	b.n	401cec <main+0xcc>
  401d3c:	00400d29 	.word	0x00400d29
  401d40:	00400d99 	.word	0x00400d99
  401d44:	00400a09 	.word	0x00400a09
  401d48:	400e1850 	.word	0x400e1850
  401d4c:	0040198d 	.word	0x0040198d
  401d50:	4000c000 	.word	0x4000c000
  401d54:	00401ad5 	.word	0x00401ad5
  401d58:	00400701 	.word	0x00400701
  401d5c:	004017fd 	.word	0x004017fd
  401d60:	004070ec 	.word	0x004070ec
  401d64:	400e1860 	.word	0x400e1860
  401d68:	00401b7d 	.word	0x00401b7d
  401d6c:	004001c7 	.word	0x004001c7
  401d70:	00400345 	.word	0x00400345
  401d74:	00400471 	.word	0x00400471
  401d78:	004002b1 	.word	0x004002b1
  401d7c:	20400c70 	.word	0x20400c70
  401d80:	00401905 	.word	0x00401905
  401d84:	00407108 	.word	0x00407108
  401d88:	00402195 	.word	0x00402195
  401d8c:	2040000c 	.word	0x2040000c
  401d90:	00400971 	.word	0x00400971
  401d94:	004012ed 	.word	0x004012ed

00401d98 <__aeabi_uldivmod>:
  401d98:	b953      	cbnz	r3, 401db0 <__aeabi_uldivmod+0x18>
  401d9a:	b94a      	cbnz	r2, 401db0 <__aeabi_uldivmod+0x18>
  401d9c:	2900      	cmp	r1, #0
  401d9e:	bf08      	it	eq
  401da0:	2800      	cmpeq	r0, #0
  401da2:	bf1c      	itt	ne
  401da4:	f04f 31ff 	movne.w	r1, #4294967295
  401da8:	f04f 30ff 	movne.w	r0, #4294967295
  401dac:	f000 b97a 	b.w	4020a4 <__aeabi_idiv0>
  401db0:	f1ad 0c08 	sub.w	ip, sp, #8
  401db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401db8:	f000 f806 	bl	401dc8 <__udivmoddi4>
  401dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
  401dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401dc4:	b004      	add	sp, #16
  401dc6:	4770      	bx	lr

00401dc8 <__udivmoddi4>:
  401dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401dcc:	468c      	mov	ip, r1
  401dce:	460d      	mov	r5, r1
  401dd0:	4604      	mov	r4, r0
  401dd2:	9e08      	ldr	r6, [sp, #32]
  401dd4:	2b00      	cmp	r3, #0
  401dd6:	d151      	bne.n	401e7c <__udivmoddi4+0xb4>
  401dd8:	428a      	cmp	r2, r1
  401dda:	4617      	mov	r7, r2
  401ddc:	d96d      	bls.n	401eba <__udivmoddi4+0xf2>
  401dde:	fab2 fe82 	clz	lr, r2
  401de2:	f1be 0f00 	cmp.w	lr, #0
  401de6:	d00b      	beq.n	401e00 <__udivmoddi4+0x38>
  401de8:	f1ce 0c20 	rsb	ip, lr, #32
  401dec:	fa01 f50e 	lsl.w	r5, r1, lr
  401df0:	fa20 fc0c 	lsr.w	ip, r0, ip
  401df4:	fa02 f70e 	lsl.w	r7, r2, lr
  401df8:	ea4c 0c05 	orr.w	ip, ip, r5
  401dfc:	fa00 f40e 	lsl.w	r4, r0, lr
  401e00:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  401e04:	0c25      	lsrs	r5, r4, #16
  401e06:	fbbc f8fa 	udiv	r8, ip, sl
  401e0a:	fa1f f987 	uxth.w	r9, r7
  401e0e:	fb0a cc18 	mls	ip, sl, r8, ip
  401e12:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  401e16:	fb08 f309 	mul.w	r3, r8, r9
  401e1a:	42ab      	cmp	r3, r5
  401e1c:	d90a      	bls.n	401e34 <__udivmoddi4+0x6c>
  401e1e:	19ed      	adds	r5, r5, r7
  401e20:	f108 32ff 	add.w	r2, r8, #4294967295
  401e24:	f080 8123 	bcs.w	40206e <__udivmoddi4+0x2a6>
  401e28:	42ab      	cmp	r3, r5
  401e2a:	f240 8120 	bls.w	40206e <__udivmoddi4+0x2a6>
  401e2e:	f1a8 0802 	sub.w	r8, r8, #2
  401e32:	443d      	add	r5, r7
  401e34:	1aed      	subs	r5, r5, r3
  401e36:	b2a4      	uxth	r4, r4
  401e38:	fbb5 f0fa 	udiv	r0, r5, sl
  401e3c:	fb0a 5510 	mls	r5, sl, r0, r5
  401e40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401e44:	fb00 f909 	mul.w	r9, r0, r9
  401e48:	45a1      	cmp	r9, r4
  401e4a:	d909      	bls.n	401e60 <__udivmoddi4+0x98>
  401e4c:	19e4      	adds	r4, r4, r7
  401e4e:	f100 33ff 	add.w	r3, r0, #4294967295
  401e52:	f080 810a 	bcs.w	40206a <__udivmoddi4+0x2a2>
  401e56:	45a1      	cmp	r9, r4
  401e58:	f240 8107 	bls.w	40206a <__udivmoddi4+0x2a2>
  401e5c:	3802      	subs	r0, #2
  401e5e:	443c      	add	r4, r7
  401e60:	eba4 0409 	sub.w	r4, r4, r9
  401e64:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401e68:	2100      	movs	r1, #0
  401e6a:	2e00      	cmp	r6, #0
  401e6c:	d061      	beq.n	401f32 <__udivmoddi4+0x16a>
  401e6e:	fa24 f40e 	lsr.w	r4, r4, lr
  401e72:	2300      	movs	r3, #0
  401e74:	6034      	str	r4, [r6, #0]
  401e76:	6073      	str	r3, [r6, #4]
  401e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401e7c:	428b      	cmp	r3, r1
  401e7e:	d907      	bls.n	401e90 <__udivmoddi4+0xc8>
  401e80:	2e00      	cmp	r6, #0
  401e82:	d054      	beq.n	401f2e <__udivmoddi4+0x166>
  401e84:	2100      	movs	r1, #0
  401e86:	e886 0021 	stmia.w	r6, {r0, r5}
  401e8a:	4608      	mov	r0, r1
  401e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401e90:	fab3 f183 	clz	r1, r3
  401e94:	2900      	cmp	r1, #0
  401e96:	f040 808e 	bne.w	401fb6 <__udivmoddi4+0x1ee>
  401e9a:	42ab      	cmp	r3, r5
  401e9c:	d302      	bcc.n	401ea4 <__udivmoddi4+0xdc>
  401e9e:	4282      	cmp	r2, r0
  401ea0:	f200 80fa 	bhi.w	402098 <__udivmoddi4+0x2d0>
  401ea4:	1a84      	subs	r4, r0, r2
  401ea6:	eb65 0503 	sbc.w	r5, r5, r3
  401eaa:	2001      	movs	r0, #1
  401eac:	46ac      	mov	ip, r5
  401eae:	2e00      	cmp	r6, #0
  401eb0:	d03f      	beq.n	401f32 <__udivmoddi4+0x16a>
  401eb2:	e886 1010 	stmia.w	r6, {r4, ip}
  401eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401eba:	b912      	cbnz	r2, 401ec2 <__udivmoddi4+0xfa>
  401ebc:	2701      	movs	r7, #1
  401ebe:	fbb7 f7f2 	udiv	r7, r7, r2
  401ec2:	fab7 fe87 	clz	lr, r7
  401ec6:	f1be 0f00 	cmp.w	lr, #0
  401eca:	d134      	bne.n	401f36 <__udivmoddi4+0x16e>
  401ecc:	1beb      	subs	r3, r5, r7
  401ece:	0c3a      	lsrs	r2, r7, #16
  401ed0:	fa1f fc87 	uxth.w	ip, r7
  401ed4:	2101      	movs	r1, #1
  401ed6:	fbb3 f8f2 	udiv	r8, r3, r2
  401eda:	0c25      	lsrs	r5, r4, #16
  401edc:	fb02 3318 	mls	r3, r2, r8, r3
  401ee0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401ee4:	fb0c f308 	mul.w	r3, ip, r8
  401ee8:	42ab      	cmp	r3, r5
  401eea:	d907      	bls.n	401efc <__udivmoddi4+0x134>
  401eec:	19ed      	adds	r5, r5, r7
  401eee:	f108 30ff 	add.w	r0, r8, #4294967295
  401ef2:	d202      	bcs.n	401efa <__udivmoddi4+0x132>
  401ef4:	42ab      	cmp	r3, r5
  401ef6:	f200 80d1 	bhi.w	40209c <__udivmoddi4+0x2d4>
  401efa:	4680      	mov	r8, r0
  401efc:	1aed      	subs	r5, r5, r3
  401efe:	b2a3      	uxth	r3, r4
  401f00:	fbb5 f0f2 	udiv	r0, r5, r2
  401f04:	fb02 5510 	mls	r5, r2, r0, r5
  401f08:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  401f0c:	fb0c fc00 	mul.w	ip, ip, r0
  401f10:	45a4      	cmp	ip, r4
  401f12:	d907      	bls.n	401f24 <__udivmoddi4+0x15c>
  401f14:	19e4      	adds	r4, r4, r7
  401f16:	f100 33ff 	add.w	r3, r0, #4294967295
  401f1a:	d202      	bcs.n	401f22 <__udivmoddi4+0x15a>
  401f1c:	45a4      	cmp	ip, r4
  401f1e:	f200 80b8 	bhi.w	402092 <__udivmoddi4+0x2ca>
  401f22:	4618      	mov	r0, r3
  401f24:	eba4 040c 	sub.w	r4, r4, ip
  401f28:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401f2c:	e79d      	b.n	401e6a <__udivmoddi4+0xa2>
  401f2e:	4631      	mov	r1, r6
  401f30:	4630      	mov	r0, r6
  401f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401f36:	f1ce 0420 	rsb	r4, lr, #32
  401f3a:	fa05 f30e 	lsl.w	r3, r5, lr
  401f3e:	fa07 f70e 	lsl.w	r7, r7, lr
  401f42:	fa20 f804 	lsr.w	r8, r0, r4
  401f46:	0c3a      	lsrs	r2, r7, #16
  401f48:	fa25 f404 	lsr.w	r4, r5, r4
  401f4c:	ea48 0803 	orr.w	r8, r8, r3
  401f50:	fbb4 f1f2 	udiv	r1, r4, r2
  401f54:	ea4f 4518 	mov.w	r5, r8, lsr #16
  401f58:	fb02 4411 	mls	r4, r2, r1, r4
  401f5c:	fa1f fc87 	uxth.w	ip, r7
  401f60:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  401f64:	fb01 f30c 	mul.w	r3, r1, ip
  401f68:	42ab      	cmp	r3, r5
  401f6a:	fa00 f40e 	lsl.w	r4, r0, lr
  401f6e:	d909      	bls.n	401f84 <__udivmoddi4+0x1bc>
  401f70:	19ed      	adds	r5, r5, r7
  401f72:	f101 30ff 	add.w	r0, r1, #4294967295
  401f76:	f080 808a 	bcs.w	40208e <__udivmoddi4+0x2c6>
  401f7a:	42ab      	cmp	r3, r5
  401f7c:	f240 8087 	bls.w	40208e <__udivmoddi4+0x2c6>
  401f80:	3902      	subs	r1, #2
  401f82:	443d      	add	r5, r7
  401f84:	1aeb      	subs	r3, r5, r3
  401f86:	fa1f f588 	uxth.w	r5, r8
  401f8a:	fbb3 f0f2 	udiv	r0, r3, r2
  401f8e:	fb02 3310 	mls	r3, r2, r0, r3
  401f92:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401f96:	fb00 f30c 	mul.w	r3, r0, ip
  401f9a:	42ab      	cmp	r3, r5
  401f9c:	d907      	bls.n	401fae <__udivmoddi4+0x1e6>
  401f9e:	19ed      	adds	r5, r5, r7
  401fa0:	f100 38ff 	add.w	r8, r0, #4294967295
  401fa4:	d26f      	bcs.n	402086 <__udivmoddi4+0x2be>
  401fa6:	42ab      	cmp	r3, r5
  401fa8:	d96d      	bls.n	402086 <__udivmoddi4+0x2be>
  401faa:	3802      	subs	r0, #2
  401fac:	443d      	add	r5, r7
  401fae:	1aeb      	subs	r3, r5, r3
  401fb0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  401fb4:	e78f      	b.n	401ed6 <__udivmoddi4+0x10e>
  401fb6:	f1c1 0720 	rsb	r7, r1, #32
  401fba:	fa22 f807 	lsr.w	r8, r2, r7
  401fbe:	408b      	lsls	r3, r1
  401fc0:	fa05 f401 	lsl.w	r4, r5, r1
  401fc4:	ea48 0303 	orr.w	r3, r8, r3
  401fc8:	fa20 fe07 	lsr.w	lr, r0, r7
  401fcc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401fd0:	40fd      	lsrs	r5, r7
  401fd2:	ea4e 0e04 	orr.w	lr, lr, r4
  401fd6:	fbb5 f9fc 	udiv	r9, r5, ip
  401fda:	ea4f 441e 	mov.w	r4, lr, lsr #16
  401fde:	fb0c 5519 	mls	r5, ip, r9, r5
  401fe2:	fa1f f883 	uxth.w	r8, r3
  401fe6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  401fea:	fb09 f408 	mul.w	r4, r9, r8
  401fee:	42ac      	cmp	r4, r5
  401ff0:	fa02 f201 	lsl.w	r2, r2, r1
  401ff4:	fa00 fa01 	lsl.w	sl, r0, r1
  401ff8:	d908      	bls.n	40200c <__udivmoddi4+0x244>
  401ffa:	18ed      	adds	r5, r5, r3
  401ffc:	f109 30ff 	add.w	r0, r9, #4294967295
  402000:	d243      	bcs.n	40208a <__udivmoddi4+0x2c2>
  402002:	42ac      	cmp	r4, r5
  402004:	d941      	bls.n	40208a <__udivmoddi4+0x2c2>
  402006:	f1a9 0902 	sub.w	r9, r9, #2
  40200a:	441d      	add	r5, r3
  40200c:	1b2d      	subs	r5, r5, r4
  40200e:	fa1f fe8e 	uxth.w	lr, lr
  402012:	fbb5 f0fc 	udiv	r0, r5, ip
  402016:	fb0c 5510 	mls	r5, ip, r0, r5
  40201a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40201e:	fb00 f808 	mul.w	r8, r0, r8
  402022:	45a0      	cmp	r8, r4
  402024:	d907      	bls.n	402036 <__udivmoddi4+0x26e>
  402026:	18e4      	adds	r4, r4, r3
  402028:	f100 35ff 	add.w	r5, r0, #4294967295
  40202c:	d229      	bcs.n	402082 <__udivmoddi4+0x2ba>
  40202e:	45a0      	cmp	r8, r4
  402030:	d927      	bls.n	402082 <__udivmoddi4+0x2ba>
  402032:	3802      	subs	r0, #2
  402034:	441c      	add	r4, r3
  402036:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40203a:	eba4 0408 	sub.w	r4, r4, r8
  40203e:	fba0 8902 	umull	r8, r9, r0, r2
  402042:	454c      	cmp	r4, r9
  402044:	46c6      	mov	lr, r8
  402046:	464d      	mov	r5, r9
  402048:	d315      	bcc.n	402076 <__udivmoddi4+0x2ae>
  40204a:	d012      	beq.n	402072 <__udivmoddi4+0x2aa>
  40204c:	b156      	cbz	r6, 402064 <__udivmoddi4+0x29c>
  40204e:	ebba 030e 	subs.w	r3, sl, lr
  402052:	eb64 0405 	sbc.w	r4, r4, r5
  402056:	fa04 f707 	lsl.w	r7, r4, r7
  40205a:	40cb      	lsrs	r3, r1
  40205c:	431f      	orrs	r7, r3
  40205e:	40cc      	lsrs	r4, r1
  402060:	6037      	str	r7, [r6, #0]
  402062:	6074      	str	r4, [r6, #4]
  402064:	2100      	movs	r1, #0
  402066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40206a:	4618      	mov	r0, r3
  40206c:	e6f8      	b.n	401e60 <__udivmoddi4+0x98>
  40206e:	4690      	mov	r8, r2
  402070:	e6e0      	b.n	401e34 <__udivmoddi4+0x6c>
  402072:	45c2      	cmp	sl, r8
  402074:	d2ea      	bcs.n	40204c <__udivmoddi4+0x284>
  402076:	ebb8 0e02 	subs.w	lr, r8, r2
  40207a:	eb69 0503 	sbc.w	r5, r9, r3
  40207e:	3801      	subs	r0, #1
  402080:	e7e4      	b.n	40204c <__udivmoddi4+0x284>
  402082:	4628      	mov	r0, r5
  402084:	e7d7      	b.n	402036 <__udivmoddi4+0x26e>
  402086:	4640      	mov	r0, r8
  402088:	e791      	b.n	401fae <__udivmoddi4+0x1e6>
  40208a:	4681      	mov	r9, r0
  40208c:	e7be      	b.n	40200c <__udivmoddi4+0x244>
  40208e:	4601      	mov	r1, r0
  402090:	e778      	b.n	401f84 <__udivmoddi4+0x1bc>
  402092:	3802      	subs	r0, #2
  402094:	443c      	add	r4, r7
  402096:	e745      	b.n	401f24 <__udivmoddi4+0x15c>
  402098:	4608      	mov	r0, r1
  40209a:	e708      	b.n	401eae <__udivmoddi4+0xe6>
  40209c:	f1a8 0802 	sub.w	r8, r8, #2
  4020a0:	443d      	add	r5, r7
  4020a2:	e72b      	b.n	401efc <__udivmoddi4+0x134>

004020a4 <__aeabi_idiv0>:
  4020a4:	4770      	bx	lr
  4020a6:	bf00      	nop

004020a8 <__libc_init_array>:
  4020a8:	b570      	push	{r4, r5, r6, lr}
  4020aa:	4e0f      	ldr	r6, [pc, #60]	; (4020e8 <__libc_init_array+0x40>)
  4020ac:	4d0f      	ldr	r5, [pc, #60]	; (4020ec <__libc_init_array+0x44>)
  4020ae:	1b76      	subs	r6, r6, r5
  4020b0:	10b6      	asrs	r6, r6, #2
  4020b2:	bf18      	it	ne
  4020b4:	2400      	movne	r4, #0
  4020b6:	d005      	beq.n	4020c4 <__libc_init_array+0x1c>
  4020b8:	3401      	adds	r4, #1
  4020ba:	f855 3b04 	ldr.w	r3, [r5], #4
  4020be:	4798      	blx	r3
  4020c0:	42a6      	cmp	r6, r4
  4020c2:	d1f9      	bne.n	4020b8 <__libc_init_array+0x10>
  4020c4:	4e0a      	ldr	r6, [pc, #40]	; (4020f0 <__libc_init_array+0x48>)
  4020c6:	4d0b      	ldr	r5, [pc, #44]	; (4020f4 <__libc_init_array+0x4c>)
  4020c8:	1b76      	subs	r6, r6, r5
  4020ca:	f005 f969 	bl	4073a0 <_init>
  4020ce:	10b6      	asrs	r6, r6, #2
  4020d0:	bf18      	it	ne
  4020d2:	2400      	movne	r4, #0
  4020d4:	d006      	beq.n	4020e4 <__libc_init_array+0x3c>
  4020d6:	3401      	adds	r4, #1
  4020d8:	f855 3b04 	ldr.w	r3, [r5], #4
  4020dc:	4798      	blx	r3
  4020de:	42a6      	cmp	r6, r4
  4020e0:	d1f9      	bne.n	4020d6 <__libc_init_array+0x2e>
  4020e2:	bd70      	pop	{r4, r5, r6, pc}
  4020e4:	bd70      	pop	{r4, r5, r6, pc}
  4020e6:	bf00      	nop
  4020e8:	004073ac 	.word	0x004073ac
  4020ec:	004073ac 	.word	0x004073ac
  4020f0:	004073b4 	.word	0x004073b4
  4020f4:	004073ac 	.word	0x004073ac

004020f8 <memset>:
  4020f8:	b470      	push	{r4, r5, r6}
  4020fa:	0786      	lsls	r6, r0, #30
  4020fc:	d046      	beq.n	40218c <memset+0x94>
  4020fe:	1e54      	subs	r4, r2, #1
  402100:	2a00      	cmp	r2, #0
  402102:	d041      	beq.n	402188 <memset+0x90>
  402104:	b2ca      	uxtb	r2, r1
  402106:	4603      	mov	r3, r0
  402108:	e002      	b.n	402110 <memset+0x18>
  40210a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40210e:	d33b      	bcc.n	402188 <memset+0x90>
  402110:	f803 2b01 	strb.w	r2, [r3], #1
  402114:	079d      	lsls	r5, r3, #30
  402116:	d1f8      	bne.n	40210a <memset+0x12>
  402118:	2c03      	cmp	r4, #3
  40211a:	d92e      	bls.n	40217a <memset+0x82>
  40211c:	b2cd      	uxtb	r5, r1
  40211e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402122:	2c0f      	cmp	r4, #15
  402124:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402128:	d919      	bls.n	40215e <memset+0x66>
  40212a:	f103 0210 	add.w	r2, r3, #16
  40212e:	4626      	mov	r6, r4
  402130:	3e10      	subs	r6, #16
  402132:	2e0f      	cmp	r6, #15
  402134:	f842 5c10 	str.w	r5, [r2, #-16]
  402138:	f842 5c0c 	str.w	r5, [r2, #-12]
  40213c:	f842 5c08 	str.w	r5, [r2, #-8]
  402140:	f842 5c04 	str.w	r5, [r2, #-4]
  402144:	f102 0210 	add.w	r2, r2, #16
  402148:	d8f2      	bhi.n	402130 <memset+0x38>
  40214a:	f1a4 0210 	sub.w	r2, r4, #16
  40214e:	f022 020f 	bic.w	r2, r2, #15
  402152:	f004 040f 	and.w	r4, r4, #15
  402156:	3210      	adds	r2, #16
  402158:	2c03      	cmp	r4, #3
  40215a:	4413      	add	r3, r2
  40215c:	d90d      	bls.n	40217a <memset+0x82>
  40215e:	461e      	mov	r6, r3
  402160:	4622      	mov	r2, r4
  402162:	3a04      	subs	r2, #4
  402164:	2a03      	cmp	r2, #3
  402166:	f846 5b04 	str.w	r5, [r6], #4
  40216a:	d8fa      	bhi.n	402162 <memset+0x6a>
  40216c:	1f22      	subs	r2, r4, #4
  40216e:	f022 0203 	bic.w	r2, r2, #3
  402172:	3204      	adds	r2, #4
  402174:	4413      	add	r3, r2
  402176:	f004 0403 	and.w	r4, r4, #3
  40217a:	b12c      	cbz	r4, 402188 <memset+0x90>
  40217c:	b2c9      	uxtb	r1, r1
  40217e:	441c      	add	r4, r3
  402180:	f803 1b01 	strb.w	r1, [r3], #1
  402184:	429c      	cmp	r4, r3
  402186:	d1fb      	bne.n	402180 <memset+0x88>
  402188:	bc70      	pop	{r4, r5, r6}
  40218a:	4770      	bx	lr
  40218c:	4614      	mov	r4, r2
  40218e:	4603      	mov	r3, r0
  402190:	e7c2      	b.n	402118 <memset+0x20>
  402192:	bf00      	nop

00402194 <sprintf>:
  402194:	b40e      	push	{r1, r2, r3}
  402196:	b5f0      	push	{r4, r5, r6, r7, lr}
  402198:	b09c      	sub	sp, #112	; 0x70
  40219a:	ab21      	add	r3, sp, #132	; 0x84
  40219c:	490f      	ldr	r1, [pc, #60]	; (4021dc <sprintf+0x48>)
  40219e:	f853 2b04 	ldr.w	r2, [r3], #4
  4021a2:	9301      	str	r3, [sp, #4]
  4021a4:	4605      	mov	r5, r0
  4021a6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4021aa:	6808      	ldr	r0, [r1, #0]
  4021ac:	9502      	str	r5, [sp, #8]
  4021ae:	f44f 7702 	mov.w	r7, #520	; 0x208
  4021b2:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4021b6:	a902      	add	r1, sp, #8
  4021b8:	9506      	str	r5, [sp, #24]
  4021ba:	f8ad 7014 	strh.w	r7, [sp, #20]
  4021be:	9404      	str	r4, [sp, #16]
  4021c0:	9407      	str	r4, [sp, #28]
  4021c2:	f8ad 6016 	strh.w	r6, [sp, #22]
  4021c6:	f000 f80b 	bl	4021e0 <_svfprintf_r>
  4021ca:	9b02      	ldr	r3, [sp, #8]
  4021cc:	2200      	movs	r2, #0
  4021ce:	701a      	strb	r2, [r3, #0]
  4021d0:	b01c      	add	sp, #112	; 0x70
  4021d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4021d6:	b003      	add	sp, #12
  4021d8:	4770      	bx	lr
  4021da:	bf00      	nop
  4021dc:	20400020 	.word	0x20400020

004021e0 <_svfprintf_r>:
  4021e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4021e4:	b0c3      	sub	sp, #268	; 0x10c
  4021e6:	460c      	mov	r4, r1
  4021e8:	910b      	str	r1, [sp, #44]	; 0x2c
  4021ea:	4692      	mov	sl, r2
  4021ec:	930f      	str	r3, [sp, #60]	; 0x3c
  4021ee:	900c      	str	r0, [sp, #48]	; 0x30
  4021f0:	f002 fa0e 	bl	404610 <_localeconv_r>
  4021f4:	6803      	ldr	r3, [r0, #0]
  4021f6:	931a      	str	r3, [sp, #104]	; 0x68
  4021f8:	4618      	mov	r0, r3
  4021fa:	f003 f8e1 	bl	4053c0 <strlen>
  4021fe:	89a3      	ldrh	r3, [r4, #12]
  402200:	9019      	str	r0, [sp, #100]	; 0x64
  402202:	0619      	lsls	r1, r3, #24
  402204:	d503      	bpl.n	40220e <_svfprintf_r+0x2e>
  402206:	6923      	ldr	r3, [r4, #16]
  402208:	2b00      	cmp	r3, #0
  40220a:	f001 8003 	beq.w	403214 <_svfprintf_r+0x1034>
  40220e:	2300      	movs	r3, #0
  402210:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  402214:	9313      	str	r3, [sp, #76]	; 0x4c
  402216:	9315      	str	r3, [sp, #84]	; 0x54
  402218:	9314      	str	r3, [sp, #80]	; 0x50
  40221a:	9327      	str	r3, [sp, #156]	; 0x9c
  40221c:	9326      	str	r3, [sp, #152]	; 0x98
  40221e:	9318      	str	r3, [sp, #96]	; 0x60
  402220:	931b      	str	r3, [sp, #108]	; 0x6c
  402222:	9309      	str	r3, [sp, #36]	; 0x24
  402224:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  402228:	46c8      	mov	r8, r9
  40222a:	9316      	str	r3, [sp, #88]	; 0x58
  40222c:	9317      	str	r3, [sp, #92]	; 0x5c
  40222e:	f89a 3000 	ldrb.w	r3, [sl]
  402232:	4654      	mov	r4, sl
  402234:	b1e3      	cbz	r3, 402270 <_svfprintf_r+0x90>
  402236:	2b25      	cmp	r3, #37	; 0x25
  402238:	d102      	bne.n	402240 <_svfprintf_r+0x60>
  40223a:	e019      	b.n	402270 <_svfprintf_r+0x90>
  40223c:	2b25      	cmp	r3, #37	; 0x25
  40223e:	d003      	beq.n	402248 <_svfprintf_r+0x68>
  402240:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402244:	2b00      	cmp	r3, #0
  402246:	d1f9      	bne.n	40223c <_svfprintf_r+0x5c>
  402248:	eba4 050a 	sub.w	r5, r4, sl
  40224c:	b185      	cbz	r5, 402270 <_svfprintf_r+0x90>
  40224e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402250:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402252:	f8c8 a000 	str.w	sl, [r8]
  402256:	3301      	adds	r3, #1
  402258:	442a      	add	r2, r5
  40225a:	2b07      	cmp	r3, #7
  40225c:	f8c8 5004 	str.w	r5, [r8, #4]
  402260:	9227      	str	r2, [sp, #156]	; 0x9c
  402262:	9326      	str	r3, [sp, #152]	; 0x98
  402264:	dc7f      	bgt.n	402366 <_svfprintf_r+0x186>
  402266:	f108 0808 	add.w	r8, r8, #8
  40226a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40226c:	442b      	add	r3, r5
  40226e:	9309      	str	r3, [sp, #36]	; 0x24
  402270:	7823      	ldrb	r3, [r4, #0]
  402272:	2b00      	cmp	r3, #0
  402274:	d07f      	beq.n	402376 <_svfprintf_r+0x196>
  402276:	2300      	movs	r3, #0
  402278:	461a      	mov	r2, r3
  40227a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40227e:	4619      	mov	r1, r3
  402280:	930d      	str	r3, [sp, #52]	; 0x34
  402282:	469b      	mov	fp, r3
  402284:	f04f 30ff 	mov.w	r0, #4294967295
  402288:	7863      	ldrb	r3, [r4, #1]
  40228a:	900a      	str	r0, [sp, #40]	; 0x28
  40228c:	f104 0a01 	add.w	sl, r4, #1
  402290:	f10a 0a01 	add.w	sl, sl, #1
  402294:	f1a3 0020 	sub.w	r0, r3, #32
  402298:	2858      	cmp	r0, #88	; 0x58
  40229a:	f200 83c1 	bhi.w	402a20 <_svfprintf_r+0x840>
  40229e:	e8df f010 	tbh	[pc, r0, lsl #1]
  4022a2:	0238      	.short	0x0238
  4022a4:	03bf03bf 	.word	0x03bf03bf
  4022a8:	03bf0240 	.word	0x03bf0240
  4022ac:	03bf03bf 	.word	0x03bf03bf
  4022b0:	03bf03bf 	.word	0x03bf03bf
  4022b4:	024503bf 	.word	0x024503bf
  4022b8:	03bf0203 	.word	0x03bf0203
  4022bc:	026b005d 	.word	0x026b005d
  4022c0:	028603bf 	.word	0x028603bf
  4022c4:	039d039d 	.word	0x039d039d
  4022c8:	039d039d 	.word	0x039d039d
  4022cc:	039d039d 	.word	0x039d039d
  4022d0:	039d039d 	.word	0x039d039d
  4022d4:	03bf039d 	.word	0x03bf039d
  4022d8:	03bf03bf 	.word	0x03bf03bf
  4022dc:	03bf03bf 	.word	0x03bf03bf
  4022e0:	03bf03bf 	.word	0x03bf03bf
  4022e4:	03bf03bf 	.word	0x03bf03bf
  4022e8:	033703bf 	.word	0x033703bf
  4022ec:	03bf0357 	.word	0x03bf0357
  4022f0:	03bf0357 	.word	0x03bf0357
  4022f4:	03bf03bf 	.word	0x03bf03bf
  4022f8:	039803bf 	.word	0x039803bf
  4022fc:	03bf03bf 	.word	0x03bf03bf
  402300:	03bf03ad 	.word	0x03bf03ad
  402304:	03bf03bf 	.word	0x03bf03bf
  402308:	03bf03bf 	.word	0x03bf03bf
  40230c:	03bf0259 	.word	0x03bf0259
  402310:	031e03bf 	.word	0x031e03bf
  402314:	03bf03bf 	.word	0x03bf03bf
  402318:	03bf03bf 	.word	0x03bf03bf
  40231c:	03bf03bf 	.word	0x03bf03bf
  402320:	03bf03bf 	.word	0x03bf03bf
  402324:	03bf03bf 	.word	0x03bf03bf
  402328:	02db02c6 	.word	0x02db02c6
  40232c:	03570357 	.word	0x03570357
  402330:	028b0357 	.word	0x028b0357
  402334:	03bf02db 	.word	0x03bf02db
  402338:	029003bf 	.word	0x029003bf
  40233c:	029d03bf 	.word	0x029d03bf
  402340:	02b401cc 	.word	0x02b401cc
  402344:	03bf0208 	.word	0x03bf0208
  402348:	03bf01e1 	.word	0x03bf01e1
  40234c:	03bf007e 	.word	0x03bf007e
  402350:	020d03bf 	.word	0x020d03bf
  402354:	980d      	ldr	r0, [sp, #52]	; 0x34
  402356:	930f      	str	r3, [sp, #60]	; 0x3c
  402358:	4240      	negs	r0, r0
  40235a:	900d      	str	r0, [sp, #52]	; 0x34
  40235c:	f04b 0b04 	orr.w	fp, fp, #4
  402360:	f89a 3000 	ldrb.w	r3, [sl]
  402364:	e794      	b.n	402290 <_svfprintf_r+0xb0>
  402366:	aa25      	add	r2, sp, #148	; 0x94
  402368:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40236a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40236c:	f003 f896 	bl	40549c <__ssprint_r>
  402370:	b940      	cbnz	r0, 402384 <_svfprintf_r+0x1a4>
  402372:	46c8      	mov	r8, r9
  402374:	e779      	b.n	40226a <_svfprintf_r+0x8a>
  402376:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402378:	b123      	cbz	r3, 402384 <_svfprintf_r+0x1a4>
  40237a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40237c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40237e:	aa25      	add	r2, sp, #148	; 0x94
  402380:	f003 f88c 	bl	40549c <__ssprint_r>
  402384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402386:	899b      	ldrh	r3, [r3, #12]
  402388:	f013 0f40 	tst.w	r3, #64	; 0x40
  40238c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40238e:	bf18      	it	ne
  402390:	f04f 33ff 	movne.w	r3, #4294967295
  402394:	9309      	str	r3, [sp, #36]	; 0x24
  402396:	9809      	ldr	r0, [sp, #36]	; 0x24
  402398:	b043      	add	sp, #268	; 0x10c
  40239a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40239e:	f01b 0f20 	tst.w	fp, #32
  4023a2:	9311      	str	r3, [sp, #68]	; 0x44
  4023a4:	f040 81dd 	bne.w	402762 <_svfprintf_r+0x582>
  4023a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4023aa:	f01b 0f10 	tst.w	fp, #16
  4023ae:	4613      	mov	r3, r2
  4023b0:	f040 856e 	bne.w	402e90 <_svfprintf_r+0xcb0>
  4023b4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4023b8:	f000 856a 	beq.w	402e90 <_svfprintf_r+0xcb0>
  4023bc:	8814      	ldrh	r4, [r2, #0]
  4023be:	3204      	adds	r2, #4
  4023c0:	2500      	movs	r5, #0
  4023c2:	2301      	movs	r3, #1
  4023c4:	920f      	str	r2, [sp, #60]	; 0x3c
  4023c6:	2700      	movs	r7, #0
  4023c8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4023cc:	990a      	ldr	r1, [sp, #40]	; 0x28
  4023ce:	1c4a      	adds	r2, r1, #1
  4023d0:	f000 8265 	beq.w	40289e <_svfprintf_r+0x6be>
  4023d4:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  4023d8:	9207      	str	r2, [sp, #28]
  4023da:	ea54 0205 	orrs.w	r2, r4, r5
  4023de:	f040 8264 	bne.w	4028aa <_svfprintf_r+0x6ca>
  4023e2:	2900      	cmp	r1, #0
  4023e4:	f040 843c 	bne.w	402c60 <_svfprintf_r+0xa80>
  4023e8:	2b00      	cmp	r3, #0
  4023ea:	f040 84d7 	bne.w	402d9c <_svfprintf_r+0xbbc>
  4023ee:	f01b 0301 	ands.w	r3, fp, #1
  4023f2:	930e      	str	r3, [sp, #56]	; 0x38
  4023f4:	f000 8604 	beq.w	403000 <_svfprintf_r+0xe20>
  4023f8:	ae42      	add	r6, sp, #264	; 0x108
  4023fa:	2330      	movs	r3, #48	; 0x30
  4023fc:	f806 3d41 	strb.w	r3, [r6, #-65]!
  402400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402402:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402404:	4293      	cmp	r3, r2
  402406:	bfb8      	it	lt
  402408:	4613      	movlt	r3, r2
  40240a:	9308      	str	r3, [sp, #32]
  40240c:	2300      	movs	r3, #0
  40240e:	9312      	str	r3, [sp, #72]	; 0x48
  402410:	b117      	cbz	r7, 402418 <_svfprintf_r+0x238>
  402412:	9b08      	ldr	r3, [sp, #32]
  402414:	3301      	adds	r3, #1
  402416:	9308      	str	r3, [sp, #32]
  402418:	9b07      	ldr	r3, [sp, #28]
  40241a:	f013 0302 	ands.w	r3, r3, #2
  40241e:	9310      	str	r3, [sp, #64]	; 0x40
  402420:	d002      	beq.n	402428 <_svfprintf_r+0x248>
  402422:	9b08      	ldr	r3, [sp, #32]
  402424:	3302      	adds	r3, #2
  402426:	9308      	str	r3, [sp, #32]
  402428:	9b07      	ldr	r3, [sp, #28]
  40242a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40242e:	f040 830e 	bne.w	402a4e <_svfprintf_r+0x86e>
  402432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402434:	9a08      	ldr	r2, [sp, #32]
  402436:	eba3 0b02 	sub.w	fp, r3, r2
  40243a:	f1bb 0f00 	cmp.w	fp, #0
  40243e:	f340 8306 	ble.w	402a4e <_svfprintf_r+0x86e>
  402442:	f1bb 0f10 	cmp.w	fp, #16
  402446:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402448:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40244a:	dd29      	ble.n	4024a0 <_svfprintf_r+0x2c0>
  40244c:	4643      	mov	r3, r8
  40244e:	4621      	mov	r1, r4
  402450:	46a8      	mov	r8, r5
  402452:	2710      	movs	r7, #16
  402454:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402456:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402458:	e006      	b.n	402468 <_svfprintf_r+0x288>
  40245a:	f1ab 0b10 	sub.w	fp, fp, #16
  40245e:	f1bb 0f10 	cmp.w	fp, #16
  402462:	f103 0308 	add.w	r3, r3, #8
  402466:	dd18      	ble.n	40249a <_svfprintf_r+0x2ba>
  402468:	3201      	adds	r2, #1
  40246a:	48b7      	ldr	r0, [pc, #732]	; (402748 <_svfprintf_r+0x568>)
  40246c:	9226      	str	r2, [sp, #152]	; 0x98
  40246e:	3110      	adds	r1, #16
  402470:	2a07      	cmp	r2, #7
  402472:	9127      	str	r1, [sp, #156]	; 0x9c
  402474:	e883 0081 	stmia.w	r3, {r0, r7}
  402478:	ddef      	ble.n	40245a <_svfprintf_r+0x27a>
  40247a:	aa25      	add	r2, sp, #148	; 0x94
  40247c:	4629      	mov	r1, r5
  40247e:	4620      	mov	r0, r4
  402480:	f003 f80c 	bl	40549c <__ssprint_r>
  402484:	2800      	cmp	r0, #0
  402486:	f47f af7d 	bne.w	402384 <_svfprintf_r+0x1a4>
  40248a:	f1ab 0b10 	sub.w	fp, fp, #16
  40248e:	f1bb 0f10 	cmp.w	fp, #16
  402492:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402494:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402496:	464b      	mov	r3, r9
  402498:	dce6      	bgt.n	402468 <_svfprintf_r+0x288>
  40249a:	4645      	mov	r5, r8
  40249c:	460c      	mov	r4, r1
  40249e:	4698      	mov	r8, r3
  4024a0:	3201      	adds	r2, #1
  4024a2:	4ba9      	ldr	r3, [pc, #676]	; (402748 <_svfprintf_r+0x568>)
  4024a4:	9226      	str	r2, [sp, #152]	; 0x98
  4024a6:	445c      	add	r4, fp
  4024a8:	2a07      	cmp	r2, #7
  4024aa:	9427      	str	r4, [sp, #156]	; 0x9c
  4024ac:	e888 0808 	stmia.w	r8, {r3, fp}
  4024b0:	f300 8498 	bgt.w	402de4 <_svfprintf_r+0xc04>
  4024b4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4024b8:	f108 0808 	add.w	r8, r8, #8
  4024bc:	b177      	cbz	r7, 4024dc <_svfprintf_r+0x2fc>
  4024be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4024c0:	3301      	adds	r3, #1
  4024c2:	3401      	adds	r4, #1
  4024c4:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  4024c8:	2201      	movs	r2, #1
  4024ca:	2b07      	cmp	r3, #7
  4024cc:	9427      	str	r4, [sp, #156]	; 0x9c
  4024ce:	9326      	str	r3, [sp, #152]	; 0x98
  4024d0:	e888 0006 	stmia.w	r8, {r1, r2}
  4024d4:	f300 83db 	bgt.w	402c8e <_svfprintf_r+0xaae>
  4024d8:	f108 0808 	add.w	r8, r8, #8
  4024dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4024de:	b16b      	cbz	r3, 4024fc <_svfprintf_r+0x31c>
  4024e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4024e2:	3301      	adds	r3, #1
  4024e4:	3402      	adds	r4, #2
  4024e6:	a91e      	add	r1, sp, #120	; 0x78
  4024e8:	2202      	movs	r2, #2
  4024ea:	2b07      	cmp	r3, #7
  4024ec:	9427      	str	r4, [sp, #156]	; 0x9c
  4024ee:	9326      	str	r3, [sp, #152]	; 0x98
  4024f0:	e888 0006 	stmia.w	r8, {r1, r2}
  4024f4:	f300 83d6 	bgt.w	402ca4 <_svfprintf_r+0xac4>
  4024f8:	f108 0808 	add.w	r8, r8, #8
  4024fc:	2d80      	cmp	r5, #128	; 0x80
  4024fe:	f000 8315 	beq.w	402b2c <_svfprintf_r+0x94c>
  402502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402504:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402506:	1a9f      	subs	r7, r3, r2
  402508:	2f00      	cmp	r7, #0
  40250a:	dd36      	ble.n	40257a <_svfprintf_r+0x39a>
  40250c:	2f10      	cmp	r7, #16
  40250e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402510:	4d8e      	ldr	r5, [pc, #568]	; (40274c <_svfprintf_r+0x56c>)
  402512:	dd27      	ble.n	402564 <_svfprintf_r+0x384>
  402514:	4642      	mov	r2, r8
  402516:	4621      	mov	r1, r4
  402518:	46b0      	mov	r8, r6
  40251a:	f04f 0b10 	mov.w	fp, #16
  40251e:	462e      	mov	r6, r5
  402520:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402522:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402524:	e004      	b.n	402530 <_svfprintf_r+0x350>
  402526:	3f10      	subs	r7, #16
  402528:	2f10      	cmp	r7, #16
  40252a:	f102 0208 	add.w	r2, r2, #8
  40252e:	dd15      	ble.n	40255c <_svfprintf_r+0x37c>
  402530:	3301      	adds	r3, #1
  402532:	3110      	adds	r1, #16
  402534:	2b07      	cmp	r3, #7
  402536:	9127      	str	r1, [sp, #156]	; 0x9c
  402538:	9326      	str	r3, [sp, #152]	; 0x98
  40253a:	e882 0840 	stmia.w	r2, {r6, fp}
  40253e:	ddf2      	ble.n	402526 <_svfprintf_r+0x346>
  402540:	aa25      	add	r2, sp, #148	; 0x94
  402542:	4629      	mov	r1, r5
  402544:	4620      	mov	r0, r4
  402546:	f002 ffa9 	bl	40549c <__ssprint_r>
  40254a:	2800      	cmp	r0, #0
  40254c:	f47f af1a 	bne.w	402384 <_svfprintf_r+0x1a4>
  402550:	3f10      	subs	r7, #16
  402552:	2f10      	cmp	r7, #16
  402554:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402556:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402558:	464a      	mov	r2, r9
  40255a:	dce9      	bgt.n	402530 <_svfprintf_r+0x350>
  40255c:	4635      	mov	r5, r6
  40255e:	460c      	mov	r4, r1
  402560:	4646      	mov	r6, r8
  402562:	4690      	mov	r8, r2
  402564:	3301      	adds	r3, #1
  402566:	443c      	add	r4, r7
  402568:	2b07      	cmp	r3, #7
  40256a:	9427      	str	r4, [sp, #156]	; 0x9c
  40256c:	9326      	str	r3, [sp, #152]	; 0x98
  40256e:	e888 00a0 	stmia.w	r8, {r5, r7}
  402572:	f300 8381 	bgt.w	402c78 <_svfprintf_r+0xa98>
  402576:	f108 0808 	add.w	r8, r8, #8
  40257a:	9b07      	ldr	r3, [sp, #28]
  40257c:	05df      	lsls	r7, r3, #23
  40257e:	f100 8268 	bmi.w	402a52 <_svfprintf_r+0x872>
  402582:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402584:	990e      	ldr	r1, [sp, #56]	; 0x38
  402586:	f8c8 6000 	str.w	r6, [r8]
  40258a:	3301      	adds	r3, #1
  40258c:	440c      	add	r4, r1
  40258e:	2b07      	cmp	r3, #7
  402590:	9427      	str	r4, [sp, #156]	; 0x9c
  402592:	f8c8 1004 	str.w	r1, [r8, #4]
  402596:	9326      	str	r3, [sp, #152]	; 0x98
  402598:	f300 834d 	bgt.w	402c36 <_svfprintf_r+0xa56>
  40259c:	f108 0808 	add.w	r8, r8, #8
  4025a0:	9b07      	ldr	r3, [sp, #28]
  4025a2:	075b      	lsls	r3, r3, #29
  4025a4:	d53a      	bpl.n	40261c <_svfprintf_r+0x43c>
  4025a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4025a8:	9a08      	ldr	r2, [sp, #32]
  4025aa:	1a9d      	subs	r5, r3, r2
  4025ac:	2d00      	cmp	r5, #0
  4025ae:	dd35      	ble.n	40261c <_svfprintf_r+0x43c>
  4025b0:	2d10      	cmp	r5, #16
  4025b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4025b4:	dd20      	ble.n	4025f8 <_svfprintf_r+0x418>
  4025b6:	2610      	movs	r6, #16
  4025b8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4025ba:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  4025be:	e004      	b.n	4025ca <_svfprintf_r+0x3ea>
  4025c0:	3d10      	subs	r5, #16
  4025c2:	2d10      	cmp	r5, #16
  4025c4:	f108 0808 	add.w	r8, r8, #8
  4025c8:	dd16      	ble.n	4025f8 <_svfprintf_r+0x418>
  4025ca:	3301      	adds	r3, #1
  4025cc:	4a5e      	ldr	r2, [pc, #376]	; (402748 <_svfprintf_r+0x568>)
  4025ce:	9326      	str	r3, [sp, #152]	; 0x98
  4025d0:	3410      	adds	r4, #16
  4025d2:	2b07      	cmp	r3, #7
  4025d4:	9427      	str	r4, [sp, #156]	; 0x9c
  4025d6:	e888 0044 	stmia.w	r8, {r2, r6}
  4025da:	ddf1      	ble.n	4025c0 <_svfprintf_r+0x3e0>
  4025dc:	aa25      	add	r2, sp, #148	; 0x94
  4025de:	4659      	mov	r1, fp
  4025e0:	4638      	mov	r0, r7
  4025e2:	f002 ff5b 	bl	40549c <__ssprint_r>
  4025e6:	2800      	cmp	r0, #0
  4025e8:	f47f aecc 	bne.w	402384 <_svfprintf_r+0x1a4>
  4025ec:	3d10      	subs	r5, #16
  4025ee:	2d10      	cmp	r5, #16
  4025f0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4025f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4025f4:	46c8      	mov	r8, r9
  4025f6:	dce8      	bgt.n	4025ca <_svfprintf_r+0x3ea>
  4025f8:	3301      	adds	r3, #1
  4025fa:	4a53      	ldr	r2, [pc, #332]	; (402748 <_svfprintf_r+0x568>)
  4025fc:	9326      	str	r3, [sp, #152]	; 0x98
  4025fe:	442c      	add	r4, r5
  402600:	2b07      	cmp	r3, #7
  402602:	9427      	str	r4, [sp, #156]	; 0x9c
  402604:	e888 0024 	stmia.w	r8, {r2, r5}
  402608:	dd08      	ble.n	40261c <_svfprintf_r+0x43c>
  40260a:	aa25      	add	r2, sp, #148	; 0x94
  40260c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40260e:	980c      	ldr	r0, [sp, #48]	; 0x30
  402610:	f002 ff44 	bl	40549c <__ssprint_r>
  402614:	2800      	cmp	r0, #0
  402616:	f47f aeb5 	bne.w	402384 <_svfprintf_r+0x1a4>
  40261a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40261c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40261e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402620:	9908      	ldr	r1, [sp, #32]
  402622:	428a      	cmp	r2, r1
  402624:	bfac      	ite	ge
  402626:	189b      	addge	r3, r3, r2
  402628:	185b      	addlt	r3, r3, r1
  40262a:	9309      	str	r3, [sp, #36]	; 0x24
  40262c:	2c00      	cmp	r4, #0
  40262e:	f040 830d 	bne.w	402c4c <_svfprintf_r+0xa6c>
  402632:	2300      	movs	r3, #0
  402634:	9326      	str	r3, [sp, #152]	; 0x98
  402636:	46c8      	mov	r8, r9
  402638:	e5f9      	b.n	40222e <_svfprintf_r+0x4e>
  40263a:	9311      	str	r3, [sp, #68]	; 0x44
  40263c:	f01b 0320 	ands.w	r3, fp, #32
  402640:	f040 81e3 	bne.w	402a0a <_svfprintf_r+0x82a>
  402644:	f01b 0210 	ands.w	r2, fp, #16
  402648:	f040 842e 	bne.w	402ea8 <_svfprintf_r+0xcc8>
  40264c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  402650:	f000 842a 	beq.w	402ea8 <_svfprintf_r+0xcc8>
  402654:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402656:	4613      	mov	r3, r2
  402658:	460a      	mov	r2, r1
  40265a:	3204      	adds	r2, #4
  40265c:	880c      	ldrh	r4, [r1, #0]
  40265e:	920f      	str	r2, [sp, #60]	; 0x3c
  402660:	2500      	movs	r5, #0
  402662:	e6b0      	b.n	4023c6 <_svfprintf_r+0x1e6>
  402664:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402666:	9311      	str	r3, [sp, #68]	; 0x44
  402668:	6816      	ldr	r6, [r2, #0]
  40266a:	2400      	movs	r4, #0
  40266c:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  402670:	1d15      	adds	r5, r2, #4
  402672:	2e00      	cmp	r6, #0
  402674:	f000 86a7 	beq.w	4033c6 <_svfprintf_r+0x11e6>
  402678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40267a:	1c53      	adds	r3, r2, #1
  40267c:	f000 8609 	beq.w	403292 <_svfprintf_r+0x10b2>
  402680:	4621      	mov	r1, r4
  402682:	4630      	mov	r0, r6
  402684:	f002 fa8c 	bl	404ba0 <memchr>
  402688:	2800      	cmp	r0, #0
  40268a:	f000 86e1 	beq.w	403450 <_svfprintf_r+0x1270>
  40268e:	1b83      	subs	r3, r0, r6
  402690:	930e      	str	r3, [sp, #56]	; 0x38
  402692:	940a      	str	r4, [sp, #40]	; 0x28
  402694:	950f      	str	r5, [sp, #60]	; 0x3c
  402696:	f8cd b01c 	str.w	fp, [sp, #28]
  40269a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40269e:	9308      	str	r3, [sp, #32]
  4026a0:	9412      	str	r4, [sp, #72]	; 0x48
  4026a2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4026a6:	e6b3      	b.n	402410 <_svfprintf_r+0x230>
  4026a8:	f89a 3000 	ldrb.w	r3, [sl]
  4026ac:	2201      	movs	r2, #1
  4026ae:	212b      	movs	r1, #43	; 0x2b
  4026b0:	e5ee      	b.n	402290 <_svfprintf_r+0xb0>
  4026b2:	f04b 0b20 	orr.w	fp, fp, #32
  4026b6:	f89a 3000 	ldrb.w	r3, [sl]
  4026ba:	e5e9      	b.n	402290 <_svfprintf_r+0xb0>
  4026bc:	9311      	str	r3, [sp, #68]	; 0x44
  4026be:	2a00      	cmp	r2, #0
  4026c0:	f040 8795 	bne.w	4035ee <_svfprintf_r+0x140e>
  4026c4:	4b22      	ldr	r3, [pc, #136]	; (402750 <_svfprintf_r+0x570>)
  4026c6:	9318      	str	r3, [sp, #96]	; 0x60
  4026c8:	f01b 0f20 	tst.w	fp, #32
  4026cc:	f040 8111 	bne.w	4028f2 <_svfprintf_r+0x712>
  4026d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4026d2:	f01b 0f10 	tst.w	fp, #16
  4026d6:	4613      	mov	r3, r2
  4026d8:	f040 83e1 	bne.w	402e9e <_svfprintf_r+0xcbe>
  4026dc:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4026e0:	f000 83dd 	beq.w	402e9e <_svfprintf_r+0xcbe>
  4026e4:	3304      	adds	r3, #4
  4026e6:	8814      	ldrh	r4, [r2, #0]
  4026e8:	930f      	str	r3, [sp, #60]	; 0x3c
  4026ea:	2500      	movs	r5, #0
  4026ec:	f01b 0f01 	tst.w	fp, #1
  4026f0:	f000 810c 	beq.w	40290c <_svfprintf_r+0x72c>
  4026f4:	ea54 0305 	orrs.w	r3, r4, r5
  4026f8:	f000 8108 	beq.w	40290c <_svfprintf_r+0x72c>
  4026fc:	2330      	movs	r3, #48	; 0x30
  4026fe:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  402702:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  402706:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  40270a:	f04b 0b02 	orr.w	fp, fp, #2
  40270e:	2302      	movs	r3, #2
  402710:	e659      	b.n	4023c6 <_svfprintf_r+0x1e6>
  402712:	f89a 3000 	ldrb.w	r3, [sl]
  402716:	2900      	cmp	r1, #0
  402718:	f47f adba 	bne.w	402290 <_svfprintf_r+0xb0>
  40271c:	2201      	movs	r2, #1
  40271e:	2120      	movs	r1, #32
  402720:	e5b6      	b.n	402290 <_svfprintf_r+0xb0>
  402722:	f04b 0b01 	orr.w	fp, fp, #1
  402726:	f89a 3000 	ldrb.w	r3, [sl]
  40272a:	e5b1      	b.n	402290 <_svfprintf_r+0xb0>
  40272c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40272e:	6823      	ldr	r3, [r4, #0]
  402730:	930d      	str	r3, [sp, #52]	; 0x34
  402732:	4618      	mov	r0, r3
  402734:	2800      	cmp	r0, #0
  402736:	4623      	mov	r3, r4
  402738:	f103 0304 	add.w	r3, r3, #4
  40273c:	f6ff ae0a 	blt.w	402354 <_svfprintf_r+0x174>
  402740:	930f      	str	r3, [sp, #60]	; 0x3c
  402742:	f89a 3000 	ldrb.w	r3, [sl]
  402746:	e5a3      	b.n	402290 <_svfprintf_r+0xb0>
  402748:	00407160 	.word	0x00407160
  40274c:	00407170 	.word	0x00407170
  402750:	00407140 	.word	0x00407140
  402754:	f04b 0b10 	orr.w	fp, fp, #16
  402758:	f01b 0f20 	tst.w	fp, #32
  40275c:	9311      	str	r3, [sp, #68]	; 0x44
  40275e:	f43f ae23 	beq.w	4023a8 <_svfprintf_r+0x1c8>
  402762:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402764:	3507      	adds	r5, #7
  402766:	f025 0307 	bic.w	r3, r5, #7
  40276a:	f103 0208 	add.w	r2, r3, #8
  40276e:	e9d3 4500 	ldrd	r4, r5, [r3]
  402772:	920f      	str	r2, [sp, #60]	; 0x3c
  402774:	2301      	movs	r3, #1
  402776:	e626      	b.n	4023c6 <_svfprintf_r+0x1e6>
  402778:	f89a 3000 	ldrb.w	r3, [sl]
  40277c:	2b2a      	cmp	r3, #42	; 0x2a
  40277e:	f10a 0401 	add.w	r4, sl, #1
  402782:	f000 8727 	beq.w	4035d4 <_svfprintf_r+0x13f4>
  402786:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40278a:	2809      	cmp	r0, #9
  40278c:	46a2      	mov	sl, r4
  40278e:	f200 86ad 	bhi.w	4034ec <_svfprintf_r+0x130c>
  402792:	2300      	movs	r3, #0
  402794:	461c      	mov	r4, r3
  402796:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40279a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40279e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4027a2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4027a6:	2809      	cmp	r0, #9
  4027a8:	d9f5      	bls.n	402796 <_svfprintf_r+0x5b6>
  4027aa:	940a      	str	r4, [sp, #40]	; 0x28
  4027ac:	e572      	b.n	402294 <_svfprintf_r+0xb4>
  4027ae:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4027b2:	f89a 3000 	ldrb.w	r3, [sl]
  4027b6:	e56b      	b.n	402290 <_svfprintf_r+0xb0>
  4027b8:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  4027bc:	f89a 3000 	ldrb.w	r3, [sl]
  4027c0:	e566      	b.n	402290 <_svfprintf_r+0xb0>
  4027c2:	f89a 3000 	ldrb.w	r3, [sl]
  4027c6:	2b6c      	cmp	r3, #108	; 0x6c
  4027c8:	bf03      	ittte	eq
  4027ca:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  4027ce:	f04b 0b20 	orreq.w	fp, fp, #32
  4027d2:	f10a 0a01 	addeq.w	sl, sl, #1
  4027d6:	f04b 0b10 	orrne.w	fp, fp, #16
  4027da:	e559      	b.n	402290 <_svfprintf_r+0xb0>
  4027dc:	2a00      	cmp	r2, #0
  4027de:	f040 8711 	bne.w	403604 <_svfprintf_r+0x1424>
  4027e2:	f01b 0f20 	tst.w	fp, #32
  4027e6:	f040 84f9 	bne.w	4031dc <_svfprintf_r+0xffc>
  4027ea:	f01b 0f10 	tst.w	fp, #16
  4027ee:	f040 84ac 	bne.w	40314a <_svfprintf_r+0xf6a>
  4027f2:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4027f6:	f000 84a8 	beq.w	40314a <_svfprintf_r+0xf6a>
  4027fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4027fc:	6813      	ldr	r3, [r2, #0]
  4027fe:	3204      	adds	r2, #4
  402800:	920f      	str	r2, [sp, #60]	; 0x3c
  402802:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  402806:	801a      	strh	r2, [r3, #0]
  402808:	e511      	b.n	40222e <_svfprintf_r+0x4e>
  40280a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40280c:	4bb3      	ldr	r3, [pc, #716]	; (402adc <_svfprintf_r+0x8fc>)
  40280e:	680c      	ldr	r4, [r1, #0]
  402810:	9318      	str	r3, [sp, #96]	; 0x60
  402812:	2230      	movs	r2, #48	; 0x30
  402814:	2378      	movs	r3, #120	; 0x78
  402816:	3104      	adds	r1, #4
  402818:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  40281c:	9311      	str	r3, [sp, #68]	; 0x44
  40281e:	f04b 0b02 	orr.w	fp, fp, #2
  402822:	910f      	str	r1, [sp, #60]	; 0x3c
  402824:	2500      	movs	r5, #0
  402826:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  40282a:	2302      	movs	r3, #2
  40282c:	e5cb      	b.n	4023c6 <_svfprintf_r+0x1e6>
  40282e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402830:	9311      	str	r3, [sp, #68]	; 0x44
  402832:	680a      	ldr	r2, [r1, #0]
  402834:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  402838:	2300      	movs	r3, #0
  40283a:	460a      	mov	r2, r1
  40283c:	461f      	mov	r7, r3
  40283e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402842:	3204      	adds	r2, #4
  402844:	2301      	movs	r3, #1
  402846:	9308      	str	r3, [sp, #32]
  402848:	f8cd b01c 	str.w	fp, [sp, #28]
  40284c:	970a      	str	r7, [sp, #40]	; 0x28
  40284e:	9712      	str	r7, [sp, #72]	; 0x48
  402850:	920f      	str	r2, [sp, #60]	; 0x3c
  402852:	930e      	str	r3, [sp, #56]	; 0x38
  402854:	ae28      	add	r6, sp, #160	; 0xa0
  402856:	e5df      	b.n	402418 <_svfprintf_r+0x238>
  402858:	9311      	str	r3, [sp, #68]	; 0x44
  40285a:	2a00      	cmp	r2, #0
  40285c:	f040 86ea 	bne.w	403634 <_svfprintf_r+0x1454>
  402860:	f01b 0f20 	tst.w	fp, #32
  402864:	d15d      	bne.n	402922 <_svfprintf_r+0x742>
  402866:	f01b 0f10 	tst.w	fp, #16
  40286a:	f040 8308 	bne.w	402e7e <_svfprintf_r+0xc9e>
  40286e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402872:	f000 8304 	beq.w	402e7e <_svfprintf_r+0xc9e>
  402876:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402878:	f9b1 4000 	ldrsh.w	r4, [r1]
  40287c:	3104      	adds	r1, #4
  40287e:	17e5      	asrs	r5, r4, #31
  402880:	4622      	mov	r2, r4
  402882:	462b      	mov	r3, r5
  402884:	910f      	str	r1, [sp, #60]	; 0x3c
  402886:	2a00      	cmp	r2, #0
  402888:	f173 0300 	sbcs.w	r3, r3, #0
  40288c:	db58      	blt.n	402940 <_svfprintf_r+0x760>
  40288e:	990a      	ldr	r1, [sp, #40]	; 0x28
  402890:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402894:	1c4a      	adds	r2, r1, #1
  402896:	f04f 0301 	mov.w	r3, #1
  40289a:	f47f ad9b 	bne.w	4023d4 <_svfprintf_r+0x1f4>
  40289e:	ea54 0205 	orrs.w	r2, r4, r5
  4028a2:	f000 81df 	beq.w	402c64 <_svfprintf_r+0xa84>
  4028a6:	f8cd b01c 	str.w	fp, [sp, #28]
  4028aa:	2b01      	cmp	r3, #1
  4028ac:	f000 827b 	beq.w	402da6 <_svfprintf_r+0xbc6>
  4028b0:	2b02      	cmp	r3, #2
  4028b2:	f040 8206 	bne.w	402cc2 <_svfprintf_r+0xae2>
  4028b6:	9818      	ldr	r0, [sp, #96]	; 0x60
  4028b8:	464e      	mov	r6, r9
  4028ba:	0923      	lsrs	r3, r4, #4
  4028bc:	f004 010f 	and.w	r1, r4, #15
  4028c0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4028c4:	092a      	lsrs	r2, r5, #4
  4028c6:	461c      	mov	r4, r3
  4028c8:	4615      	mov	r5, r2
  4028ca:	5c43      	ldrb	r3, [r0, r1]
  4028cc:	f806 3d01 	strb.w	r3, [r6, #-1]!
  4028d0:	ea54 0305 	orrs.w	r3, r4, r5
  4028d4:	d1f1      	bne.n	4028ba <_svfprintf_r+0x6da>
  4028d6:	eba9 0306 	sub.w	r3, r9, r6
  4028da:	930e      	str	r3, [sp, #56]	; 0x38
  4028dc:	e590      	b.n	402400 <_svfprintf_r+0x220>
  4028de:	9311      	str	r3, [sp, #68]	; 0x44
  4028e0:	2a00      	cmp	r2, #0
  4028e2:	f040 86a3 	bne.w	40362c <_svfprintf_r+0x144c>
  4028e6:	4b7e      	ldr	r3, [pc, #504]	; (402ae0 <_svfprintf_r+0x900>)
  4028e8:	9318      	str	r3, [sp, #96]	; 0x60
  4028ea:	f01b 0f20 	tst.w	fp, #32
  4028ee:	f43f aeef 	beq.w	4026d0 <_svfprintf_r+0x4f0>
  4028f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4028f4:	3507      	adds	r5, #7
  4028f6:	f025 0307 	bic.w	r3, r5, #7
  4028fa:	f103 0208 	add.w	r2, r3, #8
  4028fe:	f01b 0f01 	tst.w	fp, #1
  402902:	920f      	str	r2, [sp, #60]	; 0x3c
  402904:	e9d3 4500 	ldrd	r4, r5, [r3]
  402908:	f47f aef4 	bne.w	4026f4 <_svfprintf_r+0x514>
  40290c:	2302      	movs	r3, #2
  40290e:	e55a      	b.n	4023c6 <_svfprintf_r+0x1e6>
  402910:	9311      	str	r3, [sp, #68]	; 0x44
  402912:	2a00      	cmp	r2, #0
  402914:	f040 8686 	bne.w	403624 <_svfprintf_r+0x1444>
  402918:	f04b 0b10 	orr.w	fp, fp, #16
  40291c:	f01b 0f20 	tst.w	fp, #32
  402920:	d0a1      	beq.n	402866 <_svfprintf_r+0x686>
  402922:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402924:	3507      	adds	r5, #7
  402926:	f025 0507 	bic.w	r5, r5, #7
  40292a:	e9d5 2300 	ldrd	r2, r3, [r5]
  40292e:	2a00      	cmp	r2, #0
  402930:	f105 0108 	add.w	r1, r5, #8
  402934:	461d      	mov	r5, r3
  402936:	f173 0300 	sbcs.w	r3, r3, #0
  40293a:	910f      	str	r1, [sp, #60]	; 0x3c
  40293c:	4614      	mov	r4, r2
  40293e:	daa6      	bge.n	40288e <_svfprintf_r+0x6ae>
  402940:	272d      	movs	r7, #45	; 0x2d
  402942:	4264      	negs	r4, r4
  402944:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  402948:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40294c:	2301      	movs	r3, #1
  40294e:	e53d      	b.n	4023cc <_svfprintf_r+0x1ec>
  402950:	9311      	str	r3, [sp, #68]	; 0x44
  402952:	2a00      	cmp	r2, #0
  402954:	f040 8662 	bne.w	40361c <_svfprintf_r+0x143c>
  402958:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40295a:	3507      	adds	r5, #7
  40295c:	f025 0307 	bic.w	r3, r5, #7
  402960:	f103 0208 	add.w	r2, r3, #8
  402964:	920f      	str	r2, [sp, #60]	; 0x3c
  402966:	681a      	ldr	r2, [r3, #0]
  402968:	9215      	str	r2, [sp, #84]	; 0x54
  40296a:	685b      	ldr	r3, [r3, #4]
  40296c:	9314      	str	r3, [sp, #80]	; 0x50
  40296e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  402970:	9d15      	ldr	r5, [sp, #84]	; 0x54
  402972:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  402976:	4628      	mov	r0, r5
  402978:	4621      	mov	r1, r4
  40297a:	f04f 32ff 	mov.w	r2, #4294967295
  40297e:	4b59      	ldr	r3, [pc, #356]	; (402ae4 <_svfprintf_r+0x904>)
  402980:	f003 fe52 	bl	406628 <__aeabi_dcmpun>
  402984:	2800      	cmp	r0, #0
  402986:	f040 834a 	bne.w	40301e <_svfprintf_r+0xe3e>
  40298a:	4628      	mov	r0, r5
  40298c:	4621      	mov	r1, r4
  40298e:	f04f 32ff 	mov.w	r2, #4294967295
  402992:	4b54      	ldr	r3, [pc, #336]	; (402ae4 <_svfprintf_r+0x904>)
  402994:	f003 fe2a 	bl	4065ec <__aeabi_dcmple>
  402998:	2800      	cmp	r0, #0
  40299a:	f040 8340 	bne.w	40301e <_svfprintf_r+0xe3e>
  40299e:	a815      	add	r0, sp, #84	; 0x54
  4029a0:	c80d      	ldmia	r0, {r0, r2, r3}
  4029a2:	9914      	ldr	r1, [sp, #80]	; 0x50
  4029a4:	f003 fe18 	bl	4065d8 <__aeabi_dcmplt>
  4029a8:	2800      	cmp	r0, #0
  4029aa:	f040 8530 	bne.w	40340e <_svfprintf_r+0x122e>
  4029ae:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4029b2:	4e4d      	ldr	r6, [pc, #308]	; (402ae8 <_svfprintf_r+0x908>)
  4029b4:	4b4d      	ldr	r3, [pc, #308]	; (402aec <_svfprintf_r+0x90c>)
  4029b6:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4029ba:	9007      	str	r0, [sp, #28]
  4029bc:	9811      	ldr	r0, [sp, #68]	; 0x44
  4029be:	2203      	movs	r2, #3
  4029c0:	2100      	movs	r1, #0
  4029c2:	9208      	str	r2, [sp, #32]
  4029c4:	910a      	str	r1, [sp, #40]	; 0x28
  4029c6:	2847      	cmp	r0, #71	; 0x47
  4029c8:	bfd8      	it	le
  4029ca:	461e      	movle	r6, r3
  4029cc:	920e      	str	r2, [sp, #56]	; 0x38
  4029ce:	9112      	str	r1, [sp, #72]	; 0x48
  4029d0:	e51e      	b.n	402410 <_svfprintf_r+0x230>
  4029d2:	f04b 0b08 	orr.w	fp, fp, #8
  4029d6:	f89a 3000 	ldrb.w	r3, [sl]
  4029da:	e459      	b.n	402290 <_svfprintf_r+0xb0>
  4029dc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4029e0:	2300      	movs	r3, #0
  4029e2:	461c      	mov	r4, r3
  4029e4:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4029e8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4029ec:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4029f0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4029f4:	2809      	cmp	r0, #9
  4029f6:	d9f5      	bls.n	4029e4 <_svfprintf_r+0x804>
  4029f8:	940d      	str	r4, [sp, #52]	; 0x34
  4029fa:	e44b      	b.n	402294 <_svfprintf_r+0xb4>
  4029fc:	f04b 0b10 	orr.w	fp, fp, #16
  402a00:	9311      	str	r3, [sp, #68]	; 0x44
  402a02:	f01b 0320 	ands.w	r3, fp, #32
  402a06:	f43f ae1d 	beq.w	402644 <_svfprintf_r+0x464>
  402a0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402a0c:	3507      	adds	r5, #7
  402a0e:	f025 0307 	bic.w	r3, r5, #7
  402a12:	f103 0208 	add.w	r2, r3, #8
  402a16:	e9d3 4500 	ldrd	r4, r5, [r3]
  402a1a:	920f      	str	r2, [sp, #60]	; 0x3c
  402a1c:	2300      	movs	r3, #0
  402a1e:	e4d2      	b.n	4023c6 <_svfprintf_r+0x1e6>
  402a20:	9311      	str	r3, [sp, #68]	; 0x44
  402a22:	2a00      	cmp	r2, #0
  402a24:	f040 85e7 	bne.w	4035f6 <_svfprintf_r+0x1416>
  402a28:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402a2a:	2a00      	cmp	r2, #0
  402a2c:	f43f aca3 	beq.w	402376 <_svfprintf_r+0x196>
  402a30:	2300      	movs	r3, #0
  402a32:	2101      	movs	r1, #1
  402a34:	461f      	mov	r7, r3
  402a36:	9108      	str	r1, [sp, #32]
  402a38:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  402a3c:	f8cd b01c 	str.w	fp, [sp, #28]
  402a40:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402a44:	930a      	str	r3, [sp, #40]	; 0x28
  402a46:	9312      	str	r3, [sp, #72]	; 0x48
  402a48:	910e      	str	r1, [sp, #56]	; 0x38
  402a4a:	ae28      	add	r6, sp, #160	; 0xa0
  402a4c:	e4e4      	b.n	402418 <_svfprintf_r+0x238>
  402a4e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402a50:	e534      	b.n	4024bc <_svfprintf_r+0x2dc>
  402a52:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402a54:	2b65      	cmp	r3, #101	; 0x65
  402a56:	f340 80a7 	ble.w	402ba8 <_svfprintf_r+0x9c8>
  402a5a:	a815      	add	r0, sp, #84	; 0x54
  402a5c:	c80d      	ldmia	r0, {r0, r2, r3}
  402a5e:	9914      	ldr	r1, [sp, #80]	; 0x50
  402a60:	f003 fdb0 	bl	4065c4 <__aeabi_dcmpeq>
  402a64:	2800      	cmp	r0, #0
  402a66:	f000 8150 	beq.w	402d0a <_svfprintf_r+0xb2a>
  402a6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402a6c:	4a20      	ldr	r2, [pc, #128]	; (402af0 <_svfprintf_r+0x910>)
  402a6e:	f8c8 2000 	str.w	r2, [r8]
  402a72:	3301      	adds	r3, #1
  402a74:	3401      	adds	r4, #1
  402a76:	2201      	movs	r2, #1
  402a78:	2b07      	cmp	r3, #7
  402a7a:	9427      	str	r4, [sp, #156]	; 0x9c
  402a7c:	9326      	str	r3, [sp, #152]	; 0x98
  402a7e:	f8c8 2004 	str.w	r2, [r8, #4]
  402a82:	f300 836a 	bgt.w	40315a <_svfprintf_r+0xf7a>
  402a86:	f108 0808 	add.w	r8, r8, #8
  402a8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402a8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402a8e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402a90:	4293      	cmp	r3, r2
  402a92:	db03      	blt.n	402a9c <_svfprintf_r+0x8bc>
  402a94:	9b07      	ldr	r3, [sp, #28]
  402a96:	07dd      	lsls	r5, r3, #31
  402a98:	f57f ad82 	bpl.w	4025a0 <_svfprintf_r+0x3c0>
  402a9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402a9e:	9919      	ldr	r1, [sp, #100]	; 0x64
  402aa0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  402aa2:	f8c8 2000 	str.w	r2, [r8]
  402aa6:	3301      	adds	r3, #1
  402aa8:	440c      	add	r4, r1
  402aaa:	2b07      	cmp	r3, #7
  402aac:	f8c8 1004 	str.w	r1, [r8, #4]
  402ab0:	9427      	str	r4, [sp, #156]	; 0x9c
  402ab2:	9326      	str	r3, [sp, #152]	; 0x98
  402ab4:	f300 839e 	bgt.w	4031f4 <_svfprintf_r+0x1014>
  402ab8:	f108 0808 	add.w	r8, r8, #8
  402abc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402abe:	1e5e      	subs	r6, r3, #1
  402ac0:	2e00      	cmp	r6, #0
  402ac2:	f77f ad6d 	ble.w	4025a0 <_svfprintf_r+0x3c0>
  402ac6:	2e10      	cmp	r6, #16
  402ac8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402aca:	4d0a      	ldr	r5, [pc, #40]	; (402af4 <_svfprintf_r+0x914>)
  402acc:	f340 81f5 	ble.w	402eba <_svfprintf_r+0xcda>
  402ad0:	4622      	mov	r2, r4
  402ad2:	2710      	movs	r7, #16
  402ad4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  402ad8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  402ada:	e013      	b.n	402b04 <_svfprintf_r+0x924>
  402adc:	00407140 	.word	0x00407140
  402ae0:	0040712c 	.word	0x0040712c
  402ae4:	7fefffff 	.word	0x7fefffff
  402ae8:	00407120 	.word	0x00407120
  402aec:	0040711c 	.word	0x0040711c
  402af0:	0040715c 	.word	0x0040715c
  402af4:	00407170 	.word	0x00407170
  402af8:	f108 0808 	add.w	r8, r8, #8
  402afc:	3e10      	subs	r6, #16
  402afe:	2e10      	cmp	r6, #16
  402b00:	f340 81da 	ble.w	402eb8 <_svfprintf_r+0xcd8>
  402b04:	3301      	adds	r3, #1
  402b06:	3210      	adds	r2, #16
  402b08:	2b07      	cmp	r3, #7
  402b0a:	9227      	str	r2, [sp, #156]	; 0x9c
  402b0c:	9326      	str	r3, [sp, #152]	; 0x98
  402b0e:	e888 00a0 	stmia.w	r8, {r5, r7}
  402b12:	ddf1      	ble.n	402af8 <_svfprintf_r+0x918>
  402b14:	aa25      	add	r2, sp, #148	; 0x94
  402b16:	4621      	mov	r1, r4
  402b18:	4658      	mov	r0, fp
  402b1a:	f002 fcbf 	bl	40549c <__ssprint_r>
  402b1e:	2800      	cmp	r0, #0
  402b20:	f47f ac30 	bne.w	402384 <_svfprintf_r+0x1a4>
  402b24:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402b26:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402b28:	46c8      	mov	r8, r9
  402b2a:	e7e7      	b.n	402afc <_svfprintf_r+0x91c>
  402b2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402b2e:	9a08      	ldr	r2, [sp, #32]
  402b30:	1a9f      	subs	r7, r3, r2
  402b32:	2f00      	cmp	r7, #0
  402b34:	f77f ace5 	ble.w	402502 <_svfprintf_r+0x322>
  402b38:	2f10      	cmp	r7, #16
  402b3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402b3c:	4db6      	ldr	r5, [pc, #728]	; (402e18 <_svfprintf_r+0xc38>)
  402b3e:	dd27      	ble.n	402b90 <_svfprintf_r+0x9b0>
  402b40:	4642      	mov	r2, r8
  402b42:	4621      	mov	r1, r4
  402b44:	46b0      	mov	r8, r6
  402b46:	f04f 0b10 	mov.w	fp, #16
  402b4a:	462e      	mov	r6, r5
  402b4c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402b4e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402b50:	e004      	b.n	402b5c <_svfprintf_r+0x97c>
  402b52:	3f10      	subs	r7, #16
  402b54:	2f10      	cmp	r7, #16
  402b56:	f102 0208 	add.w	r2, r2, #8
  402b5a:	dd15      	ble.n	402b88 <_svfprintf_r+0x9a8>
  402b5c:	3301      	adds	r3, #1
  402b5e:	3110      	adds	r1, #16
  402b60:	2b07      	cmp	r3, #7
  402b62:	9127      	str	r1, [sp, #156]	; 0x9c
  402b64:	9326      	str	r3, [sp, #152]	; 0x98
  402b66:	e882 0840 	stmia.w	r2, {r6, fp}
  402b6a:	ddf2      	ble.n	402b52 <_svfprintf_r+0x972>
  402b6c:	aa25      	add	r2, sp, #148	; 0x94
  402b6e:	4629      	mov	r1, r5
  402b70:	4620      	mov	r0, r4
  402b72:	f002 fc93 	bl	40549c <__ssprint_r>
  402b76:	2800      	cmp	r0, #0
  402b78:	f47f ac04 	bne.w	402384 <_svfprintf_r+0x1a4>
  402b7c:	3f10      	subs	r7, #16
  402b7e:	2f10      	cmp	r7, #16
  402b80:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402b82:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402b84:	464a      	mov	r2, r9
  402b86:	dce9      	bgt.n	402b5c <_svfprintf_r+0x97c>
  402b88:	4635      	mov	r5, r6
  402b8a:	460c      	mov	r4, r1
  402b8c:	4646      	mov	r6, r8
  402b8e:	4690      	mov	r8, r2
  402b90:	3301      	adds	r3, #1
  402b92:	443c      	add	r4, r7
  402b94:	2b07      	cmp	r3, #7
  402b96:	9427      	str	r4, [sp, #156]	; 0x9c
  402b98:	9326      	str	r3, [sp, #152]	; 0x98
  402b9a:	e888 00a0 	stmia.w	r8, {r5, r7}
  402b9e:	f300 8232 	bgt.w	403006 <_svfprintf_r+0xe26>
  402ba2:	f108 0808 	add.w	r8, r8, #8
  402ba6:	e4ac      	b.n	402502 <_svfprintf_r+0x322>
  402ba8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402baa:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402bac:	2b01      	cmp	r3, #1
  402bae:	f340 81fe 	ble.w	402fae <_svfprintf_r+0xdce>
  402bb2:	3701      	adds	r7, #1
  402bb4:	3401      	adds	r4, #1
  402bb6:	2301      	movs	r3, #1
  402bb8:	2f07      	cmp	r7, #7
  402bba:	9427      	str	r4, [sp, #156]	; 0x9c
  402bbc:	9726      	str	r7, [sp, #152]	; 0x98
  402bbe:	f8c8 6000 	str.w	r6, [r8]
  402bc2:	f8c8 3004 	str.w	r3, [r8, #4]
  402bc6:	f300 8203 	bgt.w	402fd0 <_svfprintf_r+0xdf0>
  402bca:	f108 0808 	add.w	r8, r8, #8
  402bce:	9a19      	ldr	r2, [sp, #100]	; 0x64
  402bd0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  402bd2:	f8c8 3000 	str.w	r3, [r8]
  402bd6:	3701      	adds	r7, #1
  402bd8:	4414      	add	r4, r2
  402bda:	2f07      	cmp	r7, #7
  402bdc:	9427      	str	r4, [sp, #156]	; 0x9c
  402bde:	9726      	str	r7, [sp, #152]	; 0x98
  402be0:	f8c8 2004 	str.w	r2, [r8, #4]
  402be4:	f300 8200 	bgt.w	402fe8 <_svfprintf_r+0xe08>
  402be8:	f108 0808 	add.w	r8, r8, #8
  402bec:	a815      	add	r0, sp, #84	; 0x54
  402bee:	c80d      	ldmia	r0, {r0, r2, r3}
  402bf0:	9914      	ldr	r1, [sp, #80]	; 0x50
  402bf2:	f003 fce7 	bl	4065c4 <__aeabi_dcmpeq>
  402bf6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402bf8:	2800      	cmp	r0, #0
  402bfa:	f040 8101 	bne.w	402e00 <_svfprintf_r+0xc20>
  402bfe:	3b01      	subs	r3, #1
  402c00:	3701      	adds	r7, #1
  402c02:	3601      	adds	r6, #1
  402c04:	441c      	add	r4, r3
  402c06:	2f07      	cmp	r7, #7
  402c08:	9726      	str	r7, [sp, #152]	; 0x98
  402c0a:	9427      	str	r4, [sp, #156]	; 0x9c
  402c0c:	f8c8 6000 	str.w	r6, [r8]
  402c10:	f8c8 3004 	str.w	r3, [r8, #4]
  402c14:	f300 8127 	bgt.w	402e66 <_svfprintf_r+0xc86>
  402c18:	f108 0808 	add.w	r8, r8, #8
  402c1c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  402c1e:	f8c8 2004 	str.w	r2, [r8, #4]
  402c22:	3701      	adds	r7, #1
  402c24:	4414      	add	r4, r2
  402c26:	ab21      	add	r3, sp, #132	; 0x84
  402c28:	2f07      	cmp	r7, #7
  402c2a:	9427      	str	r4, [sp, #156]	; 0x9c
  402c2c:	9726      	str	r7, [sp, #152]	; 0x98
  402c2e:	f8c8 3000 	str.w	r3, [r8]
  402c32:	f77f acb3 	ble.w	40259c <_svfprintf_r+0x3bc>
  402c36:	aa25      	add	r2, sp, #148	; 0x94
  402c38:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402c3a:	980c      	ldr	r0, [sp, #48]	; 0x30
  402c3c:	f002 fc2e 	bl	40549c <__ssprint_r>
  402c40:	2800      	cmp	r0, #0
  402c42:	f47f ab9f 	bne.w	402384 <_svfprintf_r+0x1a4>
  402c46:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402c48:	46c8      	mov	r8, r9
  402c4a:	e4a9      	b.n	4025a0 <_svfprintf_r+0x3c0>
  402c4c:	aa25      	add	r2, sp, #148	; 0x94
  402c4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402c50:	980c      	ldr	r0, [sp, #48]	; 0x30
  402c52:	f002 fc23 	bl	40549c <__ssprint_r>
  402c56:	2800      	cmp	r0, #0
  402c58:	f43f aceb 	beq.w	402632 <_svfprintf_r+0x452>
  402c5c:	f7ff bb92 	b.w	402384 <_svfprintf_r+0x1a4>
  402c60:	f8dd b01c 	ldr.w	fp, [sp, #28]
  402c64:	2b01      	cmp	r3, #1
  402c66:	f000 8134 	beq.w	402ed2 <_svfprintf_r+0xcf2>
  402c6a:	2b02      	cmp	r3, #2
  402c6c:	d125      	bne.n	402cba <_svfprintf_r+0xada>
  402c6e:	f8cd b01c 	str.w	fp, [sp, #28]
  402c72:	2400      	movs	r4, #0
  402c74:	2500      	movs	r5, #0
  402c76:	e61e      	b.n	4028b6 <_svfprintf_r+0x6d6>
  402c78:	aa25      	add	r2, sp, #148	; 0x94
  402c7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402c7c:	980c      	ldr	r0, [sp, #48]	; 0x30
  402c7e:	f002 fc0d 	bl	40549c <__ssprint_r>
  402c82:	2800      	cmp	r0, #0
  402c84:	f47f ab7e 	bne.w	402384 <_svfprintf_r+0x1a4>
  402c88:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402c8a:	46c8      	mov	r8, r9
  402c8c:	e475      	b.n	40257a <_svfprintf_r+0x39a>
  402c8e:	aa25      	add	r2, sp, #148	; 0x94
  402c90:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402c92:	980c      	ldr	r0, [sp, #48]	; 0x30
  402c94:	f002 fc02 	bl	40549c <__ssprint_r>
  402c98:	2800      	cmp	r0, #0
  402c9a:	f47f ab73 	bne.w	402384 <_svfprintf_r+0x1a4>
  402c9e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402ca0:	46c8      	mov	r8, r9
  402ca2:	e41b      	b.n	4024dc <_svfprintf_r+0x2fc>
  402ca4:	aa25      	add	r2, sp, #148	; 0x94
  402ca6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402ca8:	980c      	ldr	r0, [sp, #48]	; 0x30
  402caa:	f002 fbf7 	bl	40549c <__ssprint_r>
  402cae:	2800      	cmp	r0, #0
  402cb0:	f47f ab68 	bne.w	402384 <_svfprintf_r+0x1a4>
  402cb4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402cb6:	46c8      	mov	r8, r9
  402cb8:	e420      	b.n	4024fc <_svfprintf_r+0x31c>
  402cba:	f8cd b01c 	str.w	fp, [sp, #28]
  402cbe:	2400      	movs	r4, #0
  402cc0:	2500      	movs	r5, #0
  402cc2:	4649      	mov	r1, r9
  402cc4:	e000      	b.n	402cc8 <_svfprintf_r+0xae8>
  402cc6:	4631      	mov	r1, r6
  402cc8:	08e2      	lsrs	r2, r4, #3
  402cca:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  402cce:	08e8      	lsrs	r0, r5, #3
  402cd0:	f004 0307 	and.w	r3, r4, #7
  402cd4:	4605      	mov	r5, r0
  402cd6:	4614      	mov	r4, r2
  402cd8:	3330      	adds	r3, #48	; 0x30
  402cda:	ea54 0205 	orrs.w	r2, r4, r5
  402cde:	f801 3c01 	strb.w	r3, [r1, #-1]
  402ce2:	f101 36ff 	add.w	r6, r1, #4294967295
  402ce6:	d1ee      	bne.n	402cc6 <_svfprintf_r+0xae6>
  402ce8:	9a07      	ldr	r2, [sp, #28]
  402cea:	07d2      	lsls	r2, r2, #31
  402cec:	f57f adf3 	bpl.w	4028d6 <_svfprintf_r+0x6f6>
  402cf0:	2b30      	cmp	r3, #48	; 0x30
  402cf2:	f43f adf0 	beq.w	4028d6 <_svfprintf_r+0x6f6>
  402cf6:	3902      	subs	r1, #2
  402cf8:	2330      	movs	r3, #48	; 0x30
  402cfa:	f806 3c01 	strb.w	r3, [r6, #-1]
  402cfe:	eba9 0301 	sub.w	r3, r9, r1
  402d02:	930e      	str	r3, [sp, #56]	; 0x38
  402d04:	460e      	mov	r6, r1
  402d06:	f7ff bb7b 	b.w	402400 <_svfprintf_r+0x220>
  402d0a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  402d0c:	2900      	cmp	r1, #0
  402d0e:	f340 822e 	ble.w	40316e <_svfprintf_r+0xf8e>
  402d12:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402d14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402d16:	4293      	cmp	r3, r2
  402d18:	bfa8      	it	ge
  402d1a:	4613      	movge	r3, r2
  402d1c:	2b00      	cmp	r3, #0
  402d1e:	461f      	mov	r7, r3
  402d20:	dd0d      	ble.n	402d3e <_svfprintf_r+0xb5e>
  402d22:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402d24:	f8c8 6000 	str.w	r6, [r8]
  402d28:	3301      	adds	r3, #1
  402d2a:	443c      	add	r4, r7
  402d2c:	2b07      	cmp	r3, #7
  402d2e:	9427      	str	r4, [sp, #156]	; 0x9c
  402d30:	f8c8 7004 	str.w	r7, [r8, #4]
  402d34:	9326      	str	r3, [sp, #152]	; 0x98
  402d36:	f300 831f 	bgt.w	403378 <_svfprintf_r+0x1198>
  402d3a:	f108 0808 	add.w	r8, r8, #8
  402d3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402d40:	2f00      	cmp	r7, #0
  402d42:	bfa8      	it	ge
  402d44:	1bdb      	subge	r3, r3, r7
  402d46:	2b00      	cmp	r3, #0
  402d48:	461f      	mov	r7, r3
  402d4a:	f340 80d6 	ble.w	402efa <_svfprintf_r+0xd1a>
  402d4e:	2f10      	cmp	r7, #16
  402d50:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402d52:	4d31      	ldr	r5, [pc, #196]	; (402e18 <_svfprintf_r+0xc38>)
  402d54:	f340 81ed 	ble.w	403132 <_svfprintf_r+0xf52>
  402d58:	4642      	mov	r2, r8
  402d5a:	4621      	mov	r1, r4
  402d5c:	46b0      	mov	r8, r6
  402d5e:	f04f 0b10 	mov.w	fp, #16
  402d62:	462e      	mov	r6, r5
  402d64:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402d66:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402d68:	e004      	b.n	402d74 <_svfprintf_r+0xb94>
  402d6a:	3208      	adds	r2, #8
  402d6c:	3f10      	subs	r7, #16
  402d6e:	2f10      	cmp	r7, #16
  402d70:	f340 81db 	ble.w	40312a <_svfprintf_r+0xf4a>
  402d74:	3301      	adds	r3, #1
  402d76:	3110      	adds	r1, #16
  402d78:	2b07      	cmp	r3, #7
  402d7a:	9127      	str	r1, [sp, #156]	; 0x9c
  402d7c:	9326      	str	r3, [sp, #152]	; 0x98
  402d7e:	e882 0840 	stmia.w	r2, {r6, fp}
  402d82:	ddf2      	ble.n	402d6a <_svfprintf_r+0xb8a>
  402d84:	aa25      	add	r2, sp, #148	; 0x94
  402d86:	4629      	mov	r1, r5
  402d88:	4620      	mov	r0, r4
  402d8a:	f002 fb87 	bl	40549c <__ssprint_r>
  402d8e:	2800      	cmp	r0, #0
  402d90:	f47f aaf8 	bne.w	402384 <_svfprintf_r+0x1a4>
  402d94:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402d96:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402d98:	464a      	mov	r2, r9
  402d9a:	e7e7      	b.n	402d6c <_svfprintf_r+0xb8c>
  402d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402d9e:	930e      	str	r3, [sp, #56]	; 0x38
  402da0:	464e      	mov	r6, r9
  402da2:	f7ff bb2d 	b.w	402400 <_svfprintf_r+0x220>
  402da6:	2d00      	cmp	r5, #0
  402da8:	bf08      	it	eq
  402daa:	2c0a      	cmpeq	r4, #10
  402dac:	f0c0 808f 	bcc.w	402ece <_svfprintf_r+0xcee>
  402db0:	464e      	mov	r6, r9
  402db2:	4620      	mov	r0, r4
  402db4:	4629      	mov	r1, r5
  402db6:	220a      	movs	r2, #10
  402db8:	2300      	movs	r3, #0
  402dba:	f7fe ffed 	bl	401d98 <__aeabi_uldivmod>
  402dbe:	3230      	adds	r2, #48	; 0x30
  402dc0:	f806 2d01 	strb.w	r2, [r6, #-1]!
  402dc4:	4620      	mov	r0, r4
  402dc6:	4629      	mov	r1, r5
  402dc8:	2300      	movs	r3, #0
  402dca:	220a      	movs	r2, #10
  402dcc:	f7fe ffe4 	bl	401d98 <__aeabi_uldivmod>
  402dd0:	4604      	mov	r4, r0
  402dd2:	460d      	mov	r5, r1
  402dd4:	ea54 0305 	orrs.w	r3, r4, r5
  402dd8:	d1eb      	bne.n	402db2 <_svfprintf_r+0xbd2>
  402dda:	eba9 0306 	sub.w	r3, r9, r6
  402dde:	930e      	str	r3, [sp, #56]	; 0x38
  402de0:	f7ff bb0e 	b.w	402400 <_svfprintf_r+0x220>
  402de4:	aa25      	add	r2, sp, #148	; 0x94
  402de6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402de8:	980c      	ldr	r0, [sp, #48]	; 0x30
  402dea:	f002 fb57 	bl	40549c <__ssprint_r>
  402dee:	2800      	cmp	r0, #0
  402df0:	f47f aac8 	bne.w	402384 <_svfprintf_r+0x1a4>
  402df4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402df8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402dfa:	46c8      	mov	r8, r9
  402dfc:	f7ff bb5e 	b.w	4024bc <_svfprintf_r+0x2dc>
  402e00:	1e5e      	subs	r6, r3, #1
  402e02:	2e00      	cmp	r6, #0
  402e04:	f77f af0a 	ble.w	402c1c <_svfprintf_r+0xa3c>
  402e08:	2e10      	cmp	r6, #16
  402e0a:	4d03      	ldr	r5, [pc, #12]	; (402e18 <_svfprintf_r+0xc38>)
  402e0c:	dd22      	ble.n	402e54 <_svfprintf_r+0xc74>
  402e0e:	4622      	mov	r2, r4
  402e10:	f04f 0b10 	mov.w	fp, #16
  402e14:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402e16:	e006      	b.n	402e26 <_svfprintf_r+0xc46>
  402e18:	00407170 	.word	0x00407170
  402e1c:	3e10      	subs	r6, #16
  402e1e:	2e10      	cmp	r6, #16
  402e20:	f108 0808 	add.w	r8, r8, #8
  402e24:	dd15      	ble.n	402e52 <_svfprintf_r+0xc72>
  402e26:	3701      	adds	r7, #1
  402e28:	3210      	adds	r2, #16
  402e2a:	2f07      	cmp	r7, #7
  402e2c:	9227      	str	r2, [sp, #156]	; 0x9c
  402e2e:	9726      	str	r7, [sp, #152]	; 0x98
  402e30:	e888 0820 	stmia.w	r8, {r5, fp}
  402e34:	ddf2      	ble.n	402e1c <_svfprintf_r+0xc3c>
  402e36:	aa25      	add	r2, sp, #148	; 0x94
  402e38:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402e3a:	4620      	mov	r0, r4
  402e3c:	f002 fb2e 	bl	40549c <__ssprint_r>
  402e40:	2800      	cmp	r0, #0
  402e42:	f47f aa9f 	bne.w	402384 <_svfprintf_r+0x1a4>
  402e46:	3e10      	subs	r6, #16
  402e48:	2e10      	cmp	r6, #16
  402e4a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402e4c:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402e4e:	46c8      	mov	r8, r9
  402e50:	dce9      	bgt.n	402e26 <_svfprintf_r+0xc46>
  402e52:	4614      	mov	r4, r2
  402e54:	3701      	adds	r7, #1
  402e56:	4434      	add	r4, r6
  402e58:	2f07      	cmp	r7, #7
  402e5a:	9427      	str	r4, [sp, #156]	; 0x9c
  402e5c:	9726      	str	r7, [sp, #152]	; 0x98
  402e5e:	e888 0060 	stmia.w	r8, {r5, r6}
  402e62:	f77f aed9 	ble.w	402c18 <_svfprintf_r+0xa38>
  402e66:	aa25      	add	r2, sp, #148	; 0x94
  402e68:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402e6a:	980c      	ldr	r0, [sp, #48]	; 0x30
  402e6c:	f002 fb16 	bl	40549c <__ssprint_r>
  402e70:	2800      	cmp	r0, #0
  402e72:	f47f aa87 	bne.w	402384 <_svfprintf_r+0x1a4>
  402e76:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402e78:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402e7a:	46c8      	mov	r8, r9
  402e7c:	e6ce      	b.n	402c1c <_svfprintf_r+0xa3c>
  402e7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402e80:	6814      	ldr	r4, [r2, #0]
  402e82:	4613      	mov	r3, r2
  402e84:	3304      	adds	r3, #4
  402e86:	17e5      	asrs	r5, r4, #31
  402e88:	930f      	str	r3, [sp, #60]	; 0x3c
  402e8a:	4622      	mov	r2, r4
  402e8c:	462b      	mov	r3, r5
  402e8e:	e4fa      	b.n	402886 <_svfprintf_r+0x6a6>
  402e90:	3204      	adds	r2, #4
  402e92:	681c      	ldr	r4, [r3, #0]
  402e94:	920f      	str	r2, [sp, #60]	; 0x3c
  402e96:	2301      	movs	r3, #1
  402e98:	2500      	movs	r5, #0
  402e9a:	f7ff ba94 	b.w	4023c6 <_svfprintf_r+0x1e6>
  402e9e:	681c      	ldr	r4, [r3, #0]
  402ea0:	3304      	adds	r3, #4
  402ea2:	930f      	str	r3, [sp, #60]	; 0x3c
  402ea4:	2500      	movs	r5, #0
  402ea6:	e421      	b.n	4026ec <_svfprintf_r+0x50c>
  402ea8:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402eaa:	460a      	mov	r2, r1
  402eac:	3204      	adds	r2, #4
  402eae:	680c      	ldr	r4, [r1, #0]
  402eb0:	920f      	str	r2, [sp, #60]	; 0x3c
  402eb2:	2500      	movs	r5, #0
  402eb4:	f7ff ba87 	b.w	4023c6 <_svfprintf_r+0x1e6>
  402eb8:	4614      	mov	r4, r2
  402eba:	3301      	adds	r3, #1
  402ebc:	4434      	add	r4, r6
  402ebe:	2b07      	cmp	r3, #7
  402ec0:	9427      	str	r4, [sp, #156]	; 0x9c
  402ec2:	9326      	str	r3, [sp, #152]	; 0x98
  402ec4:	e888 0060 	stmia.w	r8, {r5, r6}
  402ec8:	f77f ab68 	ble.w	40259c <_svfprintf_r+0x3bc>
  402ecc:	e6b3      	b.n	402c36 <_svfprintf_r+0xa56>
  402ece:	f8dd b01c 	ldr.w	fp, [sp, #28]
  402ed2:	f8cd b01c 	str.w	fp, [sp, #28]
  402ed6:	ae42      	add	r6, sp, #264	; 0x108
  402ed8:	3430      	adds	r4, #48	; 0x30
  402eda:	2301      	movs	r3, #1
  402edc:	f806 4d41 	strb.w	r4, [r6, #-65]!
  402ee0:	930e      	str	r3, [sp, #56]	; 0x38
  402ee2:	f7ff ba8d 	b.w	402400 <_svfprintf_r+0x220>
  402ee6:	aa25      	add	r2, sp, #148	; 0x94
  402ee8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402eea:	980c      	ldr	r0, [sp, #48]	; 0x30
  402eec:	f002 fad6 	bl	40549c <__ssprint_r>
  402ef0:	2800      	cmp	r0, #0
  402ef2:	f47f aa47 	bne.w	402384 <_svfprintf_r+0x1a4>
  402ef6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402ef8:	46c8      	mov	r8, r9
  402efa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  402efc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402efe:	429a      	cmp	r2, r3
  402f00:	db44      	blt.n	402f8c <_svfprintf_r+0xdac>
  402f02:	9b07      	ldr	r3, [sp, #28]
  402f04:	07d9      	lsls	r1, r3, #31
  402f06:	d441      	bmi.n	402f8c <_svfprintf_r+0xdac>
  402f08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402f0a:	9812      	ldr	r0, [sp, #72]	; 0x48
  402f0c:	1a9a      	subs	r2, r3, r2
  402f0e:	1a1d      	subs	r5, r3, r0
  402f10:	4295      	cmp	r5, r2
  402f12:	bfa8      	it	ge
  402f14:	4615      	movge	r5, r2
  402f16:	2d00      	cmp	r5, #0
  402f18:	dd0e      	ble.n	402f38 <_svfprintf_r+0xd58>
  402f1a:	9926      	ldr	r1, [sp, #152]	; 0x98
  402f1c:	f8c8 5004 	str.w	r5, [r8, #4]
  402f20:	3101      	adds	r1, #1
  402f22:	4406      	add	r6, r0
  402f24:	442c      	add	r4, r5
  402f26:	2907      	cmp	r1, #7
  402f28:	f8c8 6000 	str.w	r6, [r8]
  402f2c:	9427      	str	r4, [sp, #156]	; 0x9c
  402f2e:	9126      	str	r1, [sp, #152]	; 0x98
  402f30:	f300 823b 	bgt.w	4033aa <_svfprintf_r+0x11ca>
  402f34:	f108 0808 	add.w	r8, r8, #8
  402f38:	2d00      	cmp	r5, #0
  402f3a:	bfac      	ite	ge
  402f3c:	1b56      	subge	r6, r2, r5
  402f3e:	4616      	movlt	r6, r2
  402f40:	2e00      	cmp	r6, #0
  402f42:	f77f ab2d 	ble.w	4025a0 <_svfprintf_r+0x3c0>
  402f46:	2e10      	cmp	r6, #16
  402f48:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402f4a:	4db0      	ldr	r5, [pc, #704]	; (40320c <_svfprintf_r+0x102c>)
  402f4c:	ddb5      	ble.n	402eba <_svfprintf_r+0xcda>
  402f4e:	4622      	mov	r2, r4
  402f50:	2710      	movs	r7, #16
  402f52:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  402f56:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  402f58:	e004      	b.n	402f64 <_svfprintf_r+0xd84>
  402f5a:	f108 0808 	add.w	r8, r8, #8
  402f5e:	3e10      	subs	r6, #16
  402f60:	2e10      	cmp	r6, #16
  402f62:	dda9      	ble.n	402eb8 <_svfprintf_r+0xcd8>
  402f64:	3301      	adds	r3, #1
  402f66:	3210      	adds	r2, #16
  402f68:	2b07      	cmp	r3, #7
  402f6a:	9227      	str	r2, [sp, #156]	; 0x9c
  402f6c:	9326      	str	r3, [sp, #152]	; 0x98
  402f6e:	e888 00a0 	stmia.w	r8, {r5, r7}
  402f72:	ddf2      	ble.n	402f5a <_svfprintf_r+0xd7a>
  402f74:	aa25      	add	r2, sp, #148	; 0x94
  402f76:	4621      	mov	r1, r4
  402f78:	4658      	mov	r0, fp
  402f7a:	f002 fa8f 	bl	40549c <__ssprint_r>
  402f7e:	2800      	cmp	r0, #0
  402f80:	f47f aa00 	bne.w	402384 <_svfprintf_r+0x1a4>
  402f84:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402f86:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402f88:	46c8      	mov	r8, r9
  402f8a:	e7e8      	b.n	402f5e <_svfprintf_r+0xd7e>
  402f8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402f8e:	9819      	ldr	r0, [sp, #100]	; 0x64
  402f90:	991a      	ldr	r1, [sp, #104]	; 0x68
  402f92:	f8c8 1000 	str.w	r1, [r8]
  402f96:	3301      	adds	r3, #1
  402f98:	4404      	add	r4, r0
  402f9a:	2b07      	cmp	r3, #7
  402f9c:	9427      	str	r4, [sp, #156]	; 0x9c
  402f9e:	f8c8 0004 	str.w	r0, [r8, #4]
  402fa2:	9326      	str	r3, [sp, #152]	; 0x98
  402fa4:	f300 81f5 	bgt.w	403392 <_svfprintf_r+0x11b2>
  402fa8:	f108 0808 	add.w	r8, r8, #8
  402fac:	e7ac      	b.n	402f08 <_svfprintf_r+0xd28>
  402fae:	9b07      	ldr	r3, [sp, #28]
  402fb0:	07da      	lsls	r2, r3, #31
  402fb2:	f53f adfe 	bmi.w	402bb2 <_svfprintf_r+0x9d2>
  402fb6:	3701      	adds	r7, #1
  402fb8:	3401      	adds	r4, #1
  402fba:	2301      	movs	r3, #1
  402fbc:	2f07      	cmp	r7, #7
  402fbe:	9427      	str	r4, [sp, #156]	; 0x9c
  402fc0:	9726      	str	r7, [sp, #152]	; 0x98
  402fc2:	f8c8 6000 	str.w	r6, [r8]
  402fc6:	f8c8 3004 	str.w	r3, [r8, #4]
  402fca:	f77f ae25 	ble.w	402c18 <_svfprintf_r+0xa38>
  402fce:	e74a      	b.n	402e66 <_svfprintf_r+0xc86>
  402fd0:	aa25      	add	r2, sp, #148	; 0x94
  402fd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402fd4:	980c      	ldr	r0, [sp, #48]	; 0x30
  402fd6:	f002 fa61 	bl	40549c <__ssprint_r>
  402fda:	2800      	cmp	r0, #0
  402fdc:	f47f a9d2 	bne.w	402384 <_svfprintf_r+0x1a4>
  402fe0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402fe2:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402fe4:	46c8      	mov	r8, r9
  402fe6:	e5f2      	b.n	402bce <_svfprintf_r+0x9ee>
  402fe8:	aa25      	add	r2, sp, #148	; 0x94
  402fea:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402fec:	980c      	ldr	r0, [sp, #48]	; 0x30
  402fee:	f002 fa55 	bl	40549c <__ssprint_r>
  402ff2:	2800      	cmp	r0, #0
  402ff4:	f47f a9c6 	bne.w	402384 <_svfprintf_r+0x1a4>
  402ff8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402ffa:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402ffc:	46c8      	mov	r8, r9
  402ffe:	e5f5      	b.n	402bec <_svfprintf_r+0xa0c>
  403000:	464e      	mov	r6, r9
  403002:	f7ff b9fd 	b.w	402400 <_svfprintf_r+0x220>
  403006:	aa25      	add	r2, sp, #148	; 0x94
  403008:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40300a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40300c:	f002 fa46 	bl	40549c <__ssprint_r>
  403010:	2800      	cmp	r0, #0
  403012:	f47f a9b7 	bne.w	402384 <_svfprintf_r+0x1a4>
  403016:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403018:	46c8      	mov	r8, r9
  40301a:	f7ff ba72 	b.w	402502 <_svfprintf_r+0x322>
  40301e:	9c15      	ldr	r4, [sp, #84]	; 0x54
  403020:	4622      	mov	r2, r4
  403022:	4620      	mov	r0, r4
  403024:	9c14      	ldr	r4, [sp, #80]	; 0x50
  403026:	4623      	mov	r3, r4
  403028:	4621      	mov	r1, r4
  40302a:	f003 fafd 	bl	406628 <__aeabi_dcmpun>
  40302e:	2800      	cmp	r0, #0
  403030:	f040 8286 	bne.w	403540 <_svfprintf_r+0x1360>
  403034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403036:	3301      	adds	r3, #1
  403038:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40303a:	f023 0320 	bic.w	r3, r3, #32
  40303e:	930e      	str	r3, [sp, #56]	; 0x38
  403040:	f000 81e2 	beq.w	403408 <_svfprintf_r+0x1228>
  403044:	2b47      	cmp	r3, #71	; 0x47
  403046:	f000 811e 	beq.w	403286 <_svfprintf_r+0x10a6>
  40304a:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40304e:	9307      	str	r3, [sp, #28]
  403050:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403052:	1e1f      	subs	r7, r3, #0
  403054:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403056:	9308      	str	r3, [sp, #32]
  403058:	bfbb      	ittet	lt
  40305a:	463b      	movlt	r3, r7
  40305c:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  403060:	2300      	movge	r3, #0
  403062:	232d      	movlt	r3, #45	; 0x2d
  403064:	9310      	str	r3, [sp, #64]	; 0x40
  403066:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403068:	2b66      	cmp	r3, #102	; 0x66
  40306a:	f000 81bb 	beq.w	4033e4 <_svfprintf_r+0x1204>
  40306e:	2b46      	cmp	r3, #70	; 0x46
  403070:	f000 80df 	beq.w	403232 <_svfprintf_r+0x1052>
  403074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403076:	9a08      	ldr	r2, [sp, #32]
  403078:	2b45      	cmp	r3, #69	; 0x45
  40307a:	bf0c      	ite	eq
  40307c:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40307e:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  403080:	a823      	add	r0, sp, #140	; 0x8c
  403082:	a920      	add	r1, sp, #128	; 0x80
  403084:	bf08      	it	eq
  403086:	1c5d      	addeq	r5, r3, #1
  403088:	9004      	str	r0, [sp, #16]
  40308a:	9103      	str	r1, [sp, #12]
  40308c:	a81f      	add	r0, sp, #124	; 0x7c
  40308e:	2102      	movs	r1, #2
  403090:	463b      	mov	r3, r7
  403092:	9002      	str	r0, [sp, #8]
  403094:	9501      	str	r5, [sp, #4]
  403096:	9100      	str	r1, [sp, #0]
  403098:	980c      	ldr	r0, [sp, #48]	; 0x30
  40309a:	f000 fb75 	bl	403788 <_dtoa_r>
  40309e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4030a0:	2b67      	cmp	r3, #103	; 0x67
  4030a2:	4606      	mov	r6, r0
  4030a4:	f040 81e0 	bne.w	403468 <_svfprintf_r+0x1288>
  4030a8:	f01b 0f01 	tst.w	fp, #1
  4030ac:	f000 8246 	beq.w	40353c <_svfprintf_r+0x135c>
  4030b0:	1974      	adds	r4, r6, r5
  4030b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4030b4:	9808      	ldr	r0, [sp, #32]
  4030b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4030b8:	4639      	mov	r1, r7
  4030ba:	f003 fa83 	bl	4065c4 <__aeabi_dcmpeq>
  4030be:	2800      	cmp	r0, #0
  4030c0:	f040 8165 	bne.w	40338e <_svfprintf_r+0x11ae>
  4030c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4030c6:	42a3      	cmp	r3, r4
  4030c8:	d206      	bcs.n	4030d8 <_svfprintf_r+0xef8>
  4030ca:	2130      	movs	r1, #48	; 0x30
  4030cc:	1c5a      	adds	r2, r3, #1
  4030ce:	9223      	str	r2, [sp, #140]	; 0x8c
  4030d0:	7019      	strb	r1, [r3, #0]
  4030d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4030d4:	429c      	cmp	r4, r3
  4030d6:	d8f9      	bhi.n	4030cc <_svfprintf_r+0xeec>
  4030d8:	1b9b      	subs	r3, r3, r6
  4030da:	9313      	str	r3, [sp, #76]	; 0x4c
  4030dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4030de:	2b47      	cmp	r3, #71	; 0x47
  4030e0:	f000 80e9 	beq.w	4032b6 <_svfprintf_r+0x10d6>
  4030e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4030e6:	2b65      	cmp	r3, #101	; 0x65
  4030e8:	f340 81cd 	ble.w	403486 <_svfprintf_r+0x12a6>
  4030ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4030ee:	2b66      	cmp	r3, #102	; 0x66
  4030f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4030f2:	9312      	str	r3, [sp, #72]	; 0x48
  4030f4:	f000 819e 	beq.w	403434 <_svfprintf_r+0x1254>
  4030f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4030fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4030fc:	4619      	mov	r1, r3
  4030fe:	4291      	cmp	r1, r2
  403100:	f300 818a 	bgt.w	403418 <_svfprintf_r+0x1238>
  403104:	f01b 0f01 	tst.w	fp, #1
  403108:	f040 8213 	bne.w	403532 <_svfprintf_r+0x1352>
  40310c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  403110:	9308      	str	r3, [sp, #32]
  403112:	2367      	movs	r3, #103	; 0x67
  403114:	920e      	str	r2, [sp, #56]	; 0x38
  403116:	9311      	str	r3, [sp, #68]	; 0x44
  403118:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40311a:	2b00      	cmp	r3, #0
  40311c:	f040 80c4 	bne.w	4032a8 <_svfprintf_r+0x10c8>
  403120:	930a      	str	r3, [sp, #40]	; 0x28
  403122:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403126:	f7ff b973 	b.w	402410 <_svfprintf_r+0x230>
  40312a:	4635      	mov	r5, r6
  40312c:	460c      	mov	r4, r1
  40312e:	4646      	mov	r6, r8
  403130:	4690      	mov	r8, r2
  403132:	3301      	adds	r3, #1
  403134:	443c      	add	r4, r7
  403136:	2b07      	cmp	r3, #7
  403138:	9427      	str	r4, [sp, #156]	; 0x9c
  40313a:	9326      	str	r3, [sp, #152]	; 0x98
  40313c:	e888 00a0 	stmia.w	r8, {r5, r7}
  403140:	f73f aed1 	bgt.w	402ee6 <_svfprintf_r+0xd06>
  403144:	f108 0808 	add.w	r8, r8, #8
  403148:	e6d7      	b.n	402efa <_svfprintf_r+0xd1a>
  40314a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40314c:	6813      	ldr	r3, [r2, #0]
  40314e:	3204      	adds	r2, #4
  403150:	920f      	str	r2, [sp, #60]	; 0x3c
  403152:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403154:	601a      	str	r2, [r3, #0]
  403156:	f7ff b86a 	b.w	40222e <_svfprintf_r+0x4e>
  40315a:	aa25      	add	r2, sp, #148	; 0x94
  40315c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40315e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403160:	f002 f99c 	bl	40549c <__ssprint_r>
  403164:	2800      	cmp	r0, #0
  403166:	f47f a90d 	bne.w	402384 <_svfprintf_r+0x1a4>
  40316a:	46c8      	mov	r8, r9
  40316c:	e48d      	b.n	402a8a <_svfprintf_r+0x8aa>
  40316e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403170:	4a27      	ldr	r2, [pc, #156]	; (403210 <_svfprintf_r+0x1030>)
  403172:	f8c8 2000 	str.w	r2, [r8]
  403176:	3301      	adds	r3, #1
  403178:	3401      	adds	r4, #1
  40317a:	2201      	movs	r2, #1
  40317c:	2b07      	cmp	r3, #7
  40317e:	9427      	str	r4, [sp, #156]	; 0x9c
  403180:	9326      	str	r3, [sp, #152]	; 0x98
  403182:	f8c8 2004 	str.w	r2, [r8, #4]
  403186:	dc72      	bgt.n	40326e <_svfprintf_r+0x108e>
  403188:	f108 0808 	add.w	r8, r8, #8
  40318c:	b929      	cbnz	r1, 40319a <_svfprintf_r+0xfba>
  40318e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403190:	b91b      	cbnz	r3, 40319a <_svfprintf_r+0xfba>
  403192:	9b07      	ldr	r3, [sp, #28]
  403194:	07d8      	lsls	r0, r3, #31
  403196:	f57f aa03 	bpl.w	4025a0 <_svfprintf_r+0x3c0>
  40319a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40319c:	9819      	ldr	r0, [sp, #100]	; 0x64
  40319e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4031a0:	f8c8 2000 	str.w	r2, [r8]
  4031a4:	3301      	adds	r3, #1
  4031a6:	4602      	mov	r2, r0
  4031a8:	4422      	add	r2, r4
  4031aa:	2b07      	cmp	r3, #7
  4031ac:	9227      	str	r2, [sp, #156]	; 0x9c
  4031ae:	f8c8 0004 	str.w	r0, [r8, #4]
  4031b2:	9326      	str	r3, [sp, #152]	; 0x98
  4031b4:	f300 818d 	bgt.w	4034d2 <_svfprintf_r+0x12f2>
  4031b8:	f108 0808 	add.w	r8, r8, #8
  4031bc:	2900      	cmp	r1, #0
  4031be:	f2c0 8165 	blt.w	40348c <_svfprintf_r+0x12ac>
  4031c2:	9913      	ldr	r1, [sp, #76]	; 0x4c
  4031c4:	f8c8 6000 	str.w	r6, [r8]
  4031c8:	3301      	adds	r3, #1
  4031ca:	188c      	adds	r4, r1, r2
  4031cc:	2b07      	cmp	r3, #7
  4031ce:	9427      	str	r4, [sp, #156]	; 0x9c
  4031d0:	9326      	str	r3, [sp, #152]	; 0x98
  4031d2:	f8c8 1004 	str.w	r1, [r8, #4]
  4031d6:	f77f a9e1 	ble.w	40259c <_svfprintf_r+0x3bc>
  4031da:	e52c      	b.n	402c36 <_svfprintf_r+0xa56>
  4031dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4031de:	9909      	ldr	r1, [sp, #36]	; 0x24
  4031e0:	6813      	ldr	r3, [r2, #0]
  4031e2:	17cd      	asrs	r5, r1, #31
  4031e4:	4608      	mov	r0, r1
  4031e6:	3204      	adds	r2, #4
  4031e8:	4629      	mov	r1, r5
  4031ea:	920f      	str	r2, [sp, #60]	; 0x3c
  4031ec:	e9c3 0100 	strd	r0, r1, [r3]
  4031f0:	f7ff b81d 	b.w	40222e <_svfprintf_r+0x4e>
  4031f4:	aa25      	add	r2, sp, #148	; 0x94
  4031f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4031f8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4031fa:	f002 f94f 	bl	40549c <__ssprint_r>
  4031fe:	2800      	cmp	r0, #0
  403200:	f47f a8c0 	bne.w	402384 <_svfprintf_r+0x1a4>
  403204:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403206:	46c8      	mov	r8, r9
  403208:	e458      	b.n	402abc <_svfprintf_r+0x8dc>
  40320a:	bf00      	nop
  40320c:	00407170 	.word	0x00407170
  403210:	0040715c 	.word	0x0040715c
  403214:	2140      	movs	r1, #64	; 0x40
  403216:	980c      	ldr	r0, [sp, #48]	; 0x30
  403218:	f001 fa0c 	bl	404634 <_malloc_r>
  40321c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40321e:	6010      	str	r0, [r2, #0]
  403220:	6110      	str	r0, [r2, #16]
  403222:	2800      	cmp	r0, #0
  403224:	f000 81f2 	beq.w	40360c <_svfprintf_r+0x142c>
  403228:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40322a:	2340      	movs	r3, #64	; 0x40
  40322c:	6153      	str	r3, [r2, #20]
  40322e:	f7fe bfee 	b.w	40220e <_svfprintf_r+0x2e>
  403232:	a823      	add	r0, sp, #140	; 0x8c
  403234:	a920      	add	r1, sp, #128	; 0x80
  403236:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403238:	9004      	str	r0, [sp, #16]
  40323a:	9103      	str	r1, [sp, #12]
  40323c:	a81f      	add	r0, sp, #124	; 0x7c
  40323e:	2103      	movs	r1, #3
  403240:	9002      	str	r0, [sp, #8]
  403242:	9a08      	ldr	r2, [sp, #32]
  403244:	9401      	str	r4, [sp, #4]
  403246:	463b      	mov	r3, r7
  403248:	9100      	str	r1, [sp, #0]
  40324a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40324c:	f000 fa9c 	bl	403788 <_dtoa_r>
  403250:	4625      	mov	r5, r4
  403252:	4606      	mov	r6, r0
  403254:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403256:	2b46      	cmp	r3, #70	; 0x46
  403258:	eb06 0405 	add.w	r4, r6, r5
  40325c:	f47f af29 	bne.w	4030b2 <_svfprintf_r+0xed2>
  403260:	7833      	ldrb	r3, [r6, #0]
  403262:	2b30      	cmp	r3, #48	; 0x30
  403264:	f000 8178 	beq.w	403558 <_svfprintf_r+0x1378>
  403268:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  40326a:	442c      	add	r4, r5
  40326c:	e721      	b.n	4030b2 <_svfprintf_r+0xed2>
  40326e:	aa25      	add	r2, sp, #148	; 0x94
  403270:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403272:	980c      	ldr	r0, [sp, #48]	; 0x30
  403274:	f002 f912 	bl	40549c <__ssprint_r>
  403278:	2800      	cmp	r0, #0
  40327a:	f47f a883 	bne.w	402384 <_svfprintf_r+0x1a4>
  40327e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  403280:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403282:	46c8      	mov	r8, r9
  403284:	e782      	b.n	40318c <_svfprintf_r+0xfac>
  403286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403288:	2b00      	cmp	r3, #0
  40328a:	bf08      	it	eq
  40328c:	2301      	moveq	r3, #1
  40328e:	930a      	str	r3, [sp, #40]	; 0x28
  403290:	e6db      	b.n	40304a <_svfprintf_r+0xe6a>
  403292:	4630      	mov	r0, r6
  403294:	940a      	str	r4, [sp, #40]	; 0x28
  403296:	f002 f893 	bl	4053c0 <strlen>
  40329a:	950f      	str	r5, [sp, #60]	; 0x3c
  40329c:	900e      	str	r0, [sp, #56]	; 0x38
  40329e:	f8cd b01c 	str.w	fp, [sp, #28]
  4032a2:	4603      	mov	r3, r0
  4032a4:	f7ff b9f9 	b.w	40269a <_svfprintf_r+0x4ba>
  4032a8:	272d      	movs	r7, #45	; 0x2d
  4032aa:	2300      	movs	r3, #0
  4032ac:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4032b0:	930a      	str	r3, [sp, #40]	; 0x28
  4032b2:	f7ff b8ae 	b.w	402412 <_svfprintf_r+0x232>
  4032b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4032b8:	9312      	str	r3, [sp, #72]	; 0x48
  4032ba:	461a      	mov	r2, r3
  4032bc:	3303      	adds	r3, #3
  4032be:	db04      	blt.n	4032ca <_svfprintf_r+0x10ea>
  4032c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4032c2:	4619      	mov	r1, r3
  4032c4:	4291      	cmp	r1, r2
  4032c6:	f6bf af17 	bge.w	4030f8 <_svfprintf_r+0xf18>
  4032ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4032cc:	3b02      	subs	r3, #2
  4032ce:	9311      	str	r3, [sp, #68]	; 0x44
  4032d0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  4032d4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  4032d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4032da:	3b01      	subs	r3, #1
  4032dc:	2b00      	cmp	r3, #0
  4032de:	931f      	str	r3, [sp, #124]	; 0x7c
  4032e0:	bfbd      	ittte	lt
  4032e2:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4032e4:	f1c3 0301 	rsblt	r3, r3, #1
  4032e8:	222d      	movlt	r2, #45	; 0x2d
  4032ea:	222b      	movge	r2, #43	; 0x2b
  4032ec:	2b09      	cmp	r3, #9
  4032ee:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4032f2:	f340 8116 	ble.w	403522 <_svfprintf_r+0x1342>
  4032f6:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4032fa:	4620      	mov	r0, r4
  4032fc:	4dab      	ldr	r5, [pc, #684]	; (4035ac <_svfprintf_r+0x13cc>)
  4032fe:	e000      	b.n	403302 <_svfprintf_r+0x1122>
  403300:	4610      	mov	r0, r2
  403302:	fb85 1203 	smull	r1, r2, r5, r3
  403306:	17d9      	asrs	r1, r3, #31
  403308:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  40330c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  403310:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  403314:	3230      	adds	r2, #48	; 0x30
  403316:	2909      	cmp	r1, #9
  403318:	f800 2c01 	strb.w	r2, [r0, #-1]
  40331c:	460b      	mov	r3, r1
  40331e:	f100 32ff 	add.w	r2, r0, #4294967295
  403322:	dced      	bgt.n	403300 <_svfprintf_r+0x1120>
  403324:	3330      	adds	r3, #48	; 0x30
  403326:	3802      	subs	r0, #2
  403328:	b2d9      	uxtb	r1, r3
  40332a:	4284      	cmp	r4, r0
  40332c:	f802 1c01 	strb.w	r1, [r2, #-1]
  403330:	f240 8165 	bls.w	4035fe <_svfprintf_r+0x141e>
  403334:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  403338:	4613      	mov	r3, r2
  40333a:	e001      	b.n	403340 <_svfprintf_r+0x1160>
  40333c:	f813 1b01 	ldrb.w	r1, [r3], #1
  403340:	f800 1b01 	strb.w	r1, [r0], #1
  403344:	42a3      	cmp	r3, r4
  403346:	d1f9      	bne.n	40333c <_svfprintf_r+0x115c>
  403348:	3301      	adds	r3, #1
  40334a:	1a9b      	subs	r3, r3, r2
  40334c:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  403350:	4413      	add	r3, r2
  403352:	aa21      	add	r2, sp, #132	; 0x84
  403354:	1a9b      	subs	r3, r3, r2
  403356:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403358:	931b      	str	r3, [sp, #108]	; 0x6c
  40335a:	2a01      	cmp	r2, #1
  40335c:	4413      	add	r3, r2
  40335e:	930e      	str	r3, [sp, #56]	; 0x38
  403360:	f340 8119 	ble.w	403596 <_svfprintf_r+0x13b6>
  403364:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403366:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403368:	4413      	add	r3, r2
  40336a:	930e      	str	r3, [sp, #56]	; 0x38
  40336c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403370:	9308      	str	r3, [sp, #32]
  403372:	2300      	movs	r3, #0
  403374:	9312      	str	r3, [sp, #72]	; 0x48
  403376:	e6cf      	b.n	403118 <_svfprintf_r+0xf38>
  403378:	aa25      	add	r2, sp, #148	; 0x94
  40337a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40337c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40337e:	f002 f88d 	bl	40549c <__ssprint_r>
  403382:	2800      	cmp	r0, #0
  403384:	f47e affe 	bne.w	402384 <_svfprintf_r+0x1a4>
  403388:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40338a:	46c8      	mov	r8, r9
  40338c:	e4d7      	b.n	402d3e <_svfprintf_r+0xb5e>
  40338e:	4623      	mov	r3, r4
  403390:	e6a2      	b.n	4030d8 <_svfprintf_r+0xef8>
  403392:	aa25      	add	r2, sp, #148	; 0x94
  403394:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403396:	980c      	ldr	r0, [sp, #48]	; 0x30
  403398:	f002 f880 	bl	40549c <__ssprint_r>
  40339c:	2800      	cmp	r0, #0
  40339e:	f47e aff1 	bne.w	402384 <_svfprintf_r+0x1a4>
  4033a2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4033a4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4033a6:	46c8      	mov	r8, r9
  4033a8:	e5ae      	b.n	402f08 <_svfprintf_r+0xd28>
  4033aa:	aa25      	add	r2, sp, #148	; 0x94
  4033ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4033ae:	980c      	ldr	r0, [sp, #48]	; 0x30
  4033b0:	f002 f874 	bl	40549c <__ssprint_r>
  4033b4:	2800      	cmp	r0, #0
  4033b6:	f47e afe5 	bne.w	402384 <_svfprintf_r+0x1a4>
  4033ba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4033bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4033be:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4033c0:	1a9a      	subs	r2, r3, r2
  4033c2:	46c8      	mov	r8, r9
  4033c4:	e5b8      	b.n	402f38 <_svfprintf_r+0xd58>
  4033c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4033c8:	9612      	str	r6, [sp, #72]	; 0x48
  4033ca:	2b06      	cmp	r3, #6
  4033cc:	bf28      	it	cs
  4033ce:	2306      	movcs	r3, #6
  4033d0:	960a      	str	r6, [sp, #40]	; 0x28
  4033d2:	4637      	mov	r7, r6
  4033d4:	9308      	str	r3, [sp, #32]
  4033d6:	950f      	str	r5, [sp, #60]	; 0x3c
  4033d8:	f8cd b01c 	str.w	fp, [sp, #28]
  4033dc:	930e      	str	r3, [sp, #56]	; 0x38
  4033de:	4e74      	ldr	r6, [pc, #464]	; (4035b0 <_svfprintf_r+0x13d0>)
  4033e0:	f7ff b816 	b.w	402410 <_svfprintf_r+0x230>
  4033e4:	a823      	add	r0, sp, #140	; 0x8c
  4033e6:	a920      	add	r1, sp, #128	; 0x80
  4033e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4033ea:	9004      	str	r0, [sp, #16]
  4033ec:	9103      	str	r1, [sp, #12]
  4033ee:	a81f      	add	r0, sp, #124	; 0x7c
  4033f0:	2103      	movs	r1, #3
  4033f2:	9002      	str	r0, [sp, #8]
  4033f4:	9a08      	ldr	r2, [sp, #32]
  4033f6:	9501      	str	r5, [sp, #4]
  4033f8:	463b      	mov	r3, r7
  4033fa:	9100      	str	r1, [sp, #0]
  4033fc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4033fe:	f000 f9c3 	bl	403788 <_dtoa_r>
  403402:	4606      	mov	r6, r0
  403404:	1944      	adds	r4, r0, r5
  403406:	e72b      	b.n	403260 <_svfprintf_r+0x1080>
  403408:	2306      	movs	r3, #6
  40340a:	930a      	str	r3, [sp, #40]	; 0x28
  40340c:	e61d      	b.n	40304a <_svfprintf_r+0xe6a>
  40340e:	272d      	movs	r7, #45	; 0x2d
  403410:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403414:	f7ff bacd 	b.w	4029b2 <_svfprintf_r+0x7d2>
  403418:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40341a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40341c:	4413      	add	r3, r2
  40341e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403420:	930e      	str	r3, [sp, #56]	; 0x38
  403422:	2a00      	cmp	r2, #0
  403424:	f340 80b0 	ble.w	403588 <_svfprintf_r+0x13a8>
  403428:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40342c:	9308      	str	r3, [sp, #32]
  40342e:	2367      	movs	r3, #103	; 0x67
  403430:	9311      	str	r3, [sp, #68]	; 0x44
  403432:	e671      	b.n	403118 <_svfprintf_r+0xf38>
  403434:	2b00      	cmp	r3, #0
  403436:	f340 80c3 	ble.w	4035c0 <_svfprintf_r+0x13e0>
  40343a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40343c:	2a00      	cmp	r2, #0
  40343e:	f040 8099 	bne.w	403574 <_svfprintf_r+0x1394>
  403442:	f01b 0f01 	tst.w	fp, #1
  403446:	f040 8095 	bne.w	403574 <_svfprintf_r+0x1394>
  40344a:	9308      	str	r3, [sp, #32]
  40344c:	930e      	str	r3, [sp, #56]	; 0x38
  40344e:	e663      	b.n	403118 <_svfprintf_r+0xf38>
  403450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403452:	9308      	str	r3, [sp, #32]
  403454:	930e      	str	r3, [sp, #56]	; 0x38
  403456:	900a      	str	r0, [sp, #40]	; 0x28
  403458:	950f      	str	r5, [sp, #60]	; 0x3c
  40345a:	f8cd b01c 	str.w	fp, [sp, #28]
  40345e:	9012      	str	r0, [sp, #72]	; 0x48
  403460:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403464:	f7fe bfd4 	b.w	402410 <_svfprintf_r+0x230>
  403468:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40346a:	2b47      	cmp	r3, #71	; 0x47
  40346c:	f47f ae20 	bne.w	4030b0 <_svfprintf_r+0xed0>
  403470:	f01b 0f01 	tst.w	fp, #1
  403474:	f47f aeee 	bne.w	403254 <_svfprintf_r+0x1074>
  403478:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40347a:	1b9b      	subs	r3, r3, r6
  40347c:	9313      	str	r3, [sp, #76]	; 0x4c
  40347e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403480:	2b47      	cmp	r3, #71	; 0x47
  403482:	f43f af18 	beq.w	4032b6 <_svfprintf_r+0x10d6>
  403486:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403488:	9312      	str	r3, [sp, #72]	; 0x48
  40348a:	e721      	b.n	4032d0 <_svfprintf_r+0x10f0>
  40348c:	424f      	negs	r7, r1
  40348e:	3110      	adds	r1, #16
  403490:	4d48      	ldr	r5, [pc, #288]	; (4035b4 <_svfprintf_r+0x13d4>)
  403492:	da2f      	bge.n	4034f4 <_svfprintf_r+0x1314>
  403494:	2410      	movs	r4, #16
  403496:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40349a:	e004      	b.n	4034a6 <_svfprintf_r+0x12c6>
  40349c:	f108 0808 	add.w	r8, r8, #8
  4034a0:	3f10      	subs	r7, #16
  4034a2:	2f10      	cmp	r7, #16
  4034a4:	dd26      	ble.n	4034f4 <_svfprintf_r+0x1314>
  4034a6:	3301      	adds	r3, #1
  4034a8:	3210      	adds	r2, #16
  4034aa:	2b07      	cmp	r3, #7
  4034ac:	9227      	str	r2, [sp, #156]	; 0x9c
  4034ae:	9326      	str	r3, [sp, #152]	; 0x98
  4034b0:	f8c8 5000 	str.w	r5, [r8]
  4034b4:	f8c8 4004 	str.w	r4, [r8, #4]
  4034b8:	ddf0      	ble.n	40349c <_svfprintf_r+0x12bc>
  4034ba:	aa25      	add	r2, sp, #148	; 0x94
  4034bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4034be:	4658      	mov	r0, fp
  4034c0:	f001 ffec 	bl	40549c <__ssprint_r>
  4034c4:	2800      	cmp	r0, #0
  4034c6:	f47e af5d 	bne.w	402384 <_svfprintf_r+0x1a4>
  4034ca:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4034cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4034ce:	46c8      	mov	r8, r9
  4034d0:	e7e6      	b.n	4034a0 <_svfprintf_r+0x12c0>
  4034d2:	aa25      	add	r2, sp, #148	; 0x94
  4034d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4034d6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4034d8:	f001 ffe0 	bl	40549c <__ssprint_r>
  4034dc:	2800      	cmp	r0, #0
  4034de:	f47e af51 	bne.w	402384 <_svfprintf_r+0x1a4>
  4034e2:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4034e4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4034e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4034e8:	46c8      	mov	r8, r9
  4034ea:	e667      	b.n	4031bc <_svfprintf_r+0xfdc>
  4034ec:	2000      	movs	r0, #0
  4034ee:	900a      	str	r0, [sp, #40]	; 0x28
  4034f0:	f7fe bed0 	b.w	402294 <_svfprintf_r+0xb4>
  4034f4:	3301      	adds	r3, #1
  4034f6:	443a      	add	r2, r7
  4034f8:	2b07      	cmp	r3, #7
  4034fa:	e888 00a0 	stmia.w	r8, {r5, r7}
  4034fe:	9227      	str	r2, [sp, #156]	; 0x9c
  403500:	9326      	str	r3, [sp, #152]	; 0x98
  403502:	f108 0808 	add.w	r8, r8, #8
  403506:	f77f ae5c 	ble.w	4031c2 <_svfprintf_r+0xfe2>
  40350a:	aa25      	add	r2, sp, #148	; 0x94
  40350c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40350e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403510:	f001 ffc4 	bl	40549c <__ssprint_r>
  403514:	2800      	cmp	r0, #0
  403516:	f47e af35 	bne.w	402384 <_svfprintf_r+0x1a4>
  40351a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40351c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40351e:	46c8      	mov	r8, r9
  403520:	e64f      	b.n	4031c2 <_svfprintf_r+0xfe2>
  403522:	3330      	adds	r3, #48	; 0x30
  403524:	2230      	movs	r2, #48	; 0x30
  403526:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  40352a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  40352e:	ab22      	add	r3, sp, #136	; 0x88
  403530:	e70f      	b.n	403352 <_svfprintf_r+0x1172>
  403532:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403534:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403536:	4413      	add	r3, r2
  403538:	930e      	str	r3, [sp, #56]	; 0x38
  40353a:	e775      	b.n	403428 <_svfprintf_r+0x1248>
  40353c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40353e:	e5cb      	b.n	4030d8 <_svfprintf_r+0xef8>
  403540:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403542:	4e1d      	ldr	r6, [pc, #116]	; (4035b8 <_svfprintf_r+0x13d8>)
  403544:	2b00      	cmp	r3, #0
  403546:	bfb6      	itet	lt
  403548:	272d      	movlt	r7, #45	; 0x2d
  40354a:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  40354e:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  403552:	4b1a      	ldr	r3, [pc, #104]	; (4035bc <_svfprintf_r+0x13dc>)
  403554:	f7ff ba2f 	b.w	4029b6 <_svfprintf_r+0x7d6>
  403558:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40355a:	9808      	ldr	r0, [sp, #32]
  40355c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40355e:	4639      	mov	r1, r7
  403560:	f003 f830 	bl	4065c4 <__aeabi_dcmpeq>
  403564:	2800      	cmp	r0, #0
  403566:	f47f ae7f 	bne.w	403268 <_svfprintf_r+0x1088>
  40356a:	f1c5 0501 	rsb	r5, r5, #1
  40356e:	951f      	str	r5, [sp, #124]	; 0x7c
  403570:	442c      	add	r4, r5
  403572:	e59e      	b.n	4030b2 <_svfprintf_r+0xed2>
  403574:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403576:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403578:	4413      	add	r3, r2
  40357a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40357c:	441a      	add	r2, r3
  40357e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  403582:	920e      	str	r2, [sp, #56]	; 0x38
  403584:	9308      	str	r3, [sp, #32]
  403586:	e5c7      	b.n	403118 <_svfprintf_r+0xf38>
  403588:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40358a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40358c:	f1c3 0301 	rsb	r3, r3, #1
  403590:	441a      	add	r2, r3
  403592:	4613      	mov	r3, r2
  403594:	e7d0      	b.n	403538 <_svfprintf_r+0x1358>
  403596:	f01b 0301 	ands.w	r3, fp, #1
  40359a:	9312      	str	r3, [sp, #72]	; 0x48
  40359c:	f47f aee2 	bne.w	403364 <_svfprintf_r+0x1184>
  4035a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4035a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4035a6:	9308      	str	r3, [sp, #32]
  4035a8:	e5b6      	b.n	403118 <_svfprintf_r+0xf38>
  4035aa:	bf00      	nop
  4035ac:	66666667 	.word	0x66666667
  4035b0:	00407154 	.word	0x00407154
  4035b4:	00407170 	.word	0x00407170
  4035b8:	00407128 	.word	0x00407128
  4035bc:	00407124 	.word	0x00407124
  4035c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4035c2:	b913      	cbnz	r3, 4035ca <_svfprintf_r+0x13ea>
  4035c4:	f01b 0f01 	tst.w	fp, #1
  4035c8:	d002      	beq.n	4035d0 <_svfprintf_r+0x13f0>
  4035ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4035cc:	3301      	adds	r3, #1
  4035ce:	e7d4      	b.n	40357a <_svfprintf_r+0x139a>
  4035d0:	2301      	movs	r3, #1
  4035d2:	e73a      	b.n	40344a <_svfprintf_r+0x126a>
  4035d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4035d6:	f89a 3001 	ldrb.w	r3, [sl, #1]
  4035da:	6828      	ldr	r0, [r5, #0]
  4035dc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  4035e0:	900a      	str	r0, [sp, #40]	; 0x28
  4035e2:	4628      	mov	r0, r5
  4035e4:	3004      	adds	r0, #4
  4035e6:	46a2      	mov	sl, r4
  4035e8:	900f      	str	r0, [sp, #60]	; 0x3c
  4035ea:	f7fe be51 	b.w	402290 <_svfprintf_r+0xb0>
  4035ee:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4035f2:	f7ff b867 	b.w	4026c4 <_svfprintf_r+0x4e4>
  4035f6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4035fa:	f7ff ba15 	b.w	402a28 <_svfprintf_r+0x848>
  4035fe:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  403602:	e6a6      	b.n	403352 <_svfprintf_r+0x1172>
  403604:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403608:	f7ff b8eb 	b.w	4027e2 <_svfprintf_r+0x602>
  40360c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40360e:	230c      	movs	r3, #12
  403610:	6013      	str	r3, [r2, #0]
  403612:	f04f 33ff 	mov.w	r3, #4294967295
  403616:	9309      	str	r3, [sp, #36]	; 0x24
  403618:	f7fe bebd 	b.w	402396 <_svfprintf_r+0x1b6>
  40361c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403620:	f7ff b99a 	b.w	402958 <_svfprintf_r+0x778>
  403624:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403628:	f7ff b976 	b.w	402918 <_svfprintf_r+0x738>
  40362c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403630:	f7ff b959 	b.w	4028e6 <_svfprintf_r+0x706>
  403634:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403638:	f7ff b912 	b.w	402860 <_svfprintf_r+0x680>

0040363c <register_fini>:
  40363c:	4b02      	ldr	r3, [pc, #8]	; (403648 <register_fini+0xc>)
  40363e:	b113      	cbz	r3, 403646 <register_fini+0xa>
  403640:	4802      	ldr	r0, [pc, #8]	; (40364c <register_fini+0x10>)
  403642:	f000 b805 	b.w	403650 <atexit>
  403646:	4770      	bx	lr
  403648:	00000000 	.word	0x00000000
  40364c:	004045dd 	.word	0x004045dd

00403650 <atexit>:
  403650:	2300      	movs	r3, #0
  403652:	4601      	mov	r1, r0
  403654:	461a      	mov	r2, r3
  403656:	4618      	mov	r0, r3
  403658:	f001 bf9e 	b.w	405598 <__register_exitproc>

0040365c <quorem>:
  40365c:	6902      	ldr	r2, [r0, #16]
  40365e:	690b      	ldr	r3, [r1, #16]
  403660:	4293      	cmp	r3, r2
  403662:	f300 808d 	bgt.w	403780 <quorem+0x124>
  403666:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40366a:	f103 38ff 	add.w	r8, r3, #4294967295
  40366e:	f101 0714 	add.w	r7, r1, #20
  403672:	f100 0b14 	add.w	fp, r0, #20
  403676:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40367a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40367e:	ea4f 0488 	mov.w	r4, r8, lsl #2
  403682:	b083      	sub	sp, #12
  403684:	3201      	adds	r2, #1
  403686:	fbb3 f9f2 	udiv	r9, r3, r2
  40368a:	eb0b 0304 	add.w	r3, fp, r4
  40368e:	9400      	str	r4, [sp, #0]
  403690:	eb07 0a04 	add.w	sl, r7, r4
  403694:	9301      	str	r3, [sp, #4]
  403696:	f1b9 0f00 	cmp.w	r9, #0
  40369a:	d039      	beq.n	403710 <quorem+0xb4>
  40369c:	2500      	movs	r5, #0
  40369e:	462e      	mov	r6, r5
  4036a0:	46bc      	mov	ip, r7
  4036a2:	46de      	mov	lr, fp
  4036a4:	f85c 4b04 	ldr.w	r4, [ip], #4
  4036a8:	f8de 3000 	ldr.w	r3, [lr]
  4036ac:	b2a2      	uxth	r2, r4
  4036ae:	fb09 5502 	mla	r5, r9, r2, r5
  4036b2:	0c22      	lsrs	r2, r4, #16
  4036b4:	0c2c      	lsrs	r4, r5, #16
  4036b6:	fb09 4202 	mla	r2, r9, r2, r4
  4036ba:	b2ad      	uxth	r5, r5
  4036bc:	1b75      	subs	r5, r6, r5
  4036be:	b296      	uxth	r6, r2
  4036c0:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4036c4:	fa15 f383 	uxtah	r3, r5, r3
  4036c8:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4036cc:	b29b      	uxth	r3, r3
  4036ce:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4036d2:	45e2      	cmp	sl, ip
  4036d4:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4036d8:	f84e 3b04 	str.w	r3, [lr], #4
  4036dc:	ea4f 4626 	mov.w	r6, r6, asr #16
  4036e0:	d2e0      	bcs.n	4036a4 <quorem+0x48>
  4036e2:	9b00      	ldr	r3, [sp, #0]
  4036e4:	f85b 3003 	ldr.w	r3, [fp, r3]
  4036e8:	b993      	cbnz	r3, 403710 <quorem+0xb4>
  4036ea:	9c01      	ldr	r4, [sp, #4]
  4036ec:	1f23      	subs	r3, r4, #4
  4036ee:	459b      	cmp	fp, r3
  4036f0:	d20c      	bcs.n	40370c <quorem+0xb0>
  4036f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4036f6:	b94b      	cbnz	r3, 40370c <quorem+0xb0>
  4036f8:	f1a4 0308 	sub.w	r3, r4, #8
  4036fc:	e002      	b.n	403704 <quorem+0xa8>
  4036fe:	681a      	ldr	r2, [r3, #0]
  403700:	3b04      	subs	r3, #4
  403702:	b91a      	cbnz	r2, 40370c <quorem+0xb0>
  403704:	459b      	cmp	fp, r3
  403706:	f108 38ff 	add.w	r8, r8, #4294967295
  40370a:	d3f8      	bcc.n	4036fe <quorem+0xa2>
  40370c:	f8c0 8010 	str.w	r8, [r0, #16]
  403710:	4604      	mov	r4, r0
  403712:	f001 fd39 	bl	405188 <__mcmp>
  403716:	2800      	cmp	r0, #0
  403718:	db2e      	blt.n	403778 <quorem+0x11c>
  40371a:	f109 0901 	add.w	r9, r9, #1
  40371e:	465d      	mov	r5, fp
  403720:	2300      	movs	r3, #0
  403722:	f857 1b04 	ldr.w	r1, [r7], #4
  403726:	6828      	ldr	r0, [r5, #0]
  403728:	b28a      	uxth	r2, r1
  40372a:	1a9a      	subs	r2, r3, r2
  40372c:	0c0b      	lsrs	r3, r1, #16
  40372e:	fa12 f280 	uxtah	r2, r2, r0
  403732:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  403736:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40373a:	b292      	uxth	r2, r2
  40373c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  403740:	45ba      	cmp	sl, r7
  403742:	f845 2b04 	str.w	r2, [r5], #4
  403746:	ea4f 4323 	mov.w	r3, r3, asr #16
  40374a:	d2ea      	bcs.n	403722 <quorem+0xc6>
  40374c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  403750:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  403754:	b982      	cbnz	r2, 403778 <quorem+0x11c>
  403756:	1f1a      	subs	r2, r3, #4
  403758:	4593      	cmp	fp, r2
  40375a:	d20b      	bcs.n	403774 <quorem+0x118>
  40375c:	f853 2c04 	ldr.w	r2, [r3, #-4]
  403760:	b942      	cbnz	r2, 403774 <quorem+0x118>
  403762:	3b08      	subs	r3, #8
  403764:	e002      	b.n	40376c <quorem+0x110>
  403766:	681a      	ldr	r2, [r3, #0]
  403768:	3b04      	subs	r3, #4
  40376a:	b91a      	cbnz	r2, 403774 <quorem+0x118>
  40376c:	459b      	cmp	fp, r3
  40376e:	f108 38ff 	add.w	r8, r8, #4294967295
  403772:	d3f8      	bcc.n	403766 <quorem+0x10a>
  403774:	f8c4 8010 	str.w	r8, [r4, #16]
  403778:	4648      	mov	r0, r9
  40377a:	b003      	add	sp, #12
  40377c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403780:	2000      	movs	r0, #0
  403782:	4770      	bx	lr
  403784:	0000      	movs	r0, r0
	...

00403788 <_dtoa_r>:
  403788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40378c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40378e:	b09b      	sub	sp, #108	; 0x6c
  403790:	4604      	mov	r4, r0
  403792:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  403794:	4692      	mov	sl, r2
  403796:	469b      	mov	fp, r3
  403798:	b141      	cbz	r1, 4037ac <_dtoa_r+0x24>
  40379a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40379c:	604a      	str	r2, [r1, #4]
  40379e:	2301      	movs	r3, #1
  4037a0:	4093      	lsls	r3, r2
  4037a2:	608b      	str	r3, [r1, #8]
  4037a4:	f001 fb18 	bl	404dd8 <_Bfree>
  4037a8:	2300      	movs	r3, #0
  4037aa:	6423      	str	r3, [r4, #64]	; 0x40
  4037ac:	f1bb 0f00 	cmp.w	fp, #0
  4037b0:	465d      	mov	r5, fp
  4037b2:	db35      	blt.n	403820 <_dtoa_r+0x98>
  4037b4:	2300      	movs	r3, #0
  4037b6:	6033      	str	r3, [r6, #0]
  4037b8:	4b9d      	ldr	r3, [pc, #628]	; (403a30 <_dtoa_r+0x2a8>)
  4037ba:	43ab      	bics	r3, r5
  4037bc:	d015      	beq.n	4037ea <_dtoa_r+0x62>
  4037be:	4650      	mov	r0, sl
  4037c0:	4659      	mov	r1, fp
  4037c2:	2200      	movs	r2, #0
  4037c4:	2300      	movs	r3, #0
  4037c6:	f002 fefd 	bl	4065c4 <__aeabi_dcmpeq>
  4037ca:	4680      	mov	r8, r0
  4037cc:	2800      	cmp	r0, #0
  4037ce:	d02d      	beq.n	40382c <_dtoa_r+0xa4>
  4037d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4037d2:	2301      	movs	r3, #1
  4037d4:	6013      	str	r3, [r2, #0]
  4037d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4037d8:	2b00      	cmp	r3, #0
  4037da:	f000 80bd 	beq.w	403958 <_dtoa_r+0x1d0>
  4037de:	4895      	ldr	r0, [pc, #596]	; (403a34 <_dtoa_r+0x2ac>)
  4037e0:	6018      	str	r0, [r3, #0]
  4037e2:	3801      	subs	r0, #1
  4037e4:	b01b      	add	sp, #108	; 0x6c
  4037e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4037ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4037ec:	f242 730f 	movw	r3, #9999	; 0x270f
  4037f0:	6013      	str	r3, [r2, #0]
  4037f2:	f1ba 0f00 	cmp.w	sl, #0
  4037f6:	d10d      	bne.n	403814 <_dtoa_r+0x8c>
  4037f8:	f3c5 0513 	ubfx	r5, r5, #0, #20
  4037fc:	b955      	cbnz	r5, 403814 <_dtoa_r+0x8c>
  4037fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403800:	488d      	ldr	r0, [pc, #564]	; (403a38 <_dtoa_r+0x2b0>)
  403802:	2b00      	cmp	r3, #0
  403804:	d0ee      	beq.n	4037e4 <_dtoa_r+0x5c>
  403806:	f100 0308 	add.w	r3, r0, #8
  40380a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40380c:	6013      	str	r3, [r2, #0]
  40380e:	b01b      	add	sp, #108	; 0x6c
  403810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403814:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403816:	4889      	ldr	r0, [pc, #548]	; (403a3c <_dtoa_r+0x2b4>)
  403818:	2b00      	cmp	r3, #0
  40381a:	d0e3      	beq.n	4037e4 <_dtoa_r+0x5c>
  40381c:	1cc3      	adds	r3, r0, #3
  40381e:	e7f4      	b.n	40380a <_dtoa_r+0x82>
  403820:	2301      	movs	r3, #1
  403822:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  403826:	6033      	str	r3, [r6, #0]
  403828:	46ab      	mov	fp, r5
  40382a:	e7c5      	b.n	4037b8 <_dtoa_r+0x30>
  40382c:	aa18      	add	r2, sp, #96	; 0x60
  40382e:	ab19      	add	r3, sp, #100	; 0x64
  403830:	9201      	str	r2, [sp, #4]
  403832:	9300      	str	r3, [sp, #0]
  403834:	4652      	mov	r2, sl
  403836:	465b      	mov	r3, fp
  403838:	4620      	mov	r0, r4
  40383a:	f001 fd45 	bl	4052c8 <__d2b>
  40383e:	0d2b      	lsrs	r3, r5, #20
  403840:	4681      	mov	r9, r0
  403842:	d071      	beq.n	403928 <_dtoa_r+0x1a0>
  403844:	f3cb 0213 	ubfx	r2, fp, #0, #20
  403848:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40384c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40384e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  403852:	4650      	mov	r0, sl
  403854:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  403858:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40385c:	2200      	movs	r2, #0
  40385e:	4b78      	ldr	r3, [pc, #480]	; (403a40 <_dtoa_r+0x2b8>)
  403860:	f002 fa94 	bl	405d8c <__aeabi_dsub>
  403864:	a36c      	add	r3, pc, #432	; (adr r3, 403a18 <_dtoa_r+0x290>)
  403866:	e9d3 2300 	ldrd	r2, r3, [r3]
  40386a:	f002 fc43 	bl	4060f4 <__aeabi_dmul>
  40386e:	a36c      	add	r3, pc, #432	; (adr r3, 403a20 <_dtoa_r+0x298>)
  403870:	e9d3 2300 	ldrd	r2, r3, [r3]
  403874:	f002 fa8c 	bl	405d90 <__adddf3>
  403878:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40387c:	4630      	mov	r0, r6
  40387e:	f002 fbd3 	bl	406028 <__aeabi_i2d>
  403882:	a369      	add	r3, pc, #420	; (adr r3, 403a28 <_dtoa_r+0x2a0>)
  403884:	e9d3 2300 	ldrd	r2, r3, [r3]
  403888:	f002 fc34 	bl	4060f4 <__aeabi_dmul>
  40388c:	4602      	mov	r2, r0
  40388e:	460b      	mov	r3, r1
  403890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403894:	f002 fa7c 	bl	405d90 <__adddf3>
  403898:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40389c:	f002 feda 	bl	406654 <__aeabi_d2iz>
  4038a0:	2200      	movs	r2, #0
  4038a2:	9002      	str	r0, [sp, #8]
  4038a4:	2300      	movs	r3, #0
  4038a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4038aa:	f002 fe95 	bl	4065d8 <__aeabi_dcmplt>
  4038ae:	2800      	cmp	r0, #0
  4038b0:	f040 8173 	bne.w	403b9a <_dtoa_r+0x412>
  4038b4:	9d02      	ldr	r5, [sp, #8]
  4038b6:	2d16      	cmp	r5, #22
  4038b8:	f200 815d 	bhi.w	403b76 <_dtoa_r+0x3ee>
  4038bc:	4b61      	ldr	r3, [pc, #388]	; (403a44 <_dtoa_r+0x2bc>)
  4038be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4038c2:	e9d3 0100 	ldrd	r0, r1, [r3]
  4038c6:	4652      	mov	r2, sl
  4038c8:	465b      	mov	r3, fp
  4038ca:	f002 fea3 	bl	406614 <__aeabi_dcmpgt>
  4038ce:	2800      	cmp	r0, #0
  4038d0:	f000 81c5 	beq.w	403c5e <_dtoa_r+0x4d6>
  4038d4:	1e6b      	subs	r3, r5, #1
  4038d6:	9302      	str	r3, [sp, #8]
  4038d8:	2300      	movs	r3, #0
  4038da:	930e      	str	r3, [sp, #56]	; 0x38
  4038dc:	1bbf      	subs	r7, r7, r6
  4038de:	1e7b      	subs	r3, r7, #1
  4038e0:	9306      	str	r3, [sp, #24]
  4038e2:	f100 8154 	bmi.w	403b8e <_dtoa_r+0x406>
  4038e6:	2300      	movs	r3, #0
  4038e8:	9308      	str	r3, [sp, #32]
  4038ea:	9b02      	ldr	r3, [sp, #8]
  4038ec:	2b00      	cmp	r3, #0
  4038ee:	f2c0 8145 	blt.w	403b7c <_dtoa_r+0x3f4>
  4038f2:	9a06      	ldr	r2, [sp, #24]
  4038f4:	930d      	str	r3, [sp, #52]	; 0x34
  4038f6:	4611      	mov	r1, r2
  4038f8:	4419      	add	r1, r3
  4038fa:	2300      	movs	r3, #0
  4038fc:	9106      	str	r1, [sp, #24]
  4038fe:	930c      	str	r3, [sp, #48]	; 0x30
  403900:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403902:	2b09      	cmp	r3, #9
  403904:	d82a      	bhi.n	40395c <_dtoa_r+0x1d4>
  403906:	2b05      	cmp	r3, #5
  403908:	f340 865b 	ble.w	4045c2 <_dtoa_r+0xe3a>
  40390c:	3b04      	subs	r3, #4
  40390e:	9324      	str	r3, [sp, #144]	; 0x90
  403910:	2500      	movs	r5, #0
  403912:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403914:	3b02      	subs	r3, #2
  403916:	2b03      	cmp	r3, #3
  403918:	f200 8642 	bhi.w	4045a0 <_dtoa_r+0xe18>
  40391c:	e8df f013 	tbh	[pc, r3, lsl #1]
  403920:	02c903d4 	.word	0x02c903d4
  403924:	046103df 	.word	0x046103df
  403928:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40392a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40392c:	443e      	add	r6, r7
  40392e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  403932:	2b20      	cmp	r3, #32
  403934:	f340 818e 	ble.w	403c54 <_dtoa_r+0x4cc>
  403938:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40393c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  403940:	409d      	lsls	r5, r3
  403942:	fa2a f000 	lsr.w	r0, sl, r0
  403946:	4328      	orrs	r0, r5
  403948:	f002 fb5e 	bl	406008 <__aeabi_ui2d>
  40394c:	2301      	movs	r3, #1
  40394e:	3e01      	subs	r6, #1
  403950:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  403954:	9314      	str	r3, [sp, #80]	; 0x50
  403956:	e781      	b.n	40385c <_dtoa_r+0xd4>
  403958:	483b      	ldr	r0, [pc, #236]	; (403a48 <_dtoa_r+0x2c0>)
  40395a:	e743      	b.n	4037e4 <_dtoa_r+0x5c>
  40395c:	2100      	movs	r1, #0
  40395e:	6461      	str	r1, [r4, #68]	; 0x44
  403960:	4620      	mov	r0, r4
  403962:	9125      	str	r1, [sp, #148]	; 0x94
  403964:	f001 fa12 	bl	404d8c <_Balloc>
  403968:	f04f 33ff 	mov.w	r3, #4294967295
  40396c:	930a      	str	r3, [sp, #40]	; 0x28
  40396e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403970:	930f      	str	r3, [sp, #60]	; 0x3c
  403972:	2301      	movs	r3, #1
  403974:	9004      	str	r0, [sp, #16]
  403976:	6420      	str	r0, [r4, #64]	; 0x40
  403978:	9224      	str	r2, [sp, #144]	; 0x90
  40397a:	930b      	str	r3, [sp, #44]	; 0x2c
  40397c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40397e:	2b00      	cmp	r3, #0
  403980:	f2c0 80d9 	blt.w	403b36 <_dtoa_r+0x3ae>
  403984:	9a02      	ldr	r2, [sp, #8]
  403986:	2a0e      	cmp	r2, #14
  403988:	f300 80d5 	bgt.w	403b36 <_dtoa_r+0x3ae>
  40398c:	4b2d      	ldr	r3, [pc, #180]	; (403a44 <_dtoa_r+0x2bc>)
  40398e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403992:	e9d3 2300 	ldrd	r2, r3, [r3]
  403996:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40399a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40399c:	2b00      	cmp	r3, #0
  40399e:	f2c0 83ba 	blt.w	404116 <_dtoa_r+0x98e>
  4039a2:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4039a6:	4650      	mov	r0, sl
  4039a8:	462a      	mov	r2, r5
  4039aa:	4633      	mov	r3, r6
  4039ac:	4659      	mov	r1, fp
  4039ae:	f002 fccb 	bl	406348 <__aeabi_ddiv>
  4039b2:	f002 fe4f 	bl	406654 <__aeabi_d2iz>
  4039b6:	4680      	mov	r8, r0
  4039b8:	f002 fb36 	bl	406028 <__aeabi_i2d>
  4039bc:	462a      	mov	r2, r5
  4039be:	4633      	mov	r3, r6
  4039c0:	f002 fb98 	bl	4060f4 <__aeabi_dmul>
  4039c4:	460b      	mov	r3, r1
  4039c6:	4602      	mov	r2, r0
  4039c8:	4659      	mov	r1, fp
  4039ca:	4650      	mov	r0, sl
  4039cc:	f002 f9de 	bl	405d8c <__aeabi_dsub>
  4039d0:	9d04      	ldr	r5, [sp, #16]
  4039d2:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4039d6:	702b      	strb	r3, [r5, #0]
  4039d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4039da:	2b01      	cmp	r3, #1
  4039dc:	4606      	mov	r6, r0
  4039de:	460f      	mov	r7, r1
  4039e0:	f105 0501 	add.w	r5, r5, #1
  4039e4:	d068      	beq.n	403ab8 <_dtoa_r+0x330>
  4039e6:	2200      	movs	r2, #0
  4039e8:	4b18      	ldr	r3, [pc, #96]	; (403a4c <_dtoa_r+0x2c4>)
  4039ea:	f002 fb83 	bl	4060f4 <__aeabi_dmul>
  4039ee:	2200      	movs	r2, #0
  4039f0:	2300      	movs	r3, #0
  4039f2:	4606      	mov	r6, r0
  4039f4:	460f      	mov	r7, r1
  4039f6:	f002 fde5 	bl	4065c4 <__aeabi_dcmpeq>
  4039fa:	2800      	cmp	r0, #0
  4039fc:	f040 8088 	bne.w	403b10 <_dtoa_r+0x388>
  403a00:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  403a04:	f04f 0a00 	mov.w	sl, #0
  403a08:	f8df b040 	ldr.w	fp, [pc, #64]	; 403a4c <_dtoa_r+0x2c4>
  403a0c:	940c      	str	r4, [sp, #48]	; 0x30
  403a0e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  403a12:	e028      	b.n	403a66 <_dtoa_r+0x2de>
  403a14:	f3af 8000 	nop.w
  403a18:	636f4361 	.word	0x636f4361
  403a1c:	3fd287a7 	.word	0x3fd287a7
  403a20:	8b60c8b3 	.word	0x8b60c8b3
  403a24:	3fc68a28 	.word	0x3fc68a28
  403a28:	509f79fb 	.word	0x509f79fb
  403a2c:	3fd34413 	.word	0x3fd34413
  403a30:	7ff00000 	.word	0x7ff00000
  403a34:	0040715d 	.word	0x0040715d
  403a38:	00407180 	.word	0x00407180
  403a3c:	0040718c 	.word	0x0040718c
  403a40:	3ff80000 	.word	0x3ff80000
  403a44:	004071b8 	.word	0x004071b8
  403a48:	0040715c 	.word	0x0040715c
  403a4c:	40240000 	.word	0x40240000
  403a50:	f002 fb50 	bl	4060f4 <__aeabi_dmul>
  403a54:	2200      	movs	r2, #0
  403a56:	2300      	movs	r3, #0
  403a58:	4606      	mov	r6, r0
  403a5a:	460f      	mov	r7, r1
  403a5c:	f002 fdb2 	bl	4065c4 <__aeabi_dcmpeq>
  403a60:	2800      	cmp	r0, #0
  403a62:	f040 83c1 	bne.w	4041e8 <_dtoa_r+0xa60>
  403a66:	4642      	mov	r2, r8
  403a68:	464b      	mov	r3, r9
  403a6a:	4630      	mov	r0, r6
  403a6c:	4639      	mov	r1, r7
  403a6e:	f002 fc6b 	bl	406348 <__aeabi_ddiv>
  403a72:	f002 fdef 	bl	406654 <__aeabi_d2iz>
  403a76:	4604      	mov	r4, r0
  403a78:	f002 fad6 	bl	406028 <__aeabi_i2d>
  403a7c:	4642      	mov	r2, r8
  403a7e:	464b      	mov	r3, r9
  403a80:	f002 fb38 	bl	4060f4 <__aeabi_dmul>
  403a84:	4602      	mov	r2, r0
  403a86:	460b      	mov	r3, r1
  403a88:	4630      	mov	r0, r6
  403a8a:	4639      	mov	r1, r7
  403a8c:	f002 f97e 	bl	405d8c <__aeabi_dsub>
  403a90:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  403a94:	9e04      	ldr	r6, [sp, #16]
  403a96:	f805 eb01 	strb.w	lr, [r5], #1
  403a9a:	eba5 0e06 	sub.w	lr, r5, r6
  403a9e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  403aa0:	45b6      	cmp	lr, r6
  403aa2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  403aa6:	4652      	mov	r2, sl
  403aa8:	465b      	mov	r3, fp
  403aaa:	d1d1      	bne.n	403a50 <_dtoa_r+0x2c8>
  403aac:	46a0      	mov	r8, r4
  403aae:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  403ab2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403ab4:	4606      	mov	r6, r0
  403ab6:	460f      	mov	r7, r1
  403ab8:	4632      	mov	r2, r6
  403aba:	463b      	mov	r3, r7
  403abc:	4630      	mov	r0, r6
  403abe:	4639      	mov	r1, r7
  403ac0:	f002 f966 	bl	405d90 <__adddf3>
  403ac4:	4606      	mov	r6, r0
  403ac6:	460f      	mov	r7, r1
  403ac8:	4602      	mov	r2, r0
  403aca:	460b      	mov	r3, r1
  403acc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403ad0:	f002 fd82 	bl	4065d8 <__aeabi_dcmplt>
  403ad4:	b948      	cbnz	r0, 403aea <_dtoa_r+0x362>
  403ad6:	4632      	mov	r2, r6
  403ad8:	463b      	mov	r3, r7
  403ada:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403ade:	f002 fd71 	bl	4065c4 <__aeabi_dcmpeq>
  403ae2:	b1a8      	cbz	r0, 403b10 <_dtoa_r+0x388>
  403ae4:	f018 0f01 	tst.w	r8, #1
  403ae8:	d012      	beq.n	403b10 <_dtoa_r+0x388>
  403aea:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  403aee:	9a04      	ldr	r2, [sp, #16]
  403af0:	1e6b      	subs	r3, r5, #1
  403af2:	e004      	b.n	403afe <_dtoa_r+0x376>
  403af4:	429a      	cmp	r2, r3
  403af6:	f000 8401 	beq.w	4042fc <_dtoa_r+0xb74>
  403afa:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  403afe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403b02:	f103 0501 	add.w	r5, r3, #1
  403b06:	d0f5      	beq.n	403af4 <_dtoa_r+0x36c>
  403b08:	f108 0801 	add.w	r8, r8, #1
  403b0c:	f883 8000 	strb.w	r8, [r3]
  403b10:	4649      	mov	r1, r9
  403b12:	4620      	mov	r0, r4
  403b14:	f001 f960 	bl	404dd8 <_Bfree>
  403b18:	2200      	movs	r2, #0
  403b1a:	9b02      	ldr	r3, [sp, #8]
  403b1c:	702a      	strb	r2, [r5, #0]
  403b1e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403b20:	3301      	adds	r3, #1
  403b22:	6013      	str	r3, [r2, #0]
  403b24:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403b26:	2b00      	cmp	r3, #0
  403b28:	f000 839e 	beq.w	404268 <_dtoa_r+0xae0>
  403b2c:	9804      	ldr	r0, [sp, #16]
  403b2e:	601d      	str	r5, [r3, #0]
  403b30:	b01b      	add	sp, #108	; 0x6c
  403b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403b38:	2a00      	cmp	r2, #0
  403b3a:	d03e      	beq.n	403bba <_dtoa_r+0x432>
  403b3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403b3e:	2a01      	cmp	r2, #1
  403b40:	f340 8311 	ble.w	404166 <_dtoa_r+0x9de>
  403b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403b46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403b48:	1e5f      	subs	r7, r3, #1
  403b4a:	42ba      	cmp	r2, r7
  403b4c:	f2c0 838f 	blt.w	40426e <_dtoa_r+0xae6>
  403b50:	1bd7      	subs	r7, r2, r7
  403b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403b54:	2b00      	cmp	r3, #0
  403b56:	f2c0 848b 	blt.w	404470 <_dtoa_r+0xce8>
  403b5a:	9d08      	ldr	r5, [sp, #32]
  403b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403b5e:	9a08      	ldr	r2, [sp, #32]
  403b60:	441a      	add	r2, r3
  403b62:	9208      	str	r2, [sp, #32]
  403b64:	9a06      	ldr	r2, [sp, #24]
  403b66:	2101      	movs	r1, #1
  403b68:	441a      	add	r2, r3
  403b6a:	4620      	mov	r0, r4
  403b6c:	9206      	str	r2, [sp, #24]
  403b6e:	f001 f9cd 	bl	404f0c <__i2b>
  403b72:	4606      	mov	r6, r0
  403b74:	e024      	b.n	403bc0 <_dtoa_r+0x438>
  403b76:	2301      	movs	r3, #1
  403b78:	930e      	str	r3, [sp, #56]	; 0x38
  403b7a:	e6af      	b.n	4038dc <_dtoa_r+0x154>
  403b7c:	9a08      	ldr	r2, [sp, #32]
  403b7e:	9b02      	ldr	r3, [sp, #8]
  403b80:	1ad2      	subs	r2, r2, r3
  403b82:	425b      	negs	r3, r3
  403b84:	930c      	str	r3, [sp, #48]	; 0x30
  403b86:	2300      	movs	r3, #0
  403b88:	9208      	str	r2, [sp, #32]
  403b8a:	930d      	str	r3, [sp, #52]	; 0x34
  403b8c:	e6b8      	b.n	403900 <_dtoa_r+0x178>
  403b8e:	f1c7 0301 	rsb	r3, r7, #1
  403b92:	9308      	str	r3, [sp, #32]
  403b94:	2300      	movs	r3, #0
  403b96:	9306      	str	r3, [sp, #24]
  403b98:	e6a7      	b.n	4038ea <_dtoa_r+0x162>
  403b9a:	9d02      	ldr	r5, [sp, #8]
  403b9c:	4628      	mov	r0, r5
  403b9e:	f002 fa43 	bl	406028 <__aeabi_i2d>
  403ba2:	4602      	mov	r2, r0
  403ba4:	460b      	mov	r3, r1
  403ba6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403baa:	f002 fd0b 	bl	4065c4 <__aeabi_dcmpeq>
  403bae:	2800      	cmp	r0, #0
  403bb0:	f47f ae80 	bne.w	4038b4 <_dtoa_r+0x12c>
  403bb4:	1e6b      	subs	r3, r5, #1
  403bb6:	9302      	str	r3, [sp, #8]
  403bb8:	e67c      	b.n	4038b4 <_dtoa_r+0x12c>
  403bba:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403bbc:	9d08      	ldr	r5, [sp, #32]
  403bbe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  403bc0:	2d00      	cmp	r5, #0
  403bc2:	dd0c      	ble.n	403bde <_dtoa_r+0x456>
  403bc4:	9906      	ldr	r1, [sp, #24]
  403bc6:	2900      	cmp	r1, #0
  403bc8:	460b      	mov	r3, r1
  403bca:	dd08      	ble.n	403bde <_dtoa_r+0x456>
  403bcc:	42a9      	cmp	r1, r5
  403bce:	9a08      	ldr	r2, [sp, #32]
  403bd0:	bfa8      	it	ge
  403bd2:	462b      	movge	r3, r5
  403bd4:	1ad2      	subs	r2, r2, r3
  403bd6:	1aed      	subs	r5, r5, r3
  403bd8:	1acb      	subs	r3, r1, r3
  403bda:	9208      	str	r2, [sp, #32]
  403bdc:	9306      	str	r3, [sp, #24]
  403bde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403be0:	b1d3      	cbz	r3, 403c18 <_dtoa_r+0x490>
  403be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403be4:	2b00      	cmp	r3, #0
  403be6:	f000 82b7 	beq.w	404158 <_dtoa_r+0x9d0>
  403bea:	2f00      	cmp	r7, #0
  403bec:	dd10      	ble.n	403c10 <_dtoa_r+0x488>
  403bee:	4631      	mov	r1, r6
  403bf0:	463a      	mov	r2, r7
  403bf2:	4620      	mov	r0, r4
  403bf4:	f001 fa26 	bl	405044 <__pow5mult>
  403bf8:	464a      	mov	r2, r9
  403bfa:	4601      	mov	r1, r0
  403bfc:	4606      	mov	r6, r0
  403bfe:	4620      	mov	r0, r4
  403c00:	f001 f98e 	bl	404f20 <__multiply>
  403c04:	4649      	mov	r1, r9
  403c06:	4680      	mov	r8, r0
  403c08:	4620      	mov	r0, r4
  403c0a:	f001 f8e5 	bl	404dd8 <_Bfree>
  403c0e:	46c1      	mov	r9, r8
  403c10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403c12:	1bda      	subs	r2, r3, r7
  403c14:	f040 82a1 	bne.w	40415a <_dtoa_r+0x9d2>
  403c18:	2101      	movs	r1, #1
  403c1a:	4620      	mov	r0, r4
  403c1c:	f001 f976 	bl	404f0c <__i2b>
  403c20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403c22:	2b00      	cmp	r3, #0
  403c24:	4680      	mov	r8, r0
  403c26:	dd1c      	ble.n	403c62 <_dtoa_r+0x4da>
  403c28:	4601      	mov	r1, r0
  403c2a:	461a      	mov	r2, r3
  403c2c:	4620      	mov	r0, r4
  403c2e:	f001 fa09 	bl	405044 <__pow5mult>
  403c32:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403c34:	2b01      	cmp	r3, #1
  403c36:	4680      	mov	r8, r0
  403c38:	f340 8254 	ble.w	4040e4 <_dtoa_r+0x95c>
  403c3c:	2300      	movs	r3, #0
  403c3e:	930c      	str	r3, [sp, #48]	; 0x30
  403c40:	f8d8 3010 	ldr.w	r3, [r8, #16]
  403c44:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  403c48:	6918      	ldr	r0, [r3, #16]
  403c4a:	f001 f90f 	bl	404e6c <__hi0bits>
  403c4e:	f1c0 0020 	rsb	r0, r0, #32
  403c52:	e010      	b.n	403c76 <_dtoa_r+0x4ee>
  403c54:	f1c3 0520 	rsb	r5, r3, #32
  403c58:	fa0a f005 	lsl.w	r0, sl, r5
  403c5c:	e674      	b.n	403948 <_dtoa_r+0x1c0>
  403c5e:	900e      	str	r0, [sp, #56]	; 0x38
  403c60:	e63c      	b.n	4038dc <_dtoa_r+0x154>
  403c62:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403c64:	2b01      	cmp	r3, #1
  403c66:	f340 8287 	ble.w	404178 <_dtoa_r+0x9f0>
  403c6a:	2300      	movs	r3, #0
  403c6c:	930c      	str	r3, [sp, #48]	; 0x30
  403c6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403c70:	2001      	movs	r0, #1
  403c72:	2b00      	cmp	r3, #0
  403c74:	d1e4      	bne.n	403c40 <_dtoa_r+0x4b8>
  403c76:	9a06      	ldr	r2, [sp, #24]
  403c78:	4410      	add	r0, r2
  403c7a:	f010 001f 	ands.w	r0, r0, #31
  403c7e:	f000 80a1 	beq.w	403dc4 <_dtoa_r+0x63c>
  403c82:	f1c0 0320 	rsb	r3, r0, #32
  403c86:	2b04      	cmp	r3, #4
  403c88:	f340 849e 	ble.w	4045c8 <_dtoa_r+0xe40>
  403c8c:	9b08      	ldr	r3, [sp, #32]
  403c8e:	f1c0 001c 	rsb	r0, r0, #28
  403c92:	4403      	add	r3, r0
  403c94:	9308      	str	r3, [sp, #32]
  403c96:	4613      	mov	r3, r2
  403c98:	4403      	add	r3, r0
  403c9a:	4405      	add	r5, r0
  403c9c:	9306      	str	r3, [sp, #24]
  403c9e:	9b08      	ldr	r3, [sp, #32]
  403ca0:	2b00      	cmp	r3, #0
  403ca2:	dd05      	ble.n	403cb0 <_dtoa_r+0x528>
  403ca4:	4649      	mov	r1, r9
  403ca6:	461a      	mov	r2, r3
  403ca8:	4620      	mov	r0, r4
  403caa:	f001 fa1b 	bl	4050e4 <__lshift>
  403cae:	4681      	mov	r9, r0
  403cb0:	9b06      	ldr	r3, [sp, #24]
  403cb2:	2b00      	cmp	r3, #0
  403cb4:	dd05      	ble.n	403cc2 <_dtoa_r+0x53a>
  403cb6:	4641      	mov	r1, r8
  403cb8:	461a      	mov	r2, r3
  403cba:	4620      	mov	r0, r4
  403cbc:	f001 fa12 	bl	4050e4 <__lshift>
  403cc0:	4680      	mov	r8, r0
  403cc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403cc4:	2b00      	cmp	r3, #0
  403cc6:	f040 8086 	bne.w	403dd6 <_dtoa_r+0x64e>
  403cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403ccc:	2b00      	cmp	r3, #0
  403cce:	f340 8266 	ble.w	40419e <_dtoa_r+0xa16>
  403cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403cd4:	2b00      	cmp	r3, #0
  403cd6:	f000 8098 	beq.w	403e0a <_dtoa_r+0x682>
  403cda:	2d00      	cmp	r5, #0
  403cdc:	dd05      	ble.n	403cea <_dtoa_r+0x562>
  403cde:	4631      	mov	r1, r6
  403ce0:	462a      	mov	r2, r5
  403ce2:	4620      	mov	r0, r4
  403ce4:	f001 f9fe 	bl	4050e4 <__lshift>
  403ce8:	4606      	mov	r6, r0
  403cea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403cec:	2b00      	cmp	r3, #0
  403cee:	f040 8337 	bne.w	404360 <_dtoa_r+0xbd8>
  403cf2:	9606      	str	r6, [sp, #24]
  403cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403cf6:	9a04      	ldr	r2, [sp, #16]
  403cf8:	f8dd b018 	ldr.w	fp, [sp, #24]
  403cfc:	3b01      	subs	r3, #1
  403cfe:	18d3      	adds	r3, r2, r3
  403d00:	930b      	str	r3, [sp, #44]	; 0x2c
  403d02:	f00a 0301 	and.w	r3, sl, #1
  403d06:	930c      	str	r3, [sp, #48]	; 0x30
  403d08:	4617      	mov	r7, r2
  403d0a:	46c2      	mov	sl, r8
  403d0c:	4651      	mov	r1, sl
  403d0e:	4648      	mov	r0, r9
  403d10:	f7ff fca4 	bl	40365c <quorem>
  403d14:	4631      	mov	r1, r6
  403d16:	4605      	mov	r5, r0
  403d18:	4648      	mov	r0, r9
  403d1a:	f001 fa35 	bl	405188 <__mcmp>
  403d1e:	465a      	mov	r2, fp
  403d20:	900a      	str	r0, [sp, #40]	; 0x28
  403d22:	4651      	mov	r1, sl
  403d24:	4620      	mov	r0, r4
  403d26:	f001 fa4b 	bl	4051c0 <__mdiff>
  403d2a:	68c2      	ldr	r2, [r0, #12]
  403d2c:	4680      	mov	r8, r0
  403d2e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  403d32:	2a00      	cmp	r2, #0
  403d34:	f040 822b 	bne.w	40418e <_dtoa_r+0xa06>
  403d38:	4601      	mov	r1, r0
  403d3a:	4648      	mov	r0, r9
  403d3c:	9308      	str	r3, [sp, #32]
  403d3e:	f001 fa23 	bl	405188 <__mcmp>
  403d42:	4641      	mov	r1, r8
  403d44:	9006      	str	r0, [sp, #24]
  403d46:	4620      	mov	r0, r4
  403d48:	f001 f846 	bl	404dd8 <_Bfree>
  403d4c:	9a06      	ldr	r2, [sp, #24]
  403d4e:	9b08      	ldr	r3, [sp, #32]
  403d50:	b932      	cbnz	r2, 403d60 <_dtoa_r+0x5d8>
  403d52:	9924      	ldr	r1, [sp, #144]	; 0x90
  403d54:	b921      	cbnz	r1, 403d60 <_dtoa_r+0x5d8>
  403d56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403d58:	2a00      	cmp	r2, #0
  403d5a:	f000 83ef 	beq.w	40453c <_dtoa_r+0xdb4>
  403d5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403d60:	990a      	ldr	r1, [sp, #40]	; 0x28
  403d62:	2900      	cmp	r1, #0
  403d64:	f2c0 829f 	blt.w	4042a6 <_dtoa_r+0xb1e>
  403d68:	d105      	bne.n	403d76 <_dtoa_r+0x5ee>
  403d6a:	9924      	ldr	r1, [sp, #144]	; 0x90
  403d6c:	b919      	cbnz	r1, 403d76 <_dtoa_r+0x5ee>
  403d6e:	990c      	ldr	r1, [sp, #48]	; 0x30
  403d70:	2900      	cmp	r1, #0
  403d72:	f000 8298 	beq.w	4042a6 <_dtoa_r+0xb1e>
  403d76:	2a00      	cmp	r2, #0
  403d78:	f300 8306 	bgt.w	404388 <_dtoa_r+0xc00>
  403d7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403d7e:	703b      	strb	r3, [r7, #0]
  403d80:	f107 0801 	add.w	r8, r7, #1
  403d84:	4297      	cmp	r7, r2
  403d86:	4645      	mov	r5, r8
  403d88:	f000 830c 	beq.w	4043a4 <_dtoa_r+0xc1c>
  403d8c:	4649      	mov	r1, r9
  403d8e:	2300      	movs	r3, #0
  403d90:	220a      	movs	r2, #10
  403d92:	4620      	mov	r0, r4
  403d94:	f001 f82a 	bl	404dec <__multadd>
  403d98:	455e      	cmp	r6, fp
  403d9a:	4681      	mov	r9, r0
  403d9c:	4631      	mov	r1, r6
  403d9e:	f04f 0300 	mov.w	r3, #0
  403da2:	f04f 020a 	mov.w	r2, #10
  403da6:	4620      	mov	r0, r4
  403da8:	f000 81eb 	beq.w	404182 <_dtoa_r+0x9fa>
  403dac:	f001 f81e 	bl	404dec <__multadd>
  403db0:	4659      	mov	r1, fp
  403db2:	4606      	mov	r6, r0
  403db4:	2300      	movs	r3, #0
  403db6:	220a      	movs	r2, #10
  403db8:	4620      	mov	r0, r4
  403dba:	f001 f817 	bl	404dec <__multadd>
  403dbe:	4647      	mov	r7, r8
  403dc0:	4683      	mov	fp, r0
  403dc2:	e7a3      	b.n	403d0c <_dtoa_r+0x584>
  403dc4:	201c      	movs	r0, #28
  403dc6:	9b08      	ldr	r3, [sp, #32]
  403dc8:	4403      	add	r3, r0
  403dca:	9308      	str	r3, [sp, #32]
  403dcc:	9b06      	ldr	r3, [sp, #24]
  403dce:	4403      	add	r3, r0
  403dd0:	4405      	add	r5, r0
  403dd2:	9306      	str	r3, [sp, #24]
  403dd4:	e763      	b.n	403c9e <_dtoa_r+0x516>
  403dd6:	4641      	mov	r1, r8
  403dd8:	4648      	mov	r0, r9
  403dda:	f001 f9d5 	bl	405188 <__mcmp>
  403dde:	2800      	cmp	r0, #0
  403de0:	f6bf af73 	bge.w	403cca <_dtoa_r+0x542>
  403de4:	9f02      	ldr	r7, [sp, #8]
  403de6:	4649      	mov	r1, r9
  403de8:	2300      	movs	r3, #0
  403dea:	220a      	movs	r2, #10
  403dec:	4620      	mov	r0, r4
  403dee:	3f01      	subs	r7, #1
  403df0:	9702      	str	r7, [sp, #8]
  403df2:	f000 fffb 	bl	404dec <__multadd>
  403df6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403df8:	4681      	mov	r9, r0
  403dfa:	2b00      	cmp	r3, #0
  403dfc:	f040 83b6 	bne.w	40456c <_dtoa_r+0xde4>
  403e00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403e02:	2b00      	cmp	r3, #0
  403e04:	f340 83bf 	ble.w	404586 <_dtoa_r+0xdfe>
  403e08:	930a      	str	r3, [sp, #40]	; 0x28
  403e0a:	f8dd b010 	ldr.w	fp, [sp, #16]
  403e0e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  403e10:	465d      	mov	r5, fp
  403e12:	e002      	b.n	403e1a <_dtoa_r+0x692>
  403e14:	f000 ffea 	bl	404dec <__multadd>
  403e18:	4681      	mov	r9, r0
  403e1a:	4641      	mov	r1, r8
  403e1c:	4648      	mov	r0, r9
  403e1e:	f7ff fc1d 	bl	40365c <quorem>
  403e22:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  403e26:	f805 ab01 	strb.w	sl, [r5], #1
  403e2a:	eba5 030b 	sub.w	r3, r5, fp
  403e2e:	42bb      	cmp	r3, r7
  403e30:	f04f 020a 	mov.w	r2, #10
  403e34:	f04f 0300 	mov.w	r3, #0
  403e38:	4649      	mov	r1, r9
  403e3a:	4620      	mov	r0, r4
  403e3c:	dbea      	blt.n	403e14 <_dtoa_r+0x68c>
  403e3e:	9b04      	ldr	r3, [sp, #16]
  403e40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403e42:	2a01      	cmp	r2, #1
  403e44:	bfac      	ite	ge
  403e46:	189b      	addge	r3, r3, r2
  403e48:	3301      	addlt	r3, #1
  403e4a:	461d      	mov	r5, r3
  403e4c:	f04f 0b00 	mov.w	fp, #0
  403e50:	4649      	mov	r1, r9
  403e52:	2201      	movs	r2, #1
  403e54:	4620      	mov	r0, r4
  403e56:	f001 f945 	bl	4050e4 <__lshift>
  403e5a:	4641      	mov	r1, r8
  403e5c:	4681      	mov	r9, r0
  403e5e:	f001 f993 	bl	405188 <__mcmp>
  403e62:	2800      	cmp	r0, #0
  403e64:	f340 823d 	ble.w	4042e2 <_dtoa_r+0xb5a>
  403e68:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  403e6c:	9904      	ldr	r1, [sp, #16]
  403e6e:	1e6b      	subs	r3, r5, #1
  403e70:	e004      	b.n	403e7c <_dtoa_r+0x6f4>
  403e72:	428b      	cmp	r3, r1
  403e74:	f000 81ae 	beq.w	4041d4 <_dtoa_r+0xa4c>
  403e78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  403e7c:	2a39      	cmp	r2, #57	; 0x39
  403e7e:	f103 0501 	add.w	r5, r3, #1
  403e82:	d0f6      	beq.n	403e72 <_dtoa_r+0x6ea>
  403e84:	3201      	adds	r2, #1
  403e86:	701a      	strb	r2, [r3, #0]
  403e88:	4641      	mov	r1, r8
  403e8a:	4620      	mov	r0, r4
  403e8c:	f000 ffa4 	bl	404dd8 <_Bfree>
  403e90:	2e00      	cmp	r6, #0
  403e92:	f43f ae3d 	beq.w	403b10 <_dtoa_r+0x388>
  403e96:	f1bb 0f00 	cmp.w	fp, #0
  403e9a:	d005      	beq.n	403ea8 <_dtoa_r+0x720>
  403e9c:	45b3      	cmp	fp, r6
  403e9e:	d003      	beq.n	403ea8 <_dtoa_r+0x720>
  403ea0:	4659      	mov	r1, fp
  403ea2:	4620      	mov	r0, r4
  403ea4:	f000 ff98 	bl	404dd8 <_Bfree>
  403ea8:	4631      	mov	r1, r6
  403eaa:	4620      	mov	r0, r4
  403eac:	f000 ff94 	bl	404dd8 <_Bfree>
  403eb0:	e62e      	b.n	403b10 <_dtoa_r+0x388>
  403eb2:	2300      	movs	r3, #0
  403eb4:	930b      	str	r3, [sp, #44]	; 0x2c
  403eb6:	9b02      	ldr	r3, [sp, #8]
  403eb8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403eba:	4413      	add	r3, r2
  403ebc:	930f      	str	r3, [sp, #60]	; 0x3c
  403ebe:	3301      	adds	r3, #1
  403ec0:	2b01      	cmp	r3, #1
  403ec2:	461f      	mov	r7, r3
  403ec4:	461e      	mov	r6, r3
  403ec6:	930a      	str	r3, [sp, #40]	; 0x28
  403ec8:	bfb8      	it	lt
  403eca:	2701      	movlt	r7, #1
  403ecc:	2100      	movs	r1, #0
  403ece:	2f17      	cmp	r7, #23
  403ed0:	6461      	str	r1, [r4, #68]	; 0x44
  403ed2:	d90a      	bls.n	403eea <_dtoa_r+0x762>
  403ed4:	2201      	movs	r2, #1
  403ed6:	2304      	movs	r3, #4
  403ed8:	005b      	lsls	r3, r3, #1
  403eda:	f103 0014 	add.w	r0, r3, #20
  403ede:	4287      	cmp	r7, r0
  403ee0:	4611      	mov	r1, r2
  403ee2:	f102 0201 	add.w	r2, r2, #1
  403ee6:	d2f7      	bcs.n	403ed8 <_dtoa_r+0x750>
  403ee8:	6461      	str	r1, [r4, #68]	; 0x44
  403eea:	4620      	mov	r0, r4
  403eec:	f000 ff4e 	bl	404d8c <_Balloc>
  403ef0:	2e0e      	cmp	r6, #14
  403ef2:	9004      	str	r0, [sp, #16]
  403ef4:	6420      	str	r0, [r4, #64]	; 0x40
  403ef6:	f63f ad41 	bhi.w	40397c <_dtoa_r+0x1f4>
  403efa:	2d00      	cmp	r5, #0
  403efc:	f43f ad3e 	beq.w	40397c <_dtoa_r+0x1f4>
  403f00:	9902      	ldr	r1, [sp, #8]
  403f02:	2900      	cmp	r1, #0
  403f04:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  403f08:	f340 8202 	ble.w	404310 <_dtoa_r+0xb88>
  403f0c:	4bb8      	ldr	r3, [pc, #736]	; (4041f0 <_dtoa_r+0xa68>)
  403f0e:	f001 020f 	and.w	r2, r1, #15
  403f12:	110d      	asrs	r5, r1, #4
  403f14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403f18:	06e9      	lsls	r1, r5, #27
  403f1a:	e9d3 6700 	ldrd	r6, r7, [r3]
  403f1e:	f140 81ae 	bpl.w	40427e <_dtoa_r+0xaf6>
  403f22:	4bb4      	ldr	r3, [pc, #720]	; (4041f4 <_dtoa_r+0xa6c>)
  403f24:	4650      	mov	r0, sl
  403f26:	4659      	mov	r1, fp
  403f28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  403f2c:	f002 fa0c 	bl	406348 <__aeabi_ddiv>
  403f30:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  403f34:	f005 050f 	and.w	r5, r5, #15
  403f38:	f04f 0a03 	mov.w	sl, #3
  403f3c:	b18d      	cbz	r5, 403f62 <_dtoa_r+0x7da>
  403f3e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4041f4 <_dtoa_r+0xa6c>
  403f42:	07ea      	lsls	r2, r5, #31
  403f44:	d509      	bpl.n	403f5a <_dtoa_r+0x7d2>
  403f46:	4630      	mov	r0, r6
  403f48:	4639      	mov	r1, r7
  403f4a:	e9d8 2300 	ldrd	r2, r3, [r8]
  403f4e:	f002 f8d1 	bl	4060f4 <__aeabi_dmul>
  403f52:	f10a 0a01 	add.w	sl, sl, #1
  403f56:	4606      	mov	r6, r0
  403f58:	460f      	mov	r7, r1
  403f5a:	106d      	asrs	r5, r5, #1
  403f5c:	f108 0808 	add.w	r8, r8, #8
  403f60:	d1ef      	bne.n	403f42 <_dtoa_r+0x7ba>
  403f62:	463b      	mov	r3, r7
  403f64:	4632      	mov	r2, r6
  403f66:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  403f6a:	f002 f9ed 	bl	406348 <__aeabi_ddiv>
  403f6e:	4607      	mov	r7, r0
  403f70:	4688      	mov	r8, r1
  403f72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403f74:	b143      	cbz	r3, 403f88 <_dtoa_r+0x800>
  403f76:	2200      	movs	r2, #0
  403f78:	4b9f      	ldr	r3, [pc, #636]	; (4041f8 <_dtoa_r+0xa70>)
  403f7a:	4638      	mov	r0, r7
  403f7c:	4641      	mov	r1, r8
  403f7e:	f002 fb2b 	bl	4065d8 <__aeabi_dcmplt>
  403f82:	2800      	cmp	r0, #0
  403f84:	f040 8286 	bne.w	404494 <_dtoa_r+0xd0c>
  403f88:	4650      	mov	r0, sl
  403f8a:	f002 f84d 	bl	406028 <__aeabi_i2d>
  403f8e:	463a      	mov	r2, r7
  403f90:	4643      	mov	r3, r8
  403f92:	f002 f8af 	bl	4060f4 <__aeabi_dmul>
  403f96:	4b99      	ldr	r3, [pc, #612]	; (4041fc <_dtoa_r+0xa74>)
  403f98:	2200      	movs	r2, #0
  403f9a:	f001 fef9 	bl	405d90 <__adddf3>
  403f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403fa0:	4605      	mov	r5, r0
  403fa2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  403fa6:	2b00      	cmp	r3, #0
  403fa8:	f000 813e 	beq.w	404228 <_dtoa_r+0xaa0>
  403fac:	9b02      	ldr	r3, [sp, #8]
  403fae:	9315      	str	r3, [sp, #84]	; 0x54
  403fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403fb2:	9312      	str	r3, [sp, #72]	; 0x48
  403fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403fb6:	2b00      	cmp	r3, #0
  403fb8:	f000 81fa 	beq.w	4043b0 <_dtoa_r+0xc28>
  403fbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403fbe:	4b8c      	ldr	r3, [pc, #560]	; (4041f0 <_dtoa_r+0xa68>)
  403fc0:	498f      	ldr	r1, [pc, #572]	; (404200 <_dtoa_r+0xa78>)
  403fc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403fc6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  403fca:	2000      	movs	r0, #0
  403fcc:	f002 f9bc 	bl	406348 <__aeabi_ddiv>
  403fd0:	462a      	mov	r2, r5
  403fd2:	4633      	mov	r3, r6
  403fd4:	f001 feda 	bl	405d8c <__aeabi_dsub>
  403fd8:	4682      	mov	sl, r0
  403fda:	468b      	mov	fp, r1
  403fdc:	4638      	mov	r0, r7
  403fde:	4641      	mov	r1, r8
  403fe0:	f002 fb38 	bl	406654 <__aeabi_d2iz>
  403fe4:	4605      	mov	r5, r0
  403fe6:	f002 f81f 	bl	406028 <__aeabi_i2d>
  403fea:	4602      	mov	r2, r0
  403fec:	460b      	mov	r3, r1
  403fee:	4638      	mov	r0, r7
  403ff0:	4641      	mov	r1, r8
  403ff2:	f001 fecb 	bl	405d8c <__aeabi_dsub>
  403ff6:	3530      	adds	r5, #48	; 0x30
  403ff8:	fa5f f885 	uxtb.w	r8, r5
  403ffc:	9d04      	ldr	r5, [sp, #16]
  403ffe:	4606      	mov	r6, r0
  404000:	460f      	mov	r7, r1
  404002:	f885 8000 	strb.w	r8, [r5]
  404006:	4602      	mov	r2, r0
  404008:	460b      	mov	r3, r1
  40400a:	4650      	mov	r0, sl
  40400c:	4659      	mov	r1, fp
  40400e:	3501      	adds	r5, #1
  404010:	f002 fb00 	bl	406614 <__aeabi_dcmpgt>
  404014:	2800      	cmp	r0, #0
  404016:	d154      	bne.n	4040c2 <_dtoa_r+0x93a>
  404018:	4632      	mov	r2, r6
  40401a:	463b      	mov	r3, r7
  40401c:	2000      	movs	r0, #0
  40401e:	4976      	ldr	r1, [pc, #472]	; (4041f8 <_dtoa_r+0xa70>)
  404020:	f001 feb4 	bl	405d8c <__aeabi_dsub>
  404024:	4602      	mov	r2, r0
  404026:	460b      	mov	r3, r1
  404028:	4650      	mov	r0, sl
  40402a:	4659      	mov	r1, fp
  40402c:	f002 faf2 	bl	406614 <__aeabi_dcmpgt>
  404030:	2800      	cmp	r0, #0
  404032:	f040 8270 	bne.w	404516 <_dtoa_r+0xd8e>
  404036:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404038:	2a01      	cmp	r2, #1
  40403a:	f000 8111 	beq.w	404260 <_dtoa_r+0xad8>
  40403e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404040:	9a04      	ldr	r2, [sp, #16]
  404042:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  404046:	4413      	add	r3, r2
  404048:	4699      	mov	r9, r3
  40404a:	e00d      	b.n	404068 <_dtoa_r+0x8e0>
  40404c:	2000      	movs	r0, #0
  40404e:	496a      	ldr	r1, [pc, #424]	; (4041f8 <_dtoa_r+0xa70>)
  404050:	f001 fe9c 	bl	405d8c <__aeabi_dsub>
  404054:	4652      	mov	r2, sl
  404056:	465b      	mov	r3, fp
  404058:	f002 fabe 	bl	4065d8 <__aeabi_dcmplt>
  40405c:	2800      	cmp	r0, #0
  40405e:	f040 8258 	bne.w	404512 <_dtoa_r+0xd8a>
  404062:	454d      	cmp	r5, r9
  404064:	f000 80fa 	beq.w	40425c <_dtoa_r+0xad4>
  404068:	4650      	mov	r0, sl
  40406a:	4659      	mov	r1, fp
  40406c:	2200      	movs	r2, #0
  40406e:	4b65      	ldr	r3, [pc, #404]	; (404204 <_dtoa_r+0xa7c>)
  404070:	f002 f840 	bl	4060f4 <__aeabi_dmul>
  404074:	2200      	movs	r2, #0
  404076:	4b63      	ldr	r3, [pc, #396]	; (404204 <_dtoa_r+0xa7c>)
  404078:	4682      	mov	sl, r0
  40407a:	468b      	mov	fp, r1
  40407c:	4630      	mov	r0, r6
  40407e:	4639      	mov	r1, r7
  404080:	f002 f838 	bl	4060f4 <__aeabi_dmul>
  404084:	460f      	mov	r7, r1
  404086:	4606      	mov	r6, r0
  404088:	f002 fae4 	bl	406654 <__aeabi_d2iz>
  40408c:	4680      	mov	r8, r0
  40408e:	f001 ffcb 	bl	406028 <__aeabi_i2d>
  404092:	4602      	mov	r2, r0
  404094:	460b      	mov	r3, r1
  404096:	4630      	mov	r0, r6
  404098:	4639      	mov	r1, r7
  40409a:	f001 fe77 	bl	405d8c <__aeabi_dsub>
  40409e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4040a2:	fa5f f888 	uxtb.w	r8, r8
  4040a6:	4652      	mov	r2, sl
  4040a8:	465b      	mov	r3, fp
  4040aa:	f805 8b01 	strb.w	r8, [r5], #1
  4040ae:	4606      	mov	r6, r0
  4040b0:	460f      	mov	r7, r1
  4040b2:	f002 fa91 	bl	4065d8 <__aeabi_dcmplt>
  4040b6:	4632      	mov	r2, r6
  4040b8:	463b      	mov	r3, r7
  4040ba:	2800      	cmp	r0, #0
  4040bc:	d0c6      	beq.n	40404c <_dtoa_r+0x8c4>
  4040be:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4040c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4040c4:	9302      	str	r3, [sp, #8]
  4040c6:	e523      	b.n	403b10 <_dtoa_r+0x388>
  4040c8:	2300      	movs	r3, #0
  4040ca:	930b      	str	r3, [sp, #44]	; 0x2c
  4040cc:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4040ce:	2b00      	cmp	r3, #0
  4040d0:	f340 80dc 	ble.w	40428c <_dtoa_r+0xb04>
  4040d4:	461f      	mov	r7, r3
  4040d6:	461e      	mov	r6, r3
  4040d8:	930f      	str	r3, [sp, #60]	; 0x3c
  4040da:	930a      	str	r3, [sp, #40]	; 0x28
  4040dc:	e6f6      	b.n	403ecc <_dtoa_r+0x744>
  4040de:	2301      	movs	r3, #1
  4040e0:	930b      	str	r3, [sp, #44]	; 0x2c
  4040e2:	e7f3      	b.n	4040cc <_dtoa_r+0x944>
  4040e4:	f1ba 0f00 	cmp.w	sl, #0
  4040e8:	f47f ada8 	bne.w	403c3c <_dtoa_r+0x4b4>
  4040ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4040f0:	2b00      	cmp	r3, #0
  4040f2:	f47f adba 	bne.w	403c6a <_dtoa_r+0x4e2>
  4040f6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4040fa:	0d3f      	lsrs	r7, r7, #20
  4040fc:	053f      	lsls	r7, r7, #20
  4040fe:	2f00      	cmp	r7, #0
  404100:	f000 820d 	beq.w	40451e <_dtoa_r+0xd96>
  404104:	9b08      	ldr	r3, [sp, #32]
  404106:	3301      	adds	r3, #1
  404108:	9308      	str	r3, [sp, #32]
  40410a:	9b06      	ldr	r3, [sp, #24]
  40410c:	3301      	adds	r3, #1
  40410e:	9306      	str	r3, [sp, #24]
  404110:	2301      	movs	r3, #1
  404112:	930c      	str	r3, [sp, #48]	; 0x30
  404114:	e5ab      	b.n	403c6e <_dtoa_r+0x4e6>
  404116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404118:	2b00      	cmp	r3, #0
  40411a:	f73f ac42 	bgt.w	4039a2 <_dtoa_r+0x21a>
  40411e:	f040 8221 	bne.w	404564 <_dtoa_r+0xddc>
  404122:	2200      	movs	r2, #0
  404124:	4b38      	ldr	r3, [pc, #224]	; (404208 <_dtoa_r+0xa80>)
  404126:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40412a:	f001 ffe3 	bl	4060f4 <__aeabi_dmul>
  40412e:	4652      	mov	r2, sl
  404130:	465b      	mov	r3, fp
  404132:	f002 fa65 	bl	406600 <__aeabi_dcmpge>
  404136:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40413a:	4646      	mov	r6, r8
  40413c:	2800      	cmp	r0, #0
  40413e:	d041      	beq.n	4041c4 <_dtoa_r+0xa3c>
  404140:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404142:	9d04      	ldr	r5, [sp, #16]
  404144:	43db      	mvns	r3, r3
  404146:	9302      	str	r3, [sp, #8]
  404148:	4641      	mov	r1, r8
  40414a:	4620      	mov	r0, r4
  40414c:	f000 fe44 	bl	404dd8 <_Bfree>
  404150:	2e00      	cmp	r6, #0
  404152:	f43f acdd 	beq.w	403b10 <_dtoa_r+0x388>
  404156:	e6a7      	b.n	403ea8 <_dtoa_r+0x720>
  404158:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40415a:	4649      	mov	r1, r9
  40415c:	4620      	mov	r0, r4
  40415e:	f000 ff71 	bl	405044 <__pow5mult>
  404162:	4681      	mov	r9, r0
  404164:	e558      	b.n	403c18 <_dtoa_r+0x490>
  404166:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404168:	2a00      	cmp	r2, #0
  40416a:	f000 8187 	beq.w	40447c <_dtoa_r+0xcf4>
  40416e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  404172:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404174:	9d08      	ldr	r5, [sp, #32]
  404176:	e4f2      	b.n	403b5e <_dtoa_r+0x3d6>
  404178:	f1ba 0f00 	cmp.w	sl, #0
  40417c:	f47f ad75 	bne.w	403c6a <_dtoa_r+0x4e2>
  404180:	e7b4      	b.n	4040ec <_dtoa_r+0x964>
  404182:	f000 fe33 	bl	404dec <__multadd>
  404186:	4647      	mov	r7, r8
  404188:	4606      	mov	r6, r0
  40418a:	4683      	mov	fp, r0
  40418c:	e5be      	b.n	403d0c <_dtoa_r+0x584>
  40418e:	4601      	mov	r1, r0
  404190:	4620      	mov	r0, r4
  404192:	9306      	str	r3, [sp, #24]
  404194:	f000 fe20 	bl	404dd8 <_Bfree>
  404198:	2201      	movs	r2, #1
  40419a:	9b06      	ldr	r3, [sp, #24]
  40419c:	e5e0      	b.n	403d60 <_dtoa_r+0x5d8>
  40419e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4041a0:	2b02      	cmp	r3, #2
  4041a2:	f77f ad96 	ble.w	403cd2 <_dtoa_r+0x54a>
  4041a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4041a8:	2b00      	cmp	r3, #0
  4041aa:	d1c9      	bne.n	404140 <_dtoa_r+0x9b8>
  4041ac:	4641      	mov	r1, r8
  4041ae:	2205      	movs	r2, #5
  4041b0:	4620      	mov	r0, r4
  4041b2:	f000 fe1b 	bl	404dec <__multadd>
  4041b6:	4601      	mov	r1, r0
  4041b8:	4680      	mov	r8, r0
  4041ba:	4648      	mov	r0, r9
  4041bc:	f000 ffe4 	bl	405188 <__mcmp>
  4041c0:	2800      	cmp	r0, #0
  4041c2:	ddbd      	ble.n	404140 <_dtoa_r+0x9b8>
  4041c4:	9a02      	ldr	r2, [sp, #8]
  4041c6:	9904      	ldr	r1, [sp, #16]
  4041c8:	2331      	movs	r3, #49	; 0x31
  4041ca:	3201      	adds	r2, #1
  4041cc:	9202      	str	r2, [sp, #8]
  4041ce:	700b      	strb	r3, [r1, #0]
  4041d0:	1c4d      	adds	r5, r1, #1
  4041d2:	e7b9      	b.n	404148 <_dtoa_r+0x9c0>
  4041d4:	9a02      	ldr	r2, [sp, #8]
  4041d6:	3201      	adds	r2, #1
  4041d8:	9202      	str	r2, [sp, #8]
  4041da:	9a04      	ldr	r2, [sp, #16]
  4041dc:	2331      	movs	r3, #49	; 0x31
  4041de:	7013      	strb	r3, [r2, #0]
  4041e0:	e652      	b.n	403e88 <_dtoa_r+0x700>
  4041e2:	2301      	movs	r3, #1
  4041e4:	930b      	str	r3, [sp, #44]	; 0x2c
  4041e6:	e666      	b.n	403eb6 <_dtoa_r+0x72e>
  4041e8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4041ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4041ee:	e48f      	b.n	403b10 <_dtoa_r+0x388>
  4041f0:	004071b8 	.word	0x004071b8
  4041f4:	00407190 	.word	0x00407190
  4041f8:	3ff00000 	.word	0x3ff00000
  4041fc:	401c0000 	.word	0x401c0000
  404200:	3fe00000 	.word	0x3fe00000
  404204:	40240000 	.word	0x40240000
  404208:	40140000 	.word	0x40140000
  40420c:	4650      	mov	r0, sl
  40420e:	f001 ff0b 	bl	406028 <__aeabi_i2d>
  404212:	463a      	mov	r2, r7
  404214:	4643      	mov	r3, r8
  404216:	f001 ff6d 	bl	4060f4 <__aeabi_dmul>
  40421a:	2200      	movs	r2, #0
  40421c:	4bc1      	ldr	r3, [pc, #772]	; (404524 <_dtoa_r+0xd9c>)
  40421e:	f001 fdb7 	bl	405d90 <__adddf3>
  404222:	4605      	mov	r5, r0
  404224:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  404228:	4641      	mov	r1, r8
  40422a:	2200      	movs	r2, #0
  40422c:	4bbe      	ldr	r3, [pc, #760]	; (404528 <_dtoa_r+0xda0>)
  40422e:	4638      	mov	r0, r7
  404230:	f001 fdac 	bl	405d8c <__aeabi_dsub>
  404234:	462a      	mov	r2, r5
  404236:	4633      	mov	r3, r6
  404238:	4682      	mov	sl, r0
  40423a:	468b      	mov	fp, r1
  40423c:	f002 f9ea 	bl	406614 <__aeabi_dcmpgt>
  404240:	4680      	mov	r8, r0
  404242:	2800      	cmp	r0, #0
  404244:	f040 8110 	bne.w	404468 <_dtoa_r+0xce0>
  404248:	462a      	mov	r2, r5
  40424a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40424e:	4650      	mov	r0, sl
  404250:	4659      	mov	r1, fp
  404252:	f002 f9c1 	bl	4065d8 <__aeabi_dcmplt>
  404256:	b118      	cbz	r0, 404260 <_dtoa_r+0xad8>
  404258:	4646      	mov	r6, r8
  40425a:	e771      	b.n	404140 <_dtoa_r+0x9b8>
  40425c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404260:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  404264:	f7ff bb8a 	b.w	40397c <_dtoa_r+0x1f4>
  404268:	9804      	ldr	r0, [sp, #16]
  40426a:	f7ff babb 	b.w	4037e4 <_dtoa_r+0x5c>
  40426e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404270:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404272:	970c      	str	r7, [sp, #48]	; 0x30
  404274:	1afb      	subs	r3, r7, r3
  404276:	441a      	add	r2, r3
  404278:	920d      	str	r2, [sp, #52]	; 0x34
  40427a:	2700      	movs	r7, #0
  40427c:	e469      	b.n	403b52 <_dtoa_r+0x3ca>
  40427e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  404282:	f04f 0a02 	mov.w	sl, #2
  404286:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40428a:	e657      	b.n	403f3c <_dtoa_r+0x7b4>
  40428c:	2100      	movs	r1, #0
  40428e:	2301      	movs	r3, #1
  404290:	6461      	str	r1, [r4, #68]	; 0x44
  404292:	4620      	mov	r0, r4
  404294:	9325      	str	r3, [sp, #148]	; 0x94
  404296:	f000 fd79 	bl	404d8c <_Balloc>
  40429a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40429c:	9004      	str	r0, [sp, #16]
  40429e:	6420      	str	r0, [r4, #64]	; 0x40
  4042a0:	930a      	str	r3, [sp, #40]	; 0x28
  4042a2:	930f      	str	r3, [sp, #60]	; 0x3c
  4042a4:	e629      	b.n	403efa <_dtoa_r+0x772>
  4042a6:	2a00      	cmp	r2, #0
  4042a8:	46d0      	mov	r8, sl
  4042aa:	f8cd b018 	str.w	fp, [sp, #24]
  4042ae:	469a      	mov	sl, r3
  4042b0:	dd11      	ble.n	4042d6 <_dtoa_r+0xb4e>
  4042b2:	4649      	mov	r1, r9
  4042b4:	2201      	movs	r2, #1
  4042b6:	4620      	mov	r0, r4
  4042b8:	f000 ff14 	bl	4050e4 <__lshift>
  4042bc:	4641      	mov	r1, r8
  4042be:	4681      	mov	r9, r0
  4042c0:	f000 ff62 	bl	405188 <__mcmp>
  4042c4:	2800      	cmp	r0, #0
  4042c6:	f340 8146 	ble.w	404556 <_dtoa_r+0xdce>
  4042ca:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4042ce:	f000 8106 	beq.w	4044de <_dtoa_r+0xd56>
  4042d2:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4042d6:	46b3      	mov	fp, r6
  4042d8:	f887 a000 	strb.w	sl, [r7]
  4042dc:	1c7d      	adds	r5, r7, #1
  4042de:	9e06      	ldr	r6, [sp, #24]
  4042e0:	e5d2      	b.n	403e88 <_dtoa_r+0x700>
  4042e2:	d104      	bne.n	4042ee <_dtoa_r+0xb66>
  4042e4:	f01a 0f01 	tst.w	sl, #1
  4042e8:	d001      	beq.n	4042ee <_dtoa_r+0xb66>
  4042ea:	e5bd      	b.n	403e68 <_dtoa_r+0x6e0>
  4042ec:	4615      	mov	r5, r2
  4042ee:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4042f2:	2b30      	cmp	r3, #48	; 0x30
  4042f4:	f105 32ff 	add.w	r2, r5, #4294967295
  4042f8:	d0f8      	beq.n	4042ec <_dtoa_r+0xb64>
  4042fa:	e5c5      	b.n	403e88 <_dtoa_r+0x700>
  4042fc:	9904      	ldr	r1, [sp, #16]
  4042fe:	2230      	movs	r2, #48	; 0x30
  404300:	700a      	strb	r2, [r1, #0]
  404302:	9a02      	ldr	r2, [sp, #8]
  404304:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404308:	3201      	adds	r2, #1
  40430a:	9202      	str	r2, [sp, #8]
  40430c:	f7ff bbfc 	b.w	403b08 <_dtoa_r+0x380>
  404310:	f000 80bb 	beq.w	40448a <_dtoa_r+0xd02>
  404314:	9b02      	ldr	r3, [sp, #8]
  404316:	425d      	negs	r5, r3
  404318:	4b84      	ldr	r3, [pc, #528]	; (40452c <_dtoa_r+0xda4>)
  40431a:	f005 020f 	and.w	r2, r5, #15
  40431e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404322:	e9d3 2300 	ldrd	r2, r3, [r3]
  404326:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40432a:	f001 fee3 	bl	4060f4 <__aeabi_dmul>
  40432e:	112d      	asrs	r5, r5, #4
  404330:	4607      	mov	r7, r0
  404332:	4688      	mov	r8, r1
  404334:	f000 812c 	beq.w	404590 <_dtoa_r+0xe08>
  404338:	4e7d      	ldr	r6, [pc, #500]	; (404530 <_dtoa_r+0xda8>)
  40433a:	f04f 0a02 	mov.w	sl, #2
  40433e:	07eb      	lsls	r3, r5, #31
  404340:	d509      	bpl.n	404356 <_dtoa_r+0xbce>
  404342:	4638      	mov	r0, r7
  404344:	4641      	mov	r1, r8
  404346:	e9d6 2300 	ldrd	r2, r3, [r6]
  40434a:	f001 fed3 	bl	4060f4 <__aeabi_dmul>
  40434e:	f10a 0a01 	add.w	sl, sl, #1
  404352:	4607      	mov	r7, r0
  404354:	4688      	mov	r8, r1
  404356:	106d      	asrs	r5, r5, #1
  404358:	f106 0608 	add.w	r6, r6, #8
  40435c:	d1ef      	bne.n	40433e <_dtoa_r+0xbb6>
  40435e:	e608      	b.n	403f72 <_dtoa_r+0x7ea>
  404360:	6871      	ldr	r1, [r6, #4]
  404362:	4620      	mov	r0, r4
  404364:	f000 fd12 	bl	404d8c <_Balloc>
  404368:	6933      	ldr	r3, [r6, #16]
  40436a:	3302      	adds	r3, #2
  40436c:	009a      	lsls	r2, r3, #2
  40436e:	4605      	mov	r5, r0
  404370:	f106 010c 	add.w	r1, r6, #12
  404374:	300c      	adds	r0, #12
  404376:	f000 fc63 	bl	404c40 <memcpy>
  40437a:	4629      	mov	r1, r5
  40437c:	2201      	movs	r2, #1
  40437e:	4620      	mov	r0, r4
  404380:	f000 feb0 	bl	4050e4 <__lshift>
  404384:	9006      	str	r0, [sp, #24]
  404386:	e4b5      	b.n	403cf4 <_dtoa_r+0x56c>
  404388:	2b39      	cmp	r3, #57	; 0x39
  40438a:	f8cd b018 	str.w	fp, [sp, #24]
  40438e:	46d0      	mov	r8, sl
  404390:	f000 80a5 	beq.w	4044de <_dtoa_r+0xd56>
  404394:	f103 0a01 	add.w	sl, r3, #1
  404398:	46b3      	mov	fp, r6
  40439a:	f887 a000 	strb.w	sl, [r7]
  40439e:	1c7d      	adds	r5, r7, #1
  4043a0:	9e06      	ldr	r6, [sp, #24]
  4043a2:	e571      	b.n	403e88 <_dtoa_r+0x700>
  4043a4:	465a      	mov	r2, fp
  4043a6:	46d0      	mov	r8, sl
  4043a8:	46b3      	mov	fp, r6
  4043aa:	469a      	mov	sl, r3
  4043ac:	4616      	mov	r6, r2
  4043ae:	e54f      	b.n	403e50 <_dtoa_r+0x6c8>
  4043b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4043b2:	495e      	ldr	r1, [pc, #376]	; (40452c <_dtoa_r+0xda4>)
  4043b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4043b8:	462a      	mov	r2, r5
  4043ba:	4633      	mov	r3, r6
  4043bc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4043c0:	f001 fe98 	bl	4060f4 <__aeabi_dmul>
  4043c4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4043c8:	4638      	mov	r0, r7
  4043ca:	4641      	mov	r1, r8
  4043cc:	f002 f942 	bl	406654 <__aeabi_d2iz>
  4043d0:	4605      	mov	r5, r0
  4043d2:	f001 fe29 	bl	406028 <__aeabi_i2d>
  4043d6:	460b      	mov	r3, r1
  4043d8:	4602      	mov	r2, r0
  4043da:	4641      	mov	r1, r8
  4043dc:	4638      	mov	r0, r7
  4043de:	f001 fcd5 	bl	405d8c <__aeabi_dsub>
  4043e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4043e4:	460f      	mov	r7, r1
  4043e6:	9904      	ldr	r1, [sp, #16]
  4043e8:	3530      	adds	r5, #48	; 0x30
  4043ea:	2b01      	cmp	r3, #1
  4043ec:	700d      	strb	r5, [r1, #0]
  4043ee:	4606      	mov	r6, r0
  4043f0:	f101 0501 	add.w	r5, r1, #1
  4043f4:	d026      	beq.n	404444 <_dtoa_r+0xcbc>
  4043f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4043f8:	9a04      	ldr	r2, [sp, #16]
  4043fa:	f8df b13c 	ldr.w	fp, [pc, #316]	; 404538 <_dtoa_r+0xdb0>
  4043fe:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  404402:	4413      	add	r3, r2
  404404:	f04f 0a00 	mov.w	sl, #0
  404408:	4699      	mov	r9, r3
  40440a:	4652      	mov	r2, sl
  40440c:	465b      	mov	r3, fp
  40440e:	4630      	mov	r0, r6
  404410:	4639      	mov	r1, r7
  404412:	f001 fe6f 	bl	4060f4 <__aeabi_dmul>
  404416:	460f      	mov	r7, r1
  404418:	4606      	mov	r6, r0
  40441a:	f002 f91b 	bl	406654 <__aeabi_d2iz>
  40441e:	4680      	mov	r8, r0
  404420:	f001 fe02 	bl	406028 <__aeabi_i2d>
  404424:	f108 0830 	add.w	r8, r8, #48	; 0x30
  404428:	4602      	mov	r2, r0
  40442a:	460b      	mov	r3, r1
  40442c:	4630      	mov	r0, r6
  40442e:	4639      	mov	r1, r7
  404430:	f001 fcac 	bl	405d8c <__aeabi_dsub>
  404434:	f805 8b01 	strb.w	r8, [r5], #1
  404438:	454d      	cmp	r5, r9
  40443a:	4606      	mov	r6, r0
  40443c:	460f      	mov	r7, r1
  40443e:	d1e4      	bne.n	40440a <_dtoa_r+0xc82>
  404440:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404444:	4b3b      	ldr	r3, [pc, #236]	; (404534 <_dtoa_r+0xdac>)
  404446:	2200      	movs	r2, #0
  404448:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40444c:	f001 fca0 	bl	405d90 <__adddf3>
  404450:	4632      	mov	r2, r6
  404452:	463b      	mov	r3, r7
  404454:	f002 f8c0 	bl	4065d8 <__aeabi_dcmplt>
  404458:	2800      	cmp	r0, #0
  40445a:	d046      	beq.n	4044ea <_dtoa_r+0xd62>
  40445c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40445e:	9302      	str	r3, [sp, #8]
  404460:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404464:	f7ff bb43 	b.w	403aee <_dtoa_r+0x366>
  404468:	f04f 0800 	mov.w	r8, #0
  40446c:	4646      	mov	r6, r8
  40446e:	e6a9      	b.n	4041c4 <_dtoa_r+0xa3c>
  404470:	9b08      	ldr	r3, [sp, #32]
  404472:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404474:	1a9d      	subs	r5, r3, r2
  404476:	2300      	movs	r3, #0
  404478:	f7ff bb71 	b.w	403b5e <_dtoa_r+0x3d6>
  40447c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40447e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404480:	9d08      	ldr	r5, [sp, #32]
  404482:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  404486:	f7ff bb6a 	b.w	403b5e <_dtoa_r+0x3d6>
  40448a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40448e:	f04f 0a02 	mov.w	sl, #2
  404492:	e56e      	b.n	403f72 <_dtoa_r+0x7ea>
  404494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404496:	2b00      	cmp	r3, #0
  404498:	f43f aeb8 	beq.w	40420c <_dtoa_r+0xa84>
  40449c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40449e:	2b00      	cmp	r3, #0
  4044a0:	f77f aede 	ble.w	404260 <_dtoa_r+0xad8>
  4044a4:	2200      	movs	r2, #0
  4044a6:	4b24      	ldr	r3, [pc, #144]	; (404538 <_dtoa_r+0xdb0>)
  4044a8:	4638      	mov	r0, r7
  4044aa:	4641      	mov	r1, r8
  4044ac:	f001 fe22 	bl	4060f4 <__aeabi_dmul>
  4044b0:	4607      	mov	r7, r0
  4044b2:	4688      	mov	r8, r1
  4044b4:	f10a 0001 	add.w	r0, sl, #1
  4044b8:	f001 fdb6 	bl	406028 <__aeabi_i2d>
  4044bc:	463a      	mov	r2, r7
  4044be:	4643      	mov	r3, r8
  4044c0:	f001 fe18 	bl	4060f4 <__aeabi_dmul>
  4044c4:	2200      	movs	r2, #0
  4044c6:	4b17      	ldr	r3, [pc, #92]	; (404524 <_dtoa_r+0xd9c>)
  4044c8:	f001 fc62 	bl	405d90 <__adddf3>
  4044cc:	9a02      	ldr	r2, [sp, #8]
  4044ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4044d0:	9312      	str	r3, [sp, #72]	; 0x48
  4044d2:	3a01      	subs	r2, #1
  4044d4:	4605      	mov	r5, r0
  4044d6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4044da:	9215      	str	r2, [sp, #84]	; 0x54
  4044dc:	e56a      	b.n	403fb4 <_dtoa_r+0x82c>
  4044de:	2239      	movs	r2, #57	; 0x39
  4044e0:	46b3      	mov	fp, r6
  4044e2:	703a      	strb	r2, [r7, #0]
  4044e4:	9e06      	ldr	r6, [sp, #24]
  4044e6:	1c7d      	adds	r5, r7, #1
  4044e8:	e4c0      	b.n	403e6c <_dtoa_r+0x6e4>
  4044ea:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4044ee:	2000      	movs	r0, #0
  4044f0:	4910      	ldr	r1, [pc, #64]	; (404534 <_dtoa_r+0xdac>)
  4044f2:	f001 fc4b 	bl	405d8c <__aeabi_dsub>
  4044f6:	4632      	mov	r2, r6
  4044f8:	463b      	mov	r3, r7
  4044fa:	f002 f88b 	bl	406614 <__aeabi_dcmpgt>
  4044fe:	b908      	cbnz	r0, 404504 <_dtoa_r+0xd7c>
  404500:	e6ae      	b.n	404260 <_dtoa_r+0xad8>
  404502:	4615      	mov	r5, r2
  404504:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404508:	2b30      	cmp	r3, #48	; 0x30
  40450a:	f105 32ff 	add.w	r2, r5, #4294967295
  40450e:	d0f8      	beq.n	404502 <_dtoa_r+0xd7a>
  404510:	e5d7      	b.n	4040c2 <_dtoa_r+0x93a>
  404512:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404516:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404518:	9302      	str	r3, [sp, #8]
  40451a:	f7ff bae8 	b.w	403aee <_dtoa_r+0x366>
  40451e:	970c      	str	r7, [sp, #48]	; 0x30
  404520:	f7ff bba5 	b.w	403c6e <_dtoa_r+0x4e6>
  404524:	401c0000 	.word	0x401c0000
  404528:	40140000 	.word	0x40140000
  40452c:	004071b8 	.word	0x004071b8
  404530:	00407190 	.word	0x00407190
  404534:	3fe00000 	.word	0x3fe00000
  404538:	40240000 	.word	0x40240000
  40453c:	2b39      	cmp	r3, #57	; 0x39
  40453e:	f8cd b018 	str.w	fp, [sp, #24]
  404542:	46d0      	mov	r8, sl
  404544:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404548:	469a      	mov	sl, r3
  40454a:	d0c8      	beq.n	4044de <_dtoa_r+0xd56>
  40454c:	f1bb 0f00 	cmp.w	fp, #0
  404550:	f73f aebf 	bgt.w	4042d2 <_dtoa_r+0xb4a>
  404554:	e6bf      	b.n	4042d6 <_dtoa_r+0xb4e>
  404556:	f47f aebe 	bne.w	4042d6 <_dtoa_r+0xb4e>
  40455a:	f01a 0f01 	tst.w	sl, #1
  40455e:	f43f aeba 	beq.w	4042d6 <_dtoa_r+0xb4e>
  404562:	e6b2      	b.n	4042ca <_dtoa_r+0xb42>
  404564:	f04f 0800 	mov.w	r8, #0
  404568:	4646      	mov	r6, r8
  40456a:	e5e9      	b.n	404140 <_dtoa_r+0x9b8>
  40456c:	4631      	mov	r1, r6
  40456e:	2300      	movs	r3, #0
  404570:	220a      	movs	r2, #10
  404572:	4620      	mov	r0, r4
  404574:	f000 fc3a 	bl	404dec <__multadd>
  404578:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40457a:	2b00      	cmp	r3, #0
  40457c:	4606      	mov	r6, r0
  40457e:	dd0a      	ble.n	404596 <_dtoa_r+0xe0e>
  404580:	930a      	str	r3, [sp, #40]	; 0x28
  404582:	f7ff bbaa 	b.w	403cda <_dtoa_r+0x552>
  404586:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404588:	2b02      	cmp	r3, #2
  40458a:	dc23      	bgt.n	4045d4 <_dtoa_r+0xe4c>
  40458c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40458e:	e43b      	b.n	403e08 <_dtoa_r+0x680>
  404590:	f04f 0a02 	mov.w	sl, #2
  404594:	e4ed      	b.n	403f72 <_dtoa_r+0x7ea>
  404596:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404598:	2b02      	cmp	r3, #2
  40459a:	dc1b      	bgt.n	4045d4 <_dtoa_r+0xe4c>
  40459c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40459e:	e7ef      	b.n	404580 <_dtoa_r+0xdf8>
  4045a0:	2500      	movs	r5, #0
  4045a2:	6465      	str	r5, [r4, #68]	; 0x44
  4045a4:	4629      	mov	r1, r5
  4045a6:	4620      	mov	r0, r4
  4045a8:	f000 fbf0 	bl	404d8c <_Balloc>
  4045ac:	f04f 33ff 	mov.w	r3, #4294967295
  4045b0:	930a      	str	r3, [sp, #40]	; 0x28
  4045b2:	930f      	str	r3, [sp, #60]	; 0x3c
  4045b4:	2301      	movs	r3, #1
  4045b6:	9004      	str	r0, [sp, #16]
  4045b8:	9525      	str	r5, [sp, #148]	; 0x94
  4045ba:	6420      	str	r0, [r4, #64]	; 0x40
  4045bc:	930b      	str	r3, [sp, #44]	; 0x2c
  4045be:	f7ff b9dd 	b.w	40397c <_dtoa_r+0x1f4>
  4045c2:	2501      	movs	r5, #1
  4045c4:	f7ff b9a5 	b.w	403912 <_dtoa_r+0x18a>
  4045c8:	f43f ab69 	beq.w	403c9e <_dtoa_r+0x516>
  4045cc:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4045d0:	f7ff bbf9 	b.w	403dc6 <_dtoa_r+0x63e>
  4045d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4045d6:	930a      	str	r3, [sp, #40]	; 0x28
  4045d8:	e5e5      	b.n	4041a6 <_dtoa_r+0xa1e>
  4045da:	bf00      	nop

004045dc <__libc_fini_array>:
  4045dc:	b538      	push	{r3, r4, r5, lr}
  4045de:	4c0a      	ldr	r4, [pc, #40]	; (404608 <__libc_fini_array+0x2c>)
  4045e0:	4d0a      	ldr	r5, [pc, #40]	; (40460c <__libc_fini_array+0x30>)
  4045e2:	1b64      	subs	r4, r4, r5
  4045e4:	10a4      	asrs	r4, r4, #2
  4045e6:	d00a      	beq.n	4045fe <__libc_fini_array+0x22>
  4045e8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4045ec:	3b01      	subs	r3, #1
  4045ee:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4045f2:	3c01      	subs	r4, #1
  4045f4:	f855 3904 	ldr.w	r3, [r5], #-4
  4045f8:	4798      	blx	r3
  4045fa:	2c00      	cmp	r4, #0
  4045fc:	d1f9      	bne.n	4045f2 <__libc_fini_array+0x16>
  4045fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404602:	f002 bed7 	b.w	4073b4 <_fini>
  404606:	bf00      	nop
  404608:	004073c4 	.word	0x004073c4
  40460c:	004073c0 	.word	0x004073c0

00404610 <_localeconv_r>:
  404610:	4a04      	ldr	r2, [pc, #16]	; (404624 <_localeconv_r+0x14>)
  404612:	4b05      	ldr	r3, [pc, #20]	; (404628 <_localeconv_r+0x18>)
  404614:	6812      	ldr	r2, [r2, #0]
  404616:	6b50      	ldr	r0, [r2, #52]	; 0x34
  404618:	2800      	cmp	r0, #0
  40461a:	bf08      	it	eq
  40461c:	4618      	moveq	r0, r3
  40461e:	30f0      	adds	r0, #240	; 0xf0
  404620:	4770      	bx	lr
  404622:	bf00      	nop
  404624:	20400020 	.word	0x20400020
  404628:	20400864 	.word	0x20400864

0040462c <__retarget_lock_acquire_recursive>:
  40462c:	4770      	bx	lr
  40462e:	bf00      	nop

00404630 <__retarget_lock_release_recursive>:
  404630:	4770      	bx	lr
  404632:	bf00      	nop

00404634 <_malloc_r>:
  404634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404638:	f101 060b 	add.w	r6, r1, #11
  40463c:	2e16      	cmp	r6, #22
  40463e:	b083      	sub	sp, #12
  404640:	4605      	mov	r5, r0
  404642:	f240 809e 	bls.w	404782 <_malloc_r+0x14e>
  404646:	f036 0607 	bics.w	r6, r6, #7
  40464a:	f100 80bd 	bmi.w	4047c8 <_malloc_r+0x194>
  40464e:	42b1      	cmp	r1, r6
  404650:	f200 80ba 	bhi.w	4047c8 <_malloc_r+0x194>
  404654:	f000 fb8e 	bl	404d74 <__malloc_lock>
  404658:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40465c:	f0c0 8293 	bcc.w	404b86 <_malloc_r+0x552>
  404660:	0a73      	lsrs	r3, r6, #9
  404662:	f000 80b8 	beq.w	4047d6 <_malloc_r+0x1a2>
  404666:	2b04      	cmp	r3, #4
  404668:	f200 8179 	bhi.w	40495e <_malloc_r+0x32a>
  40466c:	09b3      	lsrs	r3, r6, #6
  40466e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  404672:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  404676:	00c3      	lsls	r3, r0, #3
  404678:	4fbf      	ldr	r7, [pc, #764]	; (404978 <_malloc_r+0x344>)
  40467a:	443b      	add	r3, r7
  40467c:	f1a3 0108 	sub.w	r1, r3, #8
  404680:	685c      	ldr	r4, [r3, #4]
  404682:	42a1      	cmp	r1, r4
  404684:	d106      	bne.n	404694 <_malloc_r+0x60>
  404686:	e00c      	b.n	4046a2 <_malloc_r+0x6e>
  404688:	2a00      	cmp	r2, #0
  40468a:	f280 80aa 	bge.w	4047e2 <_malloc_r+0x1ae>
  40468e:	68e4      	ldr	r4, [r4, #12]
  404690:	42a1      	cmp	r1, r4
  404692:	d006      	beq.n	4046a2 <_malloc_r+0x6e>
  404694:	6863      	ldr	r3, [r4, #4]
  404696:	f023 0303 	bic.w	r3, r3, #3
  40469a:	1b9a      	subs	r2, r3, r6
  40469c:	2a0f      	cmp	r2, #15
  40469e:	ddf3      	ble.n	404688 <_malloc_r+0x54>
  4046a0:	4670      	mov	r0, lr
  4046a2:	693c      	ldr	r4, [r7, #16]
  4046a4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40498c <_malloc_r+0x358>
  4046a8:	4574      	cmp	r4, lr
  4046aa:	f000 81ab 	beq.w	404a04 <_malloc_r+0x3d0>
  4046ae:	6863      	ldr	r3, [r4, #4]
  4046b0:	f023 0303 	bic.w	r3, r3, #3
  4046b4:	1b9a      	subs	r2, r3, r6
  4046b6:	2a0f      	cmp	r2, #15
  4046b8:	f300 8190 	bgt.w	4049dc <_malloc_r+0x3a8>
  4046bc:	2a00      	cmp	r2, #0
  4046be:	f8c7 e014 	str.w	lr, [r7, #20]
  4046c2:	f8c7 e010 	str.w	lr, [r7, #16]
  4046c6:	f280 809d 	bge.w	404804 <_malloc_r+0x1d0>
  4046ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4046ce:	f080 8161 	bcs.w	404994 <_malloc_r+0x360>
  4046d2:	08db      	lsrs	r3, r3, #3
  4046d4:	f103 0c01 	add.w	ip, r3, #1
  4046d8:	1099      	asrs	r1, r3, #2
  4046da:	687a      	ldr	r2, [r7, #4]
  4046dc:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4046e0:	f8c4 8008 	str.w	r8, [r4, #8]
  4046e4:	2301      	movs	r3, #1
  4046e6:	408b      	lsls	r3, r1
  4046e8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4046ec:	4313      	orrs	r3, r2
  4046ee:	3908      	subs	r1, #8
  4046f0:	60e1      	str	r1, [r4, #12]
  4046f2:	607b      	str	r3, [r7, #4]
  4046f4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4046f8:	f8c8 400c 	str.w	r4, [r8, #12]
  4046fc:	1082      	asrs	r2, r0, #2
  4046fe:	2401      	movs	r4, #1
  404700:	4094      	lsls	r4, r2
  404702:	429c      	cmp	r4, r3
  404704:	f200 808b 	bhi.w	40481e <_malloc_r+0x1ea>
  404708:	421c      	tst	r4, r3
  40470a:	d106      	bne.n	40471a <_malloc_r+0xe6>
  40470c:	f020 0003 	bic.w	r0, r0, #3
  404710:	0064      	lsls	r4, r4, #1
  404712:	421c      	tst	r4, r3
  404714:	f100 0004 	add.w	r0, r0, #4
  404718:	d0fa      	beq.n	404710 <_malloc_r+0xdc>
  40471a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40471e:	46cc      	mov	ip, r9
  404720:	4680      	mov	r8, r0
  404722:	f8dc 300c 	ldr.w	r3, [ip, #12]
  404726:	459c      	cmp	ip, r3
  404728:	d107      	bne.n	40473a <_malloc_r+0x106>
  40472a:	e16d      	b.n	404a08 <_malloc_r+0x3d4>
  40472c:	2a00      	cmp	r2, #0
  40472e:	f280 817b 	bge.w	404a28 <_malloc_r+0x3f4>
  404732:	68db      	ldr	r3, [r3, #12]
  404734:	459c      	cmp	ip, r3
  404736:	f000 8167 	beq.w	404a08 <_malloc_r+0x3d4>
  40473a:	6859      	ldr	r1, [r3, #4]
  40473c:	f021 0103 	bic.w	r1, r1, #3
  404740:	1b8a      	subs	r2, r1, r6
  404742:	2a0f      	cmp	r2, #15
  404744:	ddf2      	ble.n	40472c <_malloc_r+0xf8>
  404746:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40474a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40474e:	9300      	str	r3, [sp, #0]
  404750:	199c      	adds	r4, r3, r6
  404752:	4628      	mov	r0, r5
  404754:	f046 0601 	orr.w	r6, r6, #1
  404758:	f042 0501 	orr.w	r5, r2, #1
  40475c:	605e      	str	r6, [r3, #4]
  40475e:	f8c8 c00c 	str.w	ip, [r8, #12]
  404762:	f8cc 8008 	str.w	r8, [ip, #8]
  404766:	617c      	str	r4, [r7, #20]
  404768:	613c      	str	r4, [r7, #16]
  40476a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40476e:	f8c4 e008 	str.w	lr, [r4, #8]
  404772:	6065      	str	r5, [r4, #4]
  404774:	505a      	str	r2, [r3, r1]
  404776:	f000 fb03 	bl	404d80 <__malloc_unlock>
  40477a:	9b00      	ldr	r3, [sp, #0]
  40477c:	f103 0408 	add.w	r4, r3, #8
  404780:	e01e      	b.n	4047c0 <_malloc_r+0x18c>
  404782:	2910      	cmp	r1, #16
  404784:	d820      	bhi.n	4047c8 <_malloc_r+0x194>
  404786:	f000 faf5 	bl	404d74 <__malloc_lock>
  40478a:	2610      	movs	r6, #16
  40478c:	2318      	movs	r3, #24
  40478e:	2002      	movs	r0, #2
  404790:	4f79      	ldr	r7, [pc, #484]	; (404978 <_malloc_r+0x344>)
  404792:	443b      	add	r3, r7
  404794:	f1a3 0208 	sub.w	r2, r3, #8
  404798:	685c      	ldr	r4, [r3, #4]
  40479a:	4294      	cmp	r4, r2
  40479c:	f000 813d 	beq.w	404a1a <_malloc_r+0x3e6>
  4047a0:	6863      	ldr	r3, [r4, #4]
  4047a2:	68e1      	ldr	r1, [r4, #12]
  4047a4:	68a6      	ldr	r6, [r4, #8]
  4047a6:	f023 0303 	bic.w	r3, r3, #3
  4047aa:	4423      	add	r3, r4
  4047ac:	4628      	mov	r0, r5
  4047ae:	685a      	ldr	r2, [r3, #4]
  4047b0:	60f1      	str	r1, [r6, #12]
  4047b2:	f042 0201 	orr.w	r2, r2, #1
  4047b6:	608e      	str	r6, [r1, #8]
  4047b8:	605a      	str	r2, [r3, #4]
  4047ba:	f000 fae1 	bl	404d80 <__malloc_unlock>
  4047be:	3408      	adds	r4, #8
  4047c0:	4620      	mov	r0, r4
  4047c2:	b003      	add	sp, #12
  4047c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047c8:	2400      	movs	r4, #0
  4047ca:	230c      	movs	r3, #12
  4047cc:	4620      	mov	r0, r4
  4047ce:	602b      	str	r3, [r5, #0]
  4047d0:	b003      	add	sp, #12
  4047d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047d6:	2040      	movs	r0, #64	; 0x40
  4047d8:	f44f 7300 	mov.w	r3, #512	; 0x200
  4047dc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4047e0:	e74a      	b.n	404678 <_malloc_r+0x44>
  4047e2:	4423      	add	r3, r4
  4047e4:	68e1      	ldr	r1, [r4, #12]
  4047e6:	685a      	ldr	r2, [r3, #4]
  4047e8:	68a6      	ldr	r6, [r4, #8]
  4047ea:	f042 0201 	orr.w	r2, r2, #1
  4047ee:	60f1      	str	r1, [r6, #12]
  4047f0:	4628      	mov	r0, r5
  4047f2:	608e      	str	r6, [r1, #8]
  4047f4:	605a      	str	r2, [r3, #4]
  4047f6:	f000 fac3 	bl	404d80 <__malloc_unlock>
  4047fa:	3408      	adds	r4, #8
  4047fc:	4620      	mov	r0, r4
  4047fe:	b003      	add	sp, #12
  404800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404804:	4423      	add	r3, r4
  404806:	4628      	mov	r0, r5
  404808:	685a      	ldr	r2, [r3, #4]
  40480a:	f042 0201 	orr.w	r2, r2, #1
  40480e:	605a      	str	r2, [r3, #4]
  404810:	f000 fab6 	bl	404d80 <__malloc_unlock>
  404814:	3408      	adds	r4, #8
  404816:	4620      	mov	r0, r4
  404818:	b003      	add	sp, #12
  40481a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40481e:	68bc      	ldr	r4, [r7, #8]
  404820:	6863      	ldr	r3, [r4, #4]
  404822:	f023 0803 	bic.w	r8, r3, #3
  404826:	45b0      	cmp	r8, r6
  404828:	d304      	bcc.n	404834 <_malloc_r+0x200>
  40482a:	eba8 0306 	sub.w	r3, r8, r6
  40482e:	2b0f      	cmp	r3, #15
  404830:	f300 8085 	bgt.w	40493e <_malloc_r+0x30a>
  404834:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404990 <_malloc_r+0x35c>
  404838:	4b50      	ldr	r3, [pc, #320]	; (40497c <_malloc_r+0x348>)
  40483a:	f8d9 2000 	ldr.w	r2, [r9]
  40483e:	681b      	ldr	r3, [r3, #0]
  404840:	3201      	adds	r2, #1
  404842:	4433      	add	r3, r6
  404844:	eb04 0a08 	add.w	sl, r4, r8
  404848:	f000 8155 	beq.w	404af6 <_malloc_r+0x4c2>
  40484c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404850:	330f      	adds	r3, #15
  404852:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404856:	f02b 0b0f 	bic.w	fp, fp, #15
  40485a:	4659      	mov	r1, fp
  40485c:	4628      	mov	r0, r5
  40485e:	f000 fd8f 	bl	405380 <_sbrk_r>
  404862:	1c41      	adds	r1, r0, #1
  404864:	4602      	mov	r2, r0
  404866:	f000 80fc 	beq.w	404a62 <_malloc_r+0x42e>
  40486a:	4582      	cmp	sl, r0
  40486c:	f200 80f7 	bhi.w	404a5e <_malloc_r+0x42a>
  404870:	4b43      	ldr	r3, [pc, #268]	; (404980 <_malloc_r+0x34c>)
  404872:	6819      	ldr	r1, [r3, #0]
  404874:	4459      	add	r1, fp
  404876:	6019      	str	r1, [r3, #0]
  404878:	f000 814d 	beq.w	404b16 <_malloc_r+0x4e2>
  40487c:	f8d9 0000 	ldr.w	r0, [r9]
  404880:	3001      	adds	r0, #1
  404882:	bf1b      	ittet	ne
  404884:	eba2 0a0a 	subne.w	sl, r2, sl
  404888:	4451      	addne	r1, sl
  40488a:	f8c9 2000 	streq.w	r2, [r9]
  40488e:	6019      	strne	r1, [r3, #0]
  404890:	f012 0107 	ands.w	r1, r2, #7
  404894:	f000 8115 	beq.w	404ac2 <_malloc_r+0x48e>
  404898:	f1c1 0008 	rsb	r0, r1, #8
  40489c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4048a0:	4402      	add	r2, r0
  4048a2:	3108      	adds	r1, #8
  4048a4:	eb02 090b 	add.w	r9, r2, fp
  4048a8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4048ac:	eba1 0909 	sub.w	r9, r1, r9
  4048b0:	4649      	mov	r1, r9
  4048b2:	4628      	mov	r0, r5
  4048b4:	9301      	str	r3, [sp, #4]
  4048b6:	9200      	str	r2, [sp, #0]
  4048b8:	f000 fd62 	bl	405380 <_sbrk_r>
  4048bc:	1c43      	adds	r3, r0, #1
  4048be:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4048c2:	f000 8143 	beq.w	404b4c <_malloc_r+0x518>
  4048c6:	1a80      	subs	r0, r0, r2
  4048c8:	4448      	add	r0, r9
  4048ca:	f040 0001 	orr.w	r0, r0, #1
  4048ce:	6819      	ldr	r1, [r3, #0]
  4048d0:	60ba      	str	r2, [r7, #8]
  4048d2:	4449      	add	r1, r9
  4048d4:	42bc      	cmp	r4, r7
  4048d6:	6050      	str	r0, [r2, #4]
  4048d8:	6019      	str	r1, [r3, #0]
  4048da:	d017      	beq.n	40490c <_malloc_r+0x2d8>
  4048dc:	f1b8 0f0f 	cmp.w	r8, #15
  4048e0:	f240 80fb 	bls.w	404ada <_malloc_r+0x4a6>
  4048e4:	6860      	ldr	r0, [r4, #4]
  4048e6:	f1a8 020c 	sub.w	r2, r8, #12
  4048ea:	f022 0207 	bic.w	r2, r2, #7
  4048ee:	eb04 0e02 	add.w	lr, r4, r2
  4048f2:	f000 0001 	and.w	r0, r0, #1
  4048f6:	f04f 0c05 	mov.w	ip, #5
  4048fa:	4310      	orrs	r0, r2
  4048fc:	2a0f      	cmp	r2, #15
  4048fe:	6060      	str	r0, [r4, #4]
  404900:	f8ce c004 	str.w	ip, [lr, #4]
  404904:	f8ce c008 	str.w	ip, [lr, #8]
  404908:	f200 8117 	bhi.w	404b3a <_malloc_r+0x506>
  40490c:	4b1d      	ldr	r3, [pc, #116]	; (404984 <_malloc_r+0x350>)
  40490e:	68bc      	ldr	r4, [r7, #8]
  404910:	681a      	ldr	r2, [r3, #0]
  404912:	4291      	cmp	r1, r2
  404914:	bf88      	it	hi
  404916:	6019      	strhi	r1, [r3, #0]
  404918:	4b1b      	ldr	r3, [pc, #108]	; (404988 <_malloc_r+0x354>)
  40491a:	681a      	ldr	r2, [r3, #0]
  40491c:	4291      	cmp	r1, r2
  40491e:	6862      	ldr	r2, [r4, #4]
  404920:	bf88      	it	hi
  404922:	6019      	strhi	r1, [r3, #0]
  404924:	f022 0203 	bic.w	r2, r2, #3
  404928:	4296      	cmp	r6, r2
  40492a:	eba2 0306 	sub.w	r3, r2, r6
  40492e:	d801      	bhi.n	404934 <_malloc_r+0x300>
  404930:	2b0f      	cmp	r3, #15
  404932:	dc04      	bgt.n	40493e <_malloc_r+0x30a>
  404934:	4628      	mov	r0, r5
  404936:	f000 fa23 	bl	404d80 <__malloc_unlock>
  40493a:	2400      	movs	r4, #0
  40493c:	e740      	b.n	4047c0 <_malloc_r+0x18c>
  40493e:	19a2      	adds	r2, r4, r6
  404940:	f043 0301 	orr.w	r3, r3, #1
  404944:	f046 0601 	orr.w	r6, r6, #1
  404948:	6066      	str	r6, [r4, #4]
  40494a:	4628      	mov	r0, r5
  40494c:	60ba      	str	r2, [r7, #8]
  40494e:	6053      	str	r3, [r2, #4]
  404950:	f000 fa16 	bl	404d80 <__malloc_unlock>
  404954:	3408      	adds	r4, #8
  404956:	4620      	mov	r0, r4
  404958:	b003      	add	sp, #12
  40495a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40495e:	2b14      	cmp	r3, #20
  404960:	d971      	bls.n	404a46 <_malloc_r+0x412>
  404962:	2b54      	cmp	r3, #84	; 0x54
  404964:	f200 80a3 	bhi.w	404aae <_malloc_r+0x47a>
  404968:	0b33      	lsrs	r3, r6, #12
  40496a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40496e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404972:	00c3      	lsls	r3, r0, #3
  404974:	e680      	b.n	404678 <_malloc_r+0x44>
  404976:	bf00      	nop
  404978:	20400454 	.word	0x20400454
  40497c:	20400ca4 	.word	0x20400ca4
  404980:	20400c74 	.word	0x20400c74
  404984:	20400c9c 	.word	0x20400c9c
  404988:	20400ca0 	.word	0x20400ca0
  40498c:	2040045c 	.word	0x2040045c
  404990:	2040085c 	.word	0x2040085c
  404994:	0a5a      	lsrs	r2, r3, #9
  404996:	2a04      	cmp	r2, #4
  404998:	d95b      	bls.n	404a52 <_malloc_r+0x41e>
  40499a:	2a14      	cmp	r2, #20
  40499c:	f200 80ae 	bhi.w	404afc <_malloc_r+0x4c8>
  4049a0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4049a4:	00c9      	lsls	r1, r1, #3
  4049a6:	325b      	adds	r2, #91	; 0x5b
  4049a8:	eb07 0c01 	add.w	ip, r7, r1
  4049ac:	5879      	ldr	r1, [r7, r1]
  4049ae:	f1ac 0c08 	sub.w	ip, ip, #8
  4049b2:	458c      	cmp	ip, r1
  4049b4:	f000 8088 	beq.w	404ac8 <_malloc_r+0x494>
  4049b8:	684a      	ldr	r2, [r1, #4]
  4049ba:	f022 0203 	bic.w	r2, r2, #3
  4049be:	4293      	cmp	r3, r2
  4049c0:	d273      	bcs.n	404aaa <_malloc_r+0x476>
  4049c2:	6889      	ldr	r1, [r1, #8]
  4049c4:	458c      	cmp	ip, r1
  4049c6:	d1f7      	bne.n	4049b8 <_malloc_r+0x384>
  4049c8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4049cc:	687b      	ldr	r3, [r7, #4]
  4049ce:	60e2      	str	r2, [r4, #12]
  4049d0:	f8c4 c008 	str.w	ip, [r4, #8]
  4049d4:	6094      	str	r4, [r2, #8]
  4049d6:	f8cc 400c 	str.w	r4, [ip, #12]
  4049da:	e68f      	b.n	4046fc <_malloc_r+0xc8>
  4049dc:	19a1      	adds	r1, r4, r6
  4049de:	f046 0c01 	orr.w	ip, r6, #1
  4049e2:	f042 0601 	orr.w	r6, r2, #1
  4049e6:	f8c4 c004 	str.w	ip, [r4, #4]
  4049ea:	4628      	mov	r0, r5
  4049ec:	6179      	str	r1, [r7, #20]
  4049ee:	6139      	str	r1, [r7, #16]
  4049f0:	f8c1 e00c 	str.w	lr, [r1, #12]
  4049f4:	f8c1 e008 	str.w	lr, [r1, #8]
  4049f8:	604e      	str	r6, [r1, #4]
  4049fa:	50e2      	str	r2, [r4, r3]
  4049fc:	f000 f9c0 	bl	404d80 <__malloc_unlock>
  404a00:	3408      	adds	r4, #8
  404a02:	e6dd      	b.n	4047c0 <_malloc_r+0x18c>
  404a04:	687b      	ldr	r3, [r7, #4]
  404a06:	e679      	b.n	4046fc <_malloc_r+0xc8>
  404a08:	f108 0801 	add.w	r8, r8, #1
  404a0c:	f018 0f03 	tst.w	r8, #3
  404a10:	f10c 0c08 	add.w	ip, ip, #8
  404a14:	f47f ae85 	bne.w	404722 <_malloc_r+0xee>
  404a18:	e02d      	b.n	404a76 <_malloc_r+0x442>
  404a1a:	68dc      	ldr	r4, [r3, #12]
  404a1c:	42a3      	cmp	r3, r4
  404a1e:	bf08      	it	eq
  404a20:	3002      	addeq	r0, #2
  404a22:	f43f ae3e 	beq.w	4046a2 <_malloc_r+0x6e>
  404a26:	e6bb      	b.n	4047a0 <_malloc_r+0x16c>
  404a28:	4419      	add	r1, r3
  404a2a:	461c      	mov	r4, r3
  404a2c:	684a      	ldr	r2, [r1, #4]
  404a2e:	68db      	ldr	r3, [r3, #12]
  404a30:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404a34:	f042 0201 	orr.w	r2, r2, #1
  404a38:	604a      	str	r2, [r1, #4]
  404a3a:	4628      	mov	r0, r5
  404a3c:	60f3      	str	r3, [r6, #12]
  404a3e:	609e      	str	r6, [r3, #8]
  404a40:	f000 f99e 	bl	404d80 <__malloc_unlock>
  404a44:	e6bc      	b.n	4047c0 <_malloc_r+0x18c>
  404a46:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404a4a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404a4e:	00c3      	lsls	r3, r0, #3
  404a50:	e612      	b.n	404678 <_malloc_r+0x44>
  404a52:	099a      	lsrs	r2, r3, #6
  404a54:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404a58:	00c9      	lsls	r1, r1, #3
  404a5a:	3238      	adds	r2, #56	; 0x38
  404a5c:	e7a4      	b.n	4049a8 <_malloc_r+0x374>
  404a5e:	42bc      	cmp	r4, r7
  404a60:	d054      	beq.n	404b0c <_malloc_r+0x4d8>
  404a62:	68bc      	ldr	r4, [r7, #8]
  404a64:	6862      	ldr	r2, [r4, #4]
  404a66:	f022 0203 	bic.w	r2, r2, #3
  404a6a:	e75d      	b.n	404928 <_malloc_r+0x2f4>
  404a6c:	f859 3908 	ldr.w	r3, [r9], #-8
  404a70:	4599      	cmp	r9, r3
  404a72:	f040 8086 	bne.w	404b82 <_malloc_r+0x54e>
  404a76:	f010 0f03 	tst.w	r0, #3
  404a7a:	f100 30ff 	add.w	r0, r0, #4294967295
  404a7e:	d1f5      	bne.n	404a6c <_malloc_r+0x438>
  404a80:	687b      	ldr	r3, [r7, #4]
  404a82:	ea23 0304 	bic.w	r3, r3, r4
  404a86:	607b      	str	r3, [r7, #4]
  404a88:	0064      	lsls	r4, r4, #1
  404a8a:	429c      	cmp	r4, r3
  404a8c:	f63f aec7 	bhi.w	40481e <_malloc_r+0x1ea>
  404a90:	2c00      	cmp	r4, #0
  404a92:	f43f aec4 	beq.w	40481e <_malloc_r+0x1ea>
  404a96:	421c      	tst	r4, r3
  404a98:	4640      	mov	r0, r8
  404a9a:	f47f ae3e 	bne.w	40471a <_malloc_r+0xe6>
  404a9e:	0064      	lsls	r4, r4, #1
  404aa0:	421c      	tst	r4, r3
  404aa2:	f100 0004 	add.w	r0, r0, #4
  404aa6:	d0fa      	beq.n	404a9e <_malloc_r+0x46a>
  404aa8:	e637      	b.n	40471a <_malloc_r+0xe6>
  404aaa:	468c      	mov	ip, r1
  404aac:	e78c      	b.n	4049c8 <_malloc_r+0x394>
  404aae:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404ab2:	d815      	bhi.n	404ae0 <_malloc_r+0x4ac>
  404ab4:	0bf3      	lsrs	r3, r6, #15
  404ab6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404aba:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404abe:	00c3      	lsls	r3, r0, #3
  404ac0:	e5da      	b.n	404678 <_malloc_r+0x44>
  404ac2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404ac6:	e6ed      	b.n	4048a4 <_malloc_r+0x270>
  404ac8:	687b      	ldr	r3, [r7, #4]
  404aca:	1092      	asrs	r2, r2, #2
  404acc:	2101      	movs	r1, #1
  404ace:	fa01 f202 	lsl.w	r2, r1, r2
  404ad2:	4313      	orrs	r3, r2
  404ad4:	607b      	str	r3, [r7, #4]
  404ad6:	4662      	mov	r2, ip
  404ad8:	e779      	b.n	4049ce <_malloc_r+0x39a>
  404ada:	2301      	movs	r3, #1
  404adc:	6053      	str	r3, [r2, #4]
  404ade:	e729      	b.n	404934 <_malloc_r+0x300>
  404ae0:	f240 5254 	movw	r2, #1364	; 0x554
  404ae4:	4293      	cmp	r3, r2
  404ae6:	d822      	bhi.n	404b2e <_malloc_r+0x4fa>
  404ae8:	0cb3      	lsrs	r3, r6, #18
  404aea:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404aee:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404af2:	00c3      	lsls	r3, r0, #3
  404af4:	e5c0      	b.n	404678 <_malloc_r+0x44>
  404af6:	f103 0b10 	add.w	fp, r3, #16
  404afa:	e6ae      	b.n	40485a <_malloc_r+0x226>
  404afc:	2a54      	cmp	r2, #84	; 0x54
  404afe:	d829      	bhi.n	404b54 <_malloc_r+0x520>
  404b00:	0b1a      	lsrs	r2, r3, #12
  404b02:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404b06:	00c9      	lsls	r1, r1, #3
  404b08:	326e      	adds	r2, #110	; 0x6e
  404b0a:	e74d      	b.n	4049a8 <_malloc_r+0x374>
  404b0c:	4b20      	ldr	r3, [pc, #128]	; (404b90 <_malloc_r+0x55c>)
  404b0e:	6819      	ldr	r1, [r3, #0]
  404b10:	4459      	add	r1, fp
  404b12:	6019      	str	r1, [r3, #0]
  404b14:	e6b2      	b.n	40487c <_malloc_r+0x248>
  404b16:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404b1a:	2800      	cmp	r0, #0
  404b1c:	f47f aeae 	bne.w	40487c <_malloc_r+0x248>
  404b20:	eb08 030b 	add.w	r3, r8, fp
  404b24:	68ba      	ldr	r2, [r7, #8]
  404b26:	f043 0301 	orr.w	r3, r3, #1
  404b2a:	6053      	str	r3, [r2, #4]
  404b2c:	e6ee      	b.n	40490c <_malloc_r+0x2d8>
  404b2e:	207f      	movs	r0, #127	; 0x7f
  404b30:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404b34:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404b38:	e59e      	b.n	404678 <_malloc_r+0x44>
  404b3a:	f104 0108 	add.w	r1, r4, #8
  404b3e:	4628      	mov	r0, r5
  404b40:	9300      	str	r3, [sp, #0]
  404b42:	f000 fe0b 	bl	40575c <_free_r>
  404b46:	9b00      	ldr	r3, [sp, #0]
  404b48:	6819      	ldr	r1, [r3, #0]
  404b4a:	e6df      	b.n	40490c <_malloc_r+0x2d8>
  404b4c:	2001      	movs	r0, #1
  404b4e:	f04f 0900 	mov.w	r9, #0
  404b52:	e6bc      	b.n	4048ce <_malloc_r+0x29a>
  404b54:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404b58:	d805      	bhi.n	404b66 <_malloc_r+0x532>
  404b5a:	0bda      	lsrs	r2, r3, #15
  404b5c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404b60:	00c9      	lsls	r1, r1, #3
  404b62:	3277      	adds	r2, #119	; 0x77
  404b64:	e720      	b.n	4049a8 <_malloc_r+0x374>
  404b66:	f240 5154 	movw	r1, #1364	; 0x554
  404b6a:	428a      	cmp	r2, r1
  404b6c:	d805      	bhi.n	404b7a <_malloc_r+0x546>
  404b6e:	0c9a      	lsrs	r2, r3, #18
  404b70:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404b74:	00c9      	lsls	r1, r1, #3
  404b76:	327c      	adds	r2, #124	; 0x7c
  404b78:	e716      	b.n	4049a8 <_malloc_r+0x374>
  404b7a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404b7e:	227e      	movs	r2, #126	; 0x7e
  404b80:	e712      	b.n	4049a8 <_malloc_r+0x374>
  404b82:	687b      	ldr	r3, [r7, #4]
  404b84:	e780      	b.n	404a88 <_malloc_r+0x454>
  404b86:	08f0      	lsrs	r0, r6, #3
  404b88:	f106 0308 	add.w	r3, r6, #8
  404b8c:	e600      	b.n	404790 <_malloc_r+0x15c>
  404b8e:	bf00      	nop
  404b90:	20400c74 	.word	0x20400c74
	...

00404ba0 <memchr>:
  404ba0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404ba4:	2a10      	cmp	r2, #16
  404ba6:	db2b      	blt.n	404c00 <memchr+0x60>
  404ba8:	f010 0f07 	tst.w	r0, #7
  404bac:	d008      	beq.n	404bc0 <memchr+0x20>
  404bae:	f810 3b01 	ldrb.w	r3, [r0], #1
  404bb2:	3a01      	subs	r2, #1
  404bb4:	428b      	cmp	r3, r1
  404bb6:	d02d      	beq.n	404c14 <memchr+0x74>
  404bb8:	f010 0f07 	tst.w	r0, #7
  404bbc:	b342      	cbz	r2, 404c10 <memchr+0x70>
  404bbe:	d1f6      	bne.n	404bae <memchr+0xe>
  404bc0:	b4f0      	push	{r4, r5, r6, r7}
  404bc2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404bc6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404bca:	f022 0407 	bic.w	r4, r2, #7
  404bce:	f07f 0700 	mvns.w	r7, #0
  404bd2:	2300      	movs	r3, #0
  404bd4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404bd8:	3c08      	subs	r4, #8
  404bda:	ea85 0501 	eor.w	r5, r5, r1
  404bde:	ea86 0601 	eor.w	r6, r6, r1
  404be2:	fa85 f547 	uadd8	r5, r5, r7
  404be6:	faa3 f587 	sel	r5, r3, r7
  404bea:	fa86 f647 	uadd8	r6, r6, r7
  404bee:	faa5 f687 	sel	r6, r5, r7
  404bf2:	b98e      	cbnz	r6, 404c18 <memchr+0x78>
  404bf4:	d1ee      	bne.n	404bd4 <memchr+0x34>
  404bf6:	bcf0      	pop	{r4, r5, r6, r7}
  404bf8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404bfc:	f002 0207 	and.w	r2, r2, #7
  404c00:	b132      	cbz	r2, 404c10 <memchr+0x70>
  404c02:	f810 3b01 	ldrb.w	r3, [r0], #1
  404c06:	3a01      	subs	r2, #1
  404c08:	ea83 0301 	eor.w	r3, r3, r1
  404c0c:	b113      	cbz	r3, 404c14 <memchr+0x74>
  404c0e:	d1f8      	bne.n	404c02 <memchr+0x62>
  404c10:	2000      	movs	r0, #0
  404c12:	4770      	bx	lr
  404c14:	3801      	subs	r0, #1
  404c16:	4770      	bx	lr
  404c18:	2d00      	cmp	r5, #0
  404c1a:	bf06      	itte	eq
  404c1c:	4635      	moveq	r5, r6
  404c1e:	3803      	subeq	r0, #3
  404c20:	3807      	subne	r0, #7
  404c22:	f015 0f01 	tst.w	r5, #1
  404c26:	d107      	bne.n	404c38 <memchr+0x98>
  404c28:	3001      	adds	r0, #1
  404c2a:	f415 7f80 	tst.w	r5, #256	; 0x100
  404c2e:	bf02      	ittt	eq
  404c30:	3001      	addeq	r0, #1
  404c32:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404c36:	3001      	addeq	r0, #1
  404c38:	bcf0      	pop	{r4, r5, r6, r7}
  404c3a:	3801      	subs	r0, #1
  404c3c:	4770      	bx	lr
  404c3e:	bf00      	nop

00404c40 <memcpy>:
  404c40:	4684      	mov	ip, r0
  404c42:	ea41 0300 	orr.w	r3, r1, r0
  404c46:	f013 0303 	ands.w	r3, r3, #3
  404c4a:	d16d      	bne.n	404d28 <memcpy+0xe8>
  404c4c:	3a40      	subs	r2, #64	; 0x40
  404c4e:	d341      	bcc.n	404cd4 <memcpy+0x94>
  404c50:	f851 3b04 	ldr.w	r3, [r1], #4
  404c54:	f840 3b04 	str.w	r3, [r0], #4
  404c58:	f851 3b04 	ldr.w	r3, [r1], #4
  404c5c:	f840 3b04 	str.w	r3, [r0], #4
  404c60:	f851 3b04 	ldr.w	r3, [r1], #4
  404c64:	f840 3b04 	str.w	r3, [r0], #4
  404c68:	f851 3b04 	ldr.w	r3, [r1], #4
  404c6c:	f840 3b04 	str.w	r3, [r0], #4
  404c70:	f851 3b04 	ldr.w	r3, [r1], #4
  404c74:	f840 3b04 	str.w	r3, [r0], #4
  404c78:	f851 3b04 	ldr.w	r3, [r1], #4
  404c7c:	f840 3b04 	str.w	r3, [r0], #4
  404c80:	f851 3b04 	ldr.w	r3, [r1], #4
  404c84:	f840 3b04 	str.w	r3, [r0], #4
  404c88:	f851 3b04 	ldr.w	r3, [r1], #4
  404c8c:	f840 3b04 	str.w	r3, [r0], #4
  404c90:	f851 3b04 	ldr.w	r3, [r1], #4
  404c94:	f840 3b04 	str.w	r3, [r0], #4
  404c98:	f851 3b04 	ldr.w	r3, [r1], #4
  404c9c:	f840 3b04 	str.w	r3, [r0], #4
  404ca0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ca4:	f840 3b04 	str.w	r3, [r0], #4
  404ca8:	f851 3b04 	ldr.w	r3, [r1], #4
  404cac:	f840 3b04 	str.w	r3, [r0], #4
  404cb0:	f851 3b04 	ldr.w	r3, [r1], #4
  404cb4:	f840 3b04 	str.w	r3, [r0], #4
  404cb8:	f851 3b04 	ldr.w	r3, [r1], #4
  404cbc:	f840 3b04 	str.w	r3, [r0], #4
  404cc0:	f851 3b04 	ldr.w	r3, [r1], #4
  404cc4:	f840 3b04 	str.w	r3, [r0], #4
  404cc8:	f851 3b04 	ldr.w	r3, [r1], #4
  404ccc:	f840 3b04 	str.w	r3, [r0], #4
  404cd0:	3a40      	subs	r2, #64	; 0x40
  404cd2:	d2bd      	bcs.n	404c50 <memcpy+0x10>
  404cd4:	3230      	adds	r2, #48	; 0x30
  404cd6:	d311      	bcc.n	404cfc <memcpy+0xbc>
  404cd8:	f851 3b04 	ldr.w	r3, [r1], #4
  404cdc:	f840 3b04 	str.w	r3, [r0], #4
  404ce0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ce4:	f840 3b04 	str.w	r3, [r0], #4
  404ce8:	f851 3b04 	ldr.w	r3, [r1], #4
  404cec:	f840 3b04 	str.w	r3, [r0], #4
  404cf0:	f851 3b04 	ldr.w	r3, [r1], #4
  404cf4:	f840 3b04 	str.w	r3, [r0], #4
  404cf8:	3a10      	subs	r2, #16
  404cfa:	d2ed      	bcs.n	404cd8 <memcpy+0x98>
  404cfc:	320c      	adds	r2, #12
  404cfe:	d305      	bcc.n	404d0c <memcpy+0xcc>
  404d00:	f851 3b04 	ldr.w	r3, [r1], #4
  404d04:	f840 3b04 	str.w	r3, [r0], #4
  404d08:	3a04      	subs	r2, #4
  404d0a:	d2f9      	bcs.n	404d00 <memcpy+0xc0>
  404d0c:	3204      	adds	r2, #4
  404d0e:	d008      	beq.n	404d22 <memcpy+0xe2>
  404d10:	07d2      	lsls	r2, r2, #31
  404d12:	bf1c      	itt	ne
  404d14:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404d18:	f800 3b01 	strbne.w	r3, [r0], #1
  404d1c:	d301      	bcc.n	404d22 <memcpy+0xe2>
  404d1e:	880b      	ldrh	r3, [r1, #0]
  404d20:	8003      	strh	r3, [r0, #0]
  404d22:	4660      	mov	r0, ip
  404d24:	4770      	bx	lr
  404d26:	bf00      	nop
  404d28:	2a08      	cmp	r2, #8
  404d2a:	d313      	bcc.n	404d54 <memcpy+0x114>
  404d2c:	078b      	lsls	r3, r1, #30
  404d2e:	d08d      	beq.n	404c4c <memcpy+0xc>
  404d30:	f010 0303 	ands.w	r3, r0, #3
  404d34:	d08a      	beq.n	404c4c <memcpy+0xc>
  404d36:	f1c3 0304 	rsb	r3, r3, #4
  404d3a:	1ad2      	subs	r2, r2, r3
  404d3c:	07db      	lsls	r3, r3, #31
  404d3e:	bf1c      	itt	ne
  404d40:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404d44:	f800 3b01 	strbne.w	r3, [r0], #1
  404d48:	d380      	bcc.n	404c4c <memcpy+0xc>
  404d4a:	f831 3b02 	ldrh.w	r3, [r1], #2
  404d4e:	f820 3b02 	strh.w	r3, [r0], #2
  404d52:	e77b      	b.n	404c4c <memcpy+0xc>
  404d54:	3a04      	subs	r2, #4
  404d56:	d3d9      	bcc.n	404d0c <memcpy+0xcc>
  404d58:	3a01      	subs	r2, #1
  404d5a:	f811 3b01 	ldrb.w	r3, [r1], #1
  404d5e:	f800 3b01 	strb.w	r3, [r0], #1
  404d62:	d2f9      	bcs.n	404d58 <memcpy+0x118>
  404d64:	780b      	ldrb	r3, [r1, #0]
  404d66:	7003      	strb	r3, [r0, #0]
  404d68:	784b      	ldrb	r3, [r1, #1]
  404d6a:	7043      	strb	r3, [r0, #1]
  404d6c:	788b      	ldrb	r3, [r1, #2]
  404d6e:	7083      	strb	r3, [r0, #2]
  404d70:	4660      	mov	r0, ip
  404d72:	4770      	bx	lr

00404d74 <__malloc_lock>:
  404d74:	4801      	ldr	r0, [pc, #4]	; (404d7c <__malloc_lock+0x8>)
  404d76:	f7ff bc59 	b.w	40462c <__retarget_lock_acquire_recursive>
  404d7a:	bf00      	nop
  404d7c:	20400cb8 	.word	0x20400cb8

00404d80 <__malloc_unlock>:
  404d80:	4801      	ldr	r0, [pc, #4]	; (404d88 <__malloc_unlock+0x8>)
  404d82:	f7ff bc55 	b.w	404630 <__retarget_lock_release_recursive>
  404d86:	bf00      	nop
  404d88:	20400cb8 	.word	0x20400cb8

00404d8c <_Balloc>:
  404d8c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  404d8e:	b570      	push	{r4, r5, r6, lr}
  404d90:	4605      	mov	r5, r0
  404d92:	460c      	mov	r4, r1
  404d94:	b14b      	cbz	r3, 404daa <_Balloc+0x1e>
  404d96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  404d9a:	b180      	cbz	r0, 404dbe <_Balloc+0x32>
  404d9c:	6802      	ldr	r2, [r0, #0]
  404d9e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  404da2:	2300      	movs	r3, #0
  404da4:	6103      	str	r3, [r0, #16]
  404da6:	60c3      	str	r3, [r0, #12]
  404da8:	bd70      	pop	{r4, r5, r6, pc}
  404daa:	2221      	movs	r2, #33	; 0x21
  404dac:	2104      	movs	r1, #4
  404dae:	f000 fc55 	bl	40565c <_calloc_r>
  404db2:	64e8      	str	r0, [r5, #76]	; 0x4c
  404db4:	4603      	mov	r3, r0
  404db6:	2800      	cmp	r0, #0
  404db8:	d1ed      	bne.n	404d96 <_Balloc+0xa>
  404dba:	2000      	movs	r0, #0
  404dbc:	bd70      	pop	{r4, r5, r6, pc}
  404dbe:	2101      	movs	r1, #1
  404dc0:	fa01 f604 	lsl.w	r6, r1, r4
  404dc4:	1d72      	adds	r2, r6, #5
  404dc6:	4628      	mov	r0, r5
  404dc8:	0092      	lsls	r2, r2, #2
  404dca:	f000 fc47 	bl	40565c <_calloc_r>
  404dce:	2800      	cmp	r0, #0
  404dd0:	d0f3      	beq.n	404dba <_Balloc+0x2e>
  404dd2:	6044      	str	r4, [r0, #4]
  404dd4:	6086      	str	r6, [r0, #8]
  404dd6:	e7e4      	b.n	404da2 <_Balloc+0x16>

00404dd8 <_Bfree>:
  404dd8:	b131      	cbz	r1, 404de8 <_Bfree+0x10>
  404dda:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  404ddc:	684a      	ldr	r2, [r1, #4]
  404dde:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  404de2:	6008      	str	r0, [r1, #0]
  404de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  404de8:	4770      	bx	lr
  404dea:	bf00      	nop

00404dec <__multadd>:
  404dec:	b5f0      	push	{r4, r5, r6, r7, lr}
  404dee:	690c      	ldr	r4, [r1, #16]
  404df0:	b083      	sub	sp, #12
  404df2:	460d      	mov	r5, r1
  404df4:	4606      	mov	r6, r0
  404df6:	f101 0e14 	add.w	lr, r1, #20
  404dfa:	2700      	movs	r7, #0
  404dfc:	f8de 0000 	ldr.w	r0, [lr]
  404e00:	b281      	uxth	r1, r0
  404e02:	fb02 3301 	mla	r3, r2, r1, r3
  404e06:	0c01      	lsrs	r1, r0, #16
  404e08:	0c18      	lsrs	r0, r3, #16
  404e0a:	fb02 0101 	mla	r1, r2, r1, r0
  404e0e:	b29b      	uxth	r3, r3
  404e10:	3701      	adds	r7, #1
  404e12:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  404e16:	42bc      	cmp	r4, r7
  404e18:	f84e 3b04 	str.w	r3, [lr], #4
  404e1c:	ea4f 4311 	mov.w	r3, r1, lsr #16
  404e20:	dcec      	bgt.n	404dfc <__multadd+0x10>
  404e22:	b13b      	cbz	r3, 404e34 <__multadd+0x48>
  404e24:	68aa      	ldr	r2, [r5, #8]
  404e26:	4294      	cmp	r4, r2
  404e28:	da07      	bge.n	404e3a <__multadd+0x4e>
  404e2a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  404e2e:	3401      	adds	r4, #1
  404e30:	6153      	str	r3, [r2, #20]
  404e32:	612c      	str	r4, [r5, #16]
  404e34:	4628      	mov	r0, r5
  404e36:	b003      	add	sp, #12
  404e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404e3a:	6869      	ldr	r1, [r5, #4]
  404e3c:	9301      	str	r3, [sp, #4]
  404e3e:	3101      	adds	r1, #1
  404e40:	4630      	mov	r0, r6
  404e42:	f7ff ffa3 	bl	404d8c <_Balloc>
  404e46:	692a      	ldr	r2, [r5, #16]
  404e48:	3202      	adds	r2, #2
  404e4a:	f105 010c 	add.w	r1, r5, #12
  404e4e:	4607      	mov	r7, r0
  404e50:	0092      	lsls	r2, r2, #2
  404e52:	300c      	adds	r0, #12
  404e54:	f7ff fef4 	bl	404c40 <memcpy>
  404e58:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  404e5a:	6869      	ldr	r1, [r5, #4]
  404e5c:	9b01      	ldr	r3, [sp, #4]
  404e5e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  404e62:	6028      	str	r0, [r5, #0]
  404e64:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  404e68:	463d      	mov	r5, r7
  404e6a:	e7de      	b.n	404e2a <__multadd+0x3e>

00404e6c <__hi0bits>:
  404e6c:	0c02      	lsrs	r2, r0, #16
  404e6e:	0412      	lsls	r2, r2, #16
  404e70:	4603      	mov	r3, r0
  404e72:	b9b2      	cbnz	r2, 404ea2 <__hi0bits+0x36>
  404e74:	0403      	lsls	r3, r0, #16
  404e76:	2010      	movs	r0, #16
  404e78:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  404e7c:	bf04      	itt	eq
  404e7e:	021b      	lsleq	r3, r3, #8
  404e80:	3008      	addeq	r0, #8
  404e82:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  404e86:	bf04      	itt	eq
  404e88:	011b      	lsleq	r3, r3, #4
  404e8a:	3004      	addeq	r0, #4
  404e8c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  404e90:	bf04      	itt	eq
  404e92:	009b      	lsleq	r3, r3, #2
  404e94:	3002      	addeq	r0, #2
  404e96:	2b00      	cmp	r3, #0
  404e98:	db02      	blt.n	404ea0 <__hi0bits+0x34>
  404e9a:	005b      	lsls	r3, r3, #1
  404e9c:	d403      	bmi.n	404ea6 <__hi0bits+0x3a>
  404e9e:	2020      	movs	r0, #32
  404ea0:	4770      	bx	lr
  404ea2:	2000      	movs	r0, #0
  404ea4:	e7e8      	b.n	404e78 <__hi0bits+0xc>
  404ea6:	3001      	adds	r0, #1
  404ea8:	4770      	bx	lr
  404eaa:	bf00      	nop

00404eac <__lo0bits>:
  404eac:	6803      	ldr	r3, [r0, #0]
  404eae:	f013 0207 	ands.w	r2, r3, #7
  404eb2:	4601      	mov	r1, r0
  404eb4:	d007      	beq.n	404ec6 <__lo0bits+0x1a>
  404eb6:	07da      	lsls	r2, r3, #31
  404eb8:	d421      	bmi.n	404efe <__lo0bits+0x52>
  404eba:	0798      	lsls	r0, r3, #30
  404ebc:	d421      	bmi.n	404f02 <__lo0bits+0x56>
  404ebe:	089b      	lsrs	r3, r3, #2
  404ec0:	600b      	str	r3, [r1, #0]
  404ec2:	2002      	movs	r0, #2
  404ec4:	4770      	bx	lr
  404ec6:	b298      	uxth	r0, r3
  404ec8:	b198      	cbz	r0, 404ef2 <__lo0bits+0x46>
  404eca:	4610      	mov	r0, r2
  404ecc:	f013 0fff 	tst.w	r3, #255	; 0xff
  404ed0:	bf04      	itt	eq
  404ed2:	0a1b      	lsreq	r3, r3, #8
  404ed4:	3008      	addeq	r0, #8
  404ed6:	071a      	lsls	r2, r3, #28
  404ed8:	bf04      	itt	eq
  404eda:	091b      	lsreq	r3, r3, #4
  404edc:	3004      	addeq	r0, #4
  404ede:	079a      	lsls	r2, r3, #30
  404ee0:	bf04      	itt	eq
  404ee2:	089b      	lsreq	r3, r3, #2
  404ee4:	3002      	addeq	r0, #2
  404ee6:	07da      	lsls	r2, r3, #31
  404ee8:	d407      	bmi.n	404efa <__lo0bits+0x4e>
  404eea:	085b      	lsrs	r3, r3, #1
  404eec:	d104      	bne.n	404ef8 <__lo0bits+0x4c>
  404eee:	2020      	movs	r0, #32
  404ef0:	4770      	bx	lr
  404ef2:	0c1b      	lsrs	r3, r3, #16
  404ef4:	2010      	movs	r0, #16
  404ef6:	e7e9      	b.n	404ecc <__lo0bits+0x20>
  404ef8:	3001      	adds	r0, #1
  404efa:	600b      	str	r3, [r1, #0]
  404efc:	4770      	bx	lr
  404efe:	2000      	movs	r0, #0
  404f00:	4770      	bx	lr
  404f02:	085b      	lsrs	r3, r3, #1
  404f04:	600b      	str	r3, [r1, #0]
  404f06:	2001      	movs	r0, #1
  404f08:	4770      	bx	lr
  404f0a:	bf00      	nop

00404f0c <__i2b>:
  404f0c:	b510      	push	{r4, lr}
  404f0e:	460c      	mov	r4, r1
  404f10:	2101      	movs	r1, #1
  404f12:	f7ff ff3b 	bl	404d8c <_Balloc>
  404f16:	2201      	movs	r2, #1
  404f18:	6144      	str	r4, [r0, #20]
  404f1a:	6102      	str	r2, [r0, #16]
  404f1c:	bd10      	pop	{r4, pc}
  404f1e:	bf00      	nop

00404f20 <__multiply>:
  404f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404f24:	690c      	ldr	r4, [r1, #16]
  404f26:	6915      	ldr	r5, [r2, #16]
  404f28:	42ac      	cmp	r4, r5
  404f2a:	b083      	sub	sp, #12
  404f2c:	468b      	mov	fp, r1
  404f2e:	4616      	mov	r6, r2
  404f30:	da04      	bge.n	404f3c <__multiply+0x1c>
  404f32:	4622      	mov	r2, r4
  404f34:	46b3      	mov	fp, r6
  404f36:	462c      	mov	r4, r5
  404f38:	460e      	mov	r6, r1
  404f3a:	4615      	mov	r5, r2
  404f3c:	f8db 3008 	ldr.w	r3, [fp, #8]
  404f40:	f8db 1004 	ldr.w	r1, [fp, #4]
  404f44:	eb04 0805 	add.w	r8, r4, r5
  404f48:	4598      	cmp	r8, r3
  404f4a:	bfc8      	it	gt
  404f4c:	3101      	addgt	r1, #1
  404f4e:	f7ff ff1d 	bl	404d8c <_Balloc>
  404f52:	f100 0914 	add.w	r9, r0, #20
  404f56:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  404f5a:	45d1      	cmp	r9, sl
  404f5c:	9000      	str	r0, [sp, #0]
  404f5e:	d205      	bcs.n	404f6c <__multiply+0x4c>
  404f60:	464b      	mov	r3, r9
  404f62:	2100      	movs	r1, #0
  404f64:	f843 1b04 	str.w	r1, [r3], #4
  404f68:	459a      	cmp	sl, r3
  404f6a:	d8fb      	bhi.n	404f64 <__multiply+0x44>
  404f6c:	f106 0c14 	add.w	ip, r6, #20
  404f70:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  404f74:	f10b 0b14 	add.w	fp, fp, #20
  404f78:	459c      	cmp	ip, r3
  404f7a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  404f7e:	d24c      	bcs.n	40501a <__multiply+0xfa>
  404f80:	f8cd a004 	str.w	sl, [sp, #4]
  404f84:	469a      	mov	sl, r3
  404f86:	f8dc 5000 	ldr.w	r5, [ip]
  404f8a:	b2af      	uxth	r7, r5
  404f8c:	b1ef      	cbz	r7, 404fca <__multiply+0xaa>
  404f8e:	2100      	movs	r1, #0
  404f90:	464d      	mov	r5, r9
  404f92:	465e      	mov	r6, fp
  404f94:	460c      	mov	r4, r1
  404f96:	f856 2b04 	ldr.w	r2, [r6], #4
  404f9a:	6828      	ldr	r0, [r5, #0]
  404f9c:	b293      	uxth	r3, r2
  404f9e:	b281      	uxth	r1, r0
  404fa0:	fb07 1303 	mla	r3, r7, r3, r1
  404fa4:	0c12      	lsrs	r2, r2, #16
  404fa6:	0c01      	lsrs	r1, r0, #16
  404fa8:	4423      	add	r3, r4
  404faa:	fb07 1102 	mla	r1, r7, r2, r1
  404fae:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  404fb2:	b29b      	uxth	r3, r3
  404fb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  404fb8:	45b6      	cmp	lr, r6
  404fba:	f845 3b04 	str.w	r3, [r5], #4
  404fbe:	ea4f 4411 	mov.w	r4, r1, lsr #16
  404fc2:	d8e8      	bhi.n	404f96 <__multiply+0x76>
  404fc4:	602c      	str	r4, [r5, #0]
  404fc6:	f8dc 5000 	ldr.w	r5, [ip]
  404fca:	0c2d      	lsrs	r5, r5, #16
  404fcc:	d01d      	beq.n	40500a <__multiply+0xea>
  404fce:	f8d9 3000 	ldr.w	r3, [r9]
  404fd2:	4648      	mov	r0, r9
  404fd4:	461c      	mov	r4, r3
  404fd6:	4659      	mov	r1, fp
  404fd8:	2200      	movs	r2, #0
  404fda:	880e      	ldrh	r6, [r1, #0]
  404fdc:	0c24      	lsrs	r4, r4, #16
  404fde:	fb05 4406 	mla	r4, r5, r6, r4
  404fe2:	4422      	add	r2, r4
  404fe4:	b29b      	uxth	r3, r3
  404fe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  404fea:	f840 3b04 	str.w	r3, [r0], #4
  404fee:	f851 3b04 	ldr.w	r3, [r1], #4
  404ff2:	6804      	ldr	r4, [r0, #0]
  404ff4:	0c1b      	lsrs	r3, r3, #16
  404ff6:	b2a6      	uxth	r6, r4
  404ff8:	fb05 6303 	mla	r3, r5, r3, r6
  404ffc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  405000:	458e      	cmp	lr, r1
  405002:	ea4f 4213 	mov.w	r2, r3, lsr #16
  405006:	d8e8      	bhi.n	404fda <__multiply+0xba>
  405008:	6003      	str	r3, [r0, #0]
  40500a:	f10c 0c04 	add.w	ip, ip, #4
  40500e:	45e2      	cmp	sl, ip
  405010:	f109 0904 	add.w	r9, r9, #4
  405014:	d8b7      	bhi.n	404f86 <__multiply+0x66>
  405016:	f8dd a004 	ldr.w	sl, [sp, #4]
  40501a:	f1b8 0f00 	cmp.w	r8, #0
  40501e:	dd0b      	ble.n	405038 <__multiply+0x118>
  405020:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  405024:	f1aa 0a04 	sub.w	sl, sl, #4
  405028:	b11b      	cbz	r3, 405032 <__multiply+0x112>
  40502a:	e005      	b.n	405038 <__multiply+0x118>
  40502c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  405030:	b913      	cbnz	r3, 405038 <__multiply+0x118>
  405032:	f1b8 0801 	subs.w	r8, r8, #1
  405036:	d1f9      	bne.n	40502c <__multiply+0x10c>
  405038:	9800      	ldr	r0, [sp, #0]
  40503a:	f8c0 8010 	str.w	r8, [r0, #16]
  40503e:	b003      	add	sp, #12
  405040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405044 <__pow5mult>:
  405044:	f012 0303 	ands.w	r3, r2, #3
  405048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40504c:	4614      	mov	r4, r2
  40504e:	4607      	mov	r7, r0
  405050:	d12e      	bne.n	4050b0 <__pow5mult+0x6c>
  405052:	460d      	mov	r5, r1
  405054:	10a4      	asrs	r4, r4, #2
  405056:	d01c      	beq.n	405092 <__pow5mult+0x4e>
  405058:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40505a:	b396      	cbz	r6, 4050c2 <__pow5mult+0x7e>
  40505c:	07e3      	lsls	r3, r4, #31
  40505e:	f04f 0800 	mov.w	r8, #0
  405062:	d406      	bmi.n	405072 <__pow5mult+0x2e>
  405064:	1064      	asrs	r4, r4, #1
  405066:	d014      	beq.n	405092 <__pow5mult+0x4e>
  405068:	6830      	ldr	r0, [r6, #0]
  40506a:	b1a8      	cbz	r0, 405098 <__pow5mult+0x54>
  40506c:	4606      	mov	r6, r0
  40506e:	07e3      	lsls	r3, r4, #31
  405070:	d5f8      	bpl.n	405064 <__pow5mult+0x20>
  405072:	4632      	mov	r2, r6
  405074:	4629      	mov	r1, r5
  405076:	4638      	mov	r0, r7
  405078:	f7ff ff52 	bl	404f20 <__multiply>
  40507c:	b1b5      	cbz	r5, 4050ac <__pow5mult+0x68>
  40507e:	686a      	ldr	r2, [r5, #4]
  405080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  405082:	1064      	asrs	r4, r4, #1
  405084:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  405088:	6029      	str	r1, [r5, #0]
  40508a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40508e:	4605      	mov	r5, r0
  405090:	d1ea      	bne.n	405068 <__pow5mult+0x24>
  405092:	4628      	mov	r0, r5
  405094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405098:	4632      	mov	r2, r6
  40509a:	4631      	mov	r1, r6
  40509c:	4638      	mov	r0, r7
  40509e:	f7ff ff3f 	bl	404f20 <__multiply>
  4050a2:	6030      	str	r0, [r6, #0]
  4050a4:	f8c0 8000 	str.w	r8, [r0]
  4050a8:	4606      	mov	r6, r0
  4050aa:	e7e0      	b.n	40506e <__pow5mult+0x2a>
  4050ac:	4605      	mov	r5, r0
  4050ae:	e7d9      	b.n	405064 <__pow5mult+0x20>
  4050b0:	1e5a      	subs	r2, r3, #1
  4050b2:	4d0b      	ldr	r5, [pc, #44]	; (4050e0 <__pow5mult+0x9c>)
  4050b4:	2300      	movs	r3, #0
  4050b6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4050ba:	f7ff fe97 	bl	404dec <__multadd>
  4050be:	4605      	mov	r5, r0
  4050c0:	e7c8      	b.n	405054 <__pow5mult+0x10>
  4050c2:	2101      	movs	r1, #1
  4050c4:	4638      	mov	r0, r7
  4050c6:	f7ff fe61 	bl	404d8c <_Balloc>
  4050ca:	f240 2171 	movw	r1, #625	; 0x271
  4050ce:	2201      	movs	r2, #1
  4050d0:	2300      	movs	r3, #0
  4050d2:	6141      	str	r1, [r0, #20]
  4050d4:	6102      	str	r2, [r0, #16]
  4050d6:	4606      	mov	r6, r0
  4050d8:	64b8      	str	r0, [r7, #72]	; 0x48
  4050da:	6003      	str	r3, [r0, #0]
  4050dc:	e7be      	b.n	40505c <__pow5mult+0x18>
  4050de:	bf00      	nop
  4050e0:	00407280 	.word	0x00407280

004050e4 <__lshift>:
  4050e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4050e8:	4691      	mov	r9, r2
  4050ea:	690a      	ldr	r2, [r1, #16]
  4050ec:	688b      	ldr	r3, [r1, #8]
  4050ee:	ea4f 1469 	mov.w	r4, r9, asr #5
  4050f2:	eb04 0802 	add.w	r8, r4, r2
  4050f6:	f108 0501 	add.w	r5, r8, #1
  4050fa:	429d      	cmp	r5, r3
  4050fc:	460e      	mov	r6, r1
  4050fe:	4607      	mov	r7, r0
  405100:	6849      	ldr	r1, [r1, #4]
  405102:	dd04      	ble.n	40510e <__lshift+0x2a>
  405104:	005b      	lsls	r3, r3, #1
  405106:	429d      	cmp	r5, r3
  405108:	f101 0101 	add.w	r1, r1, #1
  40510c:	dcfa      	bgt.n	405104 <__lshift+0x20>
  40510e:	4638      	mov	r0, r7
  405110:	f7ff fe3c 	bl	404d8c <_Balloc>
  405114:	2c00      	cmp	r4, #0
  405116:	f100 0314 	add.w	r3, r0, #20
  40511a:	dd06      	ble.n	40512a <__lshift+0x46>
  40511c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  405120:	2100      	movs	r1, #0
  405122:	f843 1b04 	str.w	r1, [r3], #4
  405126:	429a      	cmp	r2, r3
  405128:	d1fb      	bne.n	405122 <__lshift+0x3e>
  40512a:	6934      	ldr	r4, [r6, #16]
  40512c:	f106 0114 	add.w	r1, r6, #20
  405130:	f019 091f 	ands.w	r9, r9, #31
  405134:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  405138:	d01d      	beq.n	405176 <__lshift+0x92>
  40513a:	f1c9 0c20 	rsb	ip, r9, #32
  40513e:	2200      	movs	r2, #0
  405140:	680c      	ldr	r4, [r1, #0]
  405142:	fa04 f409 	lsl.w	r4, r4, r9
  405146:	4314      	orrs	r4, r2
  405148:	f843 4b04 	str.w	r4, [r3], #4
  40514c:	f851 2b04 	ldr.w	r2, [r1], #4
  405150:	458e      	cmp	lr, r1
  405152:	fa22 f20c 	lsr.w	r2, r2, ip
  405156:	d8f3      	bhi.n	405140 <__lshift+0x5c>
  405158:	601a      	str	r2, [r3, #0]
  40515a:	b10a      	cbz	r2, 405160 <__lshift+0x7c>
  40515c:	f108 0502 	add.w	r5, r8, #2
  405160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  405162:	6872      	ldr	r2, [r6, #4]
  405164:	3d01      	subs	r5, #1
  405166:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40516a:	6105      	str	r5, [r0, #16]
  40516c:	6031      	str	r1, [r6, #0]
  40516e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  405172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405176:	3b04      	subs	r3, #4
  405178:	f851 2b04 	ldr.w	r2, [r1], #4
  40517c:	f843 2f04 	str.w	r2, [r3, #4]!
  405180:	458e      	cmp	lr, r1
  405182:	d8f9      	bhi.n	405178 <__lshift+0x94>
  405184:	e7ec      	b.n	405160 <__lshift+0x7c>
  405186:	bf00      	nop

00405188 <__mcmp>:
  405188:	b430      	push	{r4, r5}
  40518a:	690b      	ldr	r3, [r1, #16]
  40518c:	4605      	mov	r5, r0
  40518e:	6900      	ldr	r0, [r0, #16]
  405190:	1ac0      	subs	r0, r0, r3
  405192:	d10f      	bne.n	4051b4 <__mcmp+0x2c>
  405194:	009b      	lsls	r3, r3, #2
  405196:	3514      	adds	r5, #20
  405198:	3114      	adds	r1, #20
  40519a:	4419      	add	r1, r3
  40519c:	442b      	add	r3, r5
  40519e:	e001      	b.n	4051a4 <__mcmp+0x1c>
  4051a0:	429d      	cmp	r5, r3
  4051a2:	d207      	bcs.n	4051b4 <__mcmp+0x2c>
  4051a4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4051a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4051ac:	4294      	cmp	r4, r2
  4051ae:	d0f7      	beq.n	4051a0 <__mcmp+0x18>
  4051b0:	d302      	bcc.n	4051b8 <__mcmp+0x30>
  4051b2:	2001      	movs	r0, #1
  4051b4:	bc30      	pop	{r4, r5}
  4051b6:	4770      	bx	lr
  4051b8:	f04f 30ff 	mov.w	r0, #4294967295
  4051bc:	e7fa      	b.n	4051b4 <__mcmp+0x2c>
  4051be:	bf00      	nop

004051c0 <__mdiff>:
  4051c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4051c4:	690f      	ldr	r7, [r1, #16]
  4051c6:	460e      	mov	r6, r1
  4051c8:	6911      	ldr	r1, [r2, #16]
  4051ca:	1a7f      	subs	r7, r7, r1
  4051cc:	2f00      	cmp	r7, #0
  4051ce:	4690      	mov	r8, r2
  4051d0:	d117      	bne.n	405202 <__mdiff+0x42>
  4051d2:	0089      	lsls	r1, r1, #2
  4051d4:	f106 0514 	add.w	r5, r6, #20
  4051d8:	f102 0e14 	add.w	lr, r2, #20
  4051dc:	186b      	adds	r3, r5, r1
  4051de:	4471      	add	r1, lr
  4051e0:	e001      	b.n	4051e6 <__mdiff+0x26>
  4051e2:	429d      	cmp	r5, r3
  4051e4:	d25c      	bcs.n	4052a0 <__mdiff+0xe0>
  4051e6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4051ea:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  4051ee:	42a2      	cmp	r2, r4
  4051f0:	d0f7      	beq.n	4051e2 <__mdiff+0x22>
  4051f2:	d25e      	bcs.n	4052b2 <__mdiff+0xf2>
  4051f4:	4633      	mov	r3, r6
  4051f6:	462c      	mov	r4, r5
  4051f8:	4646      	mov	r6, r8
  4051fa:	4675      	mov	r5, lr
  4051fc:	4698      	mov	r8, r3
  4051fe:	2701      	movs	r7, #1
  405200:	e005      	b.n	40520e <__mdiff+0x4e>
  405202:	db58      	blt.n	4052b6 <__mdiff+0xf6>
  405204:	f106 0514 	add.w	r5, r6, #20
  405208:	f108 0414 	add.w	r4, r8, #20
  40520c:	2700      	movs	r7, #0
  40520e:	6871      	ldr	r1, [r6, #4]
  405210:	f7ff fdbc 	bl	404d8c <_Balloc>
  405214:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405218:	6936      	ldr	r6, [r6, #16]
  40521a:	60c7      	str	r7, [r0, #12]
  40521c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  405220:	46a6      	mov	lr, r4
  405222:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  405226:	f100 0414 	add.w	r4, r0, #20
  40522a:	2300      	movs	r3, #0
  40522c:	f85e 1b04 	ldr.w	r1, [lr], #4
  405230:	f855 8b04 	ldr.w	r8, [r5], #4
  405234:	b28a      	uxth	r2, r1
  405236:	fa13 f388 	uxtah	r3, r3, r8
  40523a:	0c09      	lsrs	r1, r1, #16
  40523c:	1a9a      	subs	r2, r3, r2
  40523e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  405242:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405246:	b292      	uxth	r2, r2
  405248:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40524c:	45f4      	cmp	ip, lr
  40524e:	f844 2b04 	str.w	r2, [r4], #4
  405252:	ea4f 4323 	mov.w	r3, r3, asr #16
  405256:	d8e9      	bhi.n	40522c <__mdiff+0x6c>
  405258:	42af      	cmp	r7, r5
  40525a:	d917      	bls.n	40528c <__mdiff+0xcc>
  40525c:	46a4      	mov	ip, r4
  40525e:	46ae      	mov	lr, r5
  405260:	f85e 2b04 	ldr.w	r2, [lr], #4
  405264:	fa13 f382 	uxtah	r3, r3, r2
  405268:	1419      	asrs	r1, r3, #16
  40526a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40526e:	b29b      	uxth	r3, r3
  405270:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  405274:	4577      	cmp	r7, lr
  405276:	f84c 2b04 	str.w	r2, [ip], #4
  40527a:	ea4f 4321 	mov.w	r3, r1, asr #16
  40527e:	d8ef      	bhi.n	405260 <__mdiff+0xa0>
  405280:	43ed      	mvns	r5, r5
  405282:	442f      	add	r7, r5
  405284:	f027 0703 	bic.w	r7, r7, #3
  405288:	3704      	adds	r7, #4
  40528a:	443c      	add	r4, r7
  40528c:	3c04      	subs	r4, #4
  40528e:	b922      	cbnz	r2, 40529a <__mdiff+0xda>
  405290:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  405294:	3e01      	subs	r6, #1
  405296:	2b00      	cmp	r3, #0
  405298:	d0fa      	beq.n	405290 <__mdiff+0xd0>
  40529a:	6106      	str	r6, [r0, #16]
  40529c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4052a0:	2100      	movs	r1, #0
  4052a2:	f7ff fd73 	bl	404d8c <_Balloc>
  4052a6:	2201      	movs	r2, #1
  4052a8:	2300      	movs	r3, #0
  4052aa:	6102      	str	r2, [r0, #16]
  4052ac:	6143      	str	r3, [r0, #20]
  4052ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4052b2:	4674      	mov	r4, lr
  4052b4:	e7ab      	b.n	40520e <__mdiff+0x4e>
  4052b6:	4633      	mov	r3, r6
  4052b8:	f106 0414 	add.w	r4, r6, #20
  4052bc:	f102 0514 	add.w	r5, r2, #20
  4052c0:	4616      	mov	r6, r2
  4052c2:	2701      	movs	r7, #1
  4052c4:	4698      	mov	r8, r3
  4052c6:	e7a2      	b.n	40520e <__mdiff+0x4e>

004052c8 <__d2b>:
  4052c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4052cc:	b082      	sub	sp, #8
  4052ce:	2101      	movs	r1, #1
  4052d0:	461c      	mov	r4, r3
  4052d2:	f3c3 570a 	ubfx	r7, r3, #20, #11
  4052d6:	4615      	mov	r5, r2
  4052d8:	9e08      	ldr	r6, [sp, #32]
  4052da:	f7ff fd57 	bl	404d8c <_Balloc>
  4052de:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4052e2:	4680      	mov	r8, r0
  4052e4:	b10f      	cbz	r7, 4052ea <__d2b+0x22>
  4052e6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4052ea:	9401      	str	r4, [sp, #4]
  4052ec:	b31d      	cbz	r5, 405336 <__d2b+0x6e>
  4052ee:	a802      	add	r0, sp, #8
  4052f0:	f840 5d08 	str.w	r5, [r0, #-8]!
  4052f4:	f7ff fdda 	bl	404eac <__lo0bits>
  4052f8:	2800      	cmp	r0, #0
  4052fa:	d134      	bne.n	405366 <__d2b+0x9e>
  4052fc:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405300:	f8c8 2014 	str.w	r2, [r8, #20]
  405304:	2b00      	cmp	r3, #0
  405306:	bf0c      	ite	eq
  405308:	2101      	moveq	r1, #1
  40530a:	2102      	movne	r1, #2
  40530c:	f8c8 3018 	str.w	r3, [r8, #24]
  405310:	f8c8 1010 	str.w	r1, [r8, #16]
  405314:	b9df      	cbnz	r7, 40534e <__d2b+0x86>
  405316:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40531a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40531e:	6030      	str	r0, [r6, #0]
  405320:	6918      	ldr	r0, [r3, #16]
  405322:	f7ff fda3 	bl	404e6c <__hi0bits>
  405326:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405328:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40532c:	6018      	str	r0, [r3, #0]
  40532e:	4640      	mov	r0, r8
  405330:	b002      	add	sp, #8
  405332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405336:	a801      	add	r0, sp, #4
  405338:	f7ff fdb8 	bl	404eac <__lo0bits>
  40533c:	9b01      	ldr	r3, [sp, #4]
  40533e:	f8c8 3014 	str.w	r3, [r8, #20]
  405342:	2101      	movs	r1, #1
  405344:	3020      	adds	r0, #32
  405346:	f8c8 1010 	str.w	r1, [r8, #16]
  40534a:	2f00      	cmp	r7, #0
  40534c:	d0e3      	beq.n	405316 <__d2b+0x4e>
  40534e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405350:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  405354:	4407      	add	r7, r0
  405356:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40535a:	6037      	str	r7, [r6, #0]
  40535c:	6018      	str	r0, [r3, #0]
  40535e:	4640      	mov	r0, r8
  405360:	b002      	add	sp, #8
  405362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405366:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40536a:	f1c0 0220 	rsb	r2, r0, #32
  40536e:	fa03 f202 	lsl.w	r2, r3, r2
  405372:	430a      	orrs	r2, r1
  405374:	40c3      	lsrs	r3, r0
  405376:	9301      	str	r3, [sp, #4]
  405378:	f8c8 2014 	str.w	r2, [r8, #20]
  40537c:	e7c2      	b.n	405304 <__d2b+0x3c>
  40537e:	bf00      	nop

00405380 <_sbrk_r>:
  405380:	b538      	push	{r3, r4, r5, lr}
  405382:	4c07      	ldr	r4, [pc, #28]	; (4053a0 <_sbrk_r+0x20>)
  405384:	2300      	movs	r3, #0
  405386:	4605      	mov	r5, r0
  405388:	4608      	mov	r0, r1
  40538a:	6023      	str	r3, [r4, #0]
  40538c:	f7fc fa1a 	bl	4017c4 <_sbrk>
  405390:	1c43      	adds	r3, r0, #1
  405392:	d000      	beq.n	405396 <_sbrk_r+0x16>
  405394:	bd38      	pop	{r3, r4, r5, pc}
  405396:	6823      	ldr	r3, [r4, #0]
  405398:	2b00      	cmp	r3, #0
  40539a:	d0fb      	beq.n	405394 <_sbrk_r+0x14>
  40539c:	602b      	str	r3, [r5, #0]
  40539e:	bd38      	pop	{r3, r4, r5, pc}
  4053a0:	20400ccc 	.word	0x20400ccc
	...

004053c0 <strlen>:
  4053c0:	f890 f000 	pld	[r0]
  4053c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4053c8:	f020 0107 	bic.w	r1, r0, #7
  4053cc:	f06f 0c00 	mvn.w	ip, #0
  4053d0:	f010 0407 	ands.w	r4, r0, #7
  4053d4:	f891 f020 	pld	[r1, #32]
  4053d8:	f040 8049 	bne.w	40546e <strlen+0xae>
  4053dc:	f04f 0400 	mov.w	r4, #0
  4053e0:	f06f 0007 	mvn.w	r0, #7
  4053e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4053e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4053ec:	f100 0008 	add.w	r0, r0, #8
  4053f0:	fa82 f24c 	uadd8	r2, r2, ip
  4053f4:	faa4 f28c 	sel	r2, r4, ip
  4053f8:	fa83 f34c 	uadd8	r3, r3, ip
  4053fc:	faa2 f38c 	sel	r3, r2, ip
  405400:	bb4b      	cbnz	r3, 405456 <strlen+0x96>
  405402:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405406:	fa82 f24c 	uadd8	r2, r2, ip
  40540a:	f100 0008 	add.w	r0, r0, #8
  40540e:	faa4 f28c 	sel	r2, r4, ip
  405412:	fa83 f34c 	uadd8	r3, r3, ip
  405416:	faa2 f38c 	sel	r3, r2, ip
  40541a:	b9e3      	cbnz	r3, 405456 <strlen+0x96>
  40541c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  405420:	fa82 f24c 	uadd8	r2, r2, ip
  405424:	f100 0008 	add.w	r0, r0, #8
  405428:	faa4 f28c 	sel	r2, r4, ip
  40542c:	fa83 f34c 	uadd8	r3, r3, ip
  405430:	faa2 f38c 	sel	r3, r2, ip
  405434:	b97b      	cbnz	r3, 405456 <strlen+0x96>
  405436:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40543a:	f101 0120 	add.w	r1, r1, #32
  40543e:	fa82 f24c 	uadd8	r2, r2, ip
  405442:	f100 0008 	add.w	r0, r0, #8
  405446:	faa4 f28c 	sel	r2, r4, ip
  40544a:	fa83 f34c 	uadd8	r3, r3, ip
  40544e:	faa2 f38c 	sel	r3, r2, ip
  405452:	2b00      	cmp	r3, #0
  405454:	d0c6      	beq.n	4053e4 <strlen+0x24>
  405456:	2a00      	cmp	r2, #0
  405458:	bf04      	itt	eq
  40545a:	3004      	addeq	r0, #4
  40545c:	461a      	moveq	r2, r3
  40545e:	ba12      	rev	r2, r2
  405460:	fab2 f282 	clz	r2, r2
  405464:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  405468:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40546c:	4770      	bx	lr
  40546e:	e9d1 2300 	ldrd	r2, r3, [r1]
  405472:	f004 0503 	and.w	r5, r4, #3
  405476:	f1c4 0000 	rsb	r0, r4, #0
  40547a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40547e:	f014 0f04 	tst.w	r4, #4
  405482:	f891 f040 	pld	[r1, #64]	; 0x40
  405486:	fa0c f505 	lsl.w	r5, ip, r5
  40548a:	ea62 0205 	orn	r2, r2, r5
  40548e:	bf1c      	itt	ne
  405490:	ea63 0305 	ornne	r3, r3, r5
  405494:	4662      	movne	r2, ip
  405496:	f04f 0400 	mov.w	r4, #0
  40549a:	e7a9      	b.n	4053f0 <strlen+0x30>

0040549c <__ssprint_r>:
  40549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4054a0:	6893      	ldr	r3, [r2, #8]
  4054a2:	b083      	sub	sp, #12
  4054a4:	4690      	mov	r8, r2
  4054a6:	2b00      	cmp	r3, #0
  4054a8:	d070      	beq.n	40558c <__ssprint_r+0xf0>
  4054aa:	4682      	mov	sl, r0
  4054ac:	460c      	mov	r4, r1
  4054ae:	6817      	ldr	r7, [r2, #0]
  4054b0:	688d      	ldr	r5, [r1, #8]
  4054b2:	6808      	ldr	r0, [r1, #0]
  4054b4:	e042      	b.n	40553c <__ssprint_r+0xa0>
  4054b6:	89a3      	ldrh	r3, [r4, #12]
  4054b8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4054bc:	d02e      	beq.n	40551c <__ssprint_r+0x80>
  4054be:	6965      	ldr	r5, [r4, #20]
  4054c0:	6921      	ldr	r1, [r4, #16]
  4054c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  4054c6:	eba0 0b01 	sub.w	fp, r0, r1
  4054ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  4054ce:	f10b 0001 	add.w	r0, fp, #1
  4054d2:	106d      	asrs	r5, r5, #1
  4054d4:	4430      	add	r0, r6
  4054d6:	42a8      	cmp	r0, r5
  4054d8:	462a      	mov	r2, r5
  4054da:	bf84      	itt	hi
  4054dc:	4605      	movhi	r5, r0
  4054de:	462a      	movhi	r2, r5
  4054e0:	055b      	lsls	r3, r3, #21
  4054e2:	d538      	bpl.n	405556 <__ssprint_r+0xba>
  4054e4:	4611      	mov	r1, r2
  4054e6:	4650      	mov	r0, sl
  4054e8:	f7ff f8a4 	bl	404634 <_malloc_r>
  4054ec:	2800      	cmp	r0, #0
  4054ee:	d03c      	beq.n	40556a <__ssprint_r+0xce>
  4054f0:	465a      	mov	r2, fp
  4054f2:	6921      	ldr	r1, [r4, #16]
  4054f4:	9001      	str	r0, [sp, #4]
  4054f6:	f7ff fba3 	bl	404c40 <memcpy>
  4054fa:	89a2      	ldrh	r2, [r4, #12]
  4054fc:	9b01      	ldr	r3, [sp, #4]
  4054fe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  405502:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  405506:	81a2      	strh	r2, [r4, #12]
  405508:	eba5 020b 	sub.w	r2, r5, fp
  40550c:	eb03 000b 	add.w	r0, r3, fp
  405510:	6165      	str	r5, [r4, #20]
  405512:	6123      	str	r3, [r4, #16]
  405514:	6020      	str	r0, [r4, #0]
  405516:	60a2      	str	r2, [r4, #8]
  405518:	4635      	mov	r5, r6
  40551a:	46b3      	mov	fp, r6
  40551c:	465a      	mov	r2, fp
  40551e:	4649      	mov	r1, r9
  405520:	f000 fa18 	bl	405954 <memmove>
  405524:	f8d8 3008 	ldr.w	r3, [r8, #8]
  405528:	68a2      	ldr	r2, [r4, #8]
  40552a:	6820      	ldr	r0, [r4, #0]
  40552c:	1b55      	subs	r5, r2, r5
  40552e:	4458      	add	r0, fp
  405530:	1b9e      	subs	r6, r3, r6
  405532:	60a5      	str	r5, [r4, #8]
  405534:	6020      	str	r0, [r4, #0]
  405536:	f8c8 6008 	str.w	r6, [r8, #8]
  40553a:	b33e      	cbz	r6, 40558c <__ssprint_r+0xf0>
  40553c:	687e      	ldr	r6, [r7, #4]
  40553e:	463b      	mov	r3, r7
  405540:	3708      	adds	r7, #8
  405542:	2e00      	cmp	r6, #0
  405544:	d0fa      	beq.n	40553c <__ssprint_r+0xa0>
  405546:	42ae      	cmp	r6, r5
  405548:	f8d3 9000 	ldr.w	r9, [r3]
  40554c:	46ab      	mov	fp, r5
  40554e:	d2b2      	bcs.n	4054b6 <__ssprint_r+0x1a>
  405550:	4635      	mov	r5, r6
  405552:	46b3      	mov	fp, r6
  405554:	e7e2      	b.n	40551c <__ssprint_r+0x80>
  405556:	4650      	mov	r0, sl
  405558:	f000 fa60 	bl	405a1c <_realloc_r>
  40555c:	4603      	mov	r3, r0
  40555e:	2800      	cmp	r0, #0
  405560:	d1d2      	bne.n	405508 <__ssprint_r+0x6c>
  405562:	6921      	ldr	r1, [r4, #16]
  405564:	4650      	mov	r0, sl
  405566:	f000 f8f9 	bl	40575c <_free_r>
  40556a:	230c      	movs	r3, #12
  40556c:	f8ca 3000 	str.w	r3, [sl]
  405570:	89a3      	ldrh	r3, [r4, #12]
  405572:	2200      	movs	r2, #0
  405574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405578:	f04f 30ff 	mov.w	r0, #4294967295
  40557c:	81a3      	strh	r3, [r4, #12]
  40557e:	f8c8 2008 	str.w	r2, [r8, #8]
  405582:	f8c8 2004 	str.w	r2, [r8, #4]
  405586:	b003      	add	sp, #12
  405588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40558c:	2000      	movs	r0, #0
  40558e:	f8c8 0004 	str.w	r0, [r8, #4]
  405592:	b003      	add	sp, #12
  405594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405598 <__register_exitproc>:
  405598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40559c:	4d2c      	ldr	r5, [pc, #176]	; (405650 <__register_exitproc+0xb8>)
  40559e:	4606      	mov	r6, r0
  4055a0:	6828      	ldr	r0, [r5, #0]
  4055a2:	4698      	mov	r8, r3
  4055a4:	460f      	mov	r7, r1
  4055a6:	4691      	mov	r9, r2
  4055a8:	f7ff f840 	bl	40462c <__retarget_lock_acquire_recursive>
  4055ac:	4b29      	ldr	r3, [pc, #164]	; (405654 <__register_exitproc+0xbc>)
  4055ae:	681c      	ldr	r4, [r3, #0]
  4055b0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4055b4:	2b00      	cmp	r3, #0
  4055b6:	d03e      	beq.n	405636 <__register_exitproc+0x9e>
  4055b8:	685a      	ldr	r2, [r3, #4]
  4055ba:	2a1f      	cmp	r2, #31
  4055bc:	dc1c      	bgt.n	4055f8 <__register_exitproc+0x60>
  4055be:	f102 0e01 	add.w	lr, r2, #1
  4055c2:	b176      	cbz	r6, 4055e2 <__register_exitproc+0x4a>
  4055c4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4055c8:	2401      	movs	r4, #1
  4055ca:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4055ce:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4055d2:	4094      	lsls	r4, r2
  4055d4:	4320      	orrs	r0, r4
  4055d6:	2e02      	cmp	r6, #2
  4055d8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4055dc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4055e0:	d023      	beq.n	40562a <__register_exitproc+0x92>
  4055e2:	3202      	adds	r2, #2
  4055e4:	f8c3 e004 	str.w	lr, [r3, #4]
  4055e8:	6828      	ldr	r0, [r5, #0]
  4055ea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4055ee:	f7ff f81f 	bl	404630 <__retarget_lock_release_recursive>
  4055f2:	2000      	movs	r0, #0
  4055f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4055f8:	4b17      	ldr	r3, [pc, #92]	; (405658 <__register_exitproc+0xc0>)
  4055fa:	b30b      	cbz	r3, 405640 <__register_exitproc+0xa8>
  4055fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405600:	f3af 8000 	nop.w
  405604:	4603      	mov	r3, r0
  405606:	b1d8      	cbz	r0, 405640 <__register_exitproc+0xa8>
  405608:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40560c:	6002      	str	r2, [r0, #0]
  40560e:	2100      	movs	r1, #0
  405610:	6041      	str	r1, [r0, #4]
  405612:	460a      	mov	r2, r1
  405614:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405618:	f04f 0e01 	mov.w	lr, #1
  40561c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  405620:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  405624:	2e00      	cmp	r6, #0
  405626:	d0dc      	beq.n	4055e2 <__register_exitproc+0x4a>
  405628:	e7cc      	b.n	4055c4 <__register_exitproc+0x2c>
  40562a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40562e:	430c      	orrs	r4, r1
  405630:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405634:	e7d5      	b.n	4055e2 <__register_exitproc+0x4a>
  405636:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40563a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40563e:	e7bb      	b.n	4055b8 <__register_exitproc+0x20>
  405640:	6828      	ldr	r0, [r5, #0]
  405642:	f7fe fff5 	bl	404630 <__retarget_lock_release_recursive>
  405646:	f04f 30ff 	mov.w	r0, #4294967295
  40564a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40564e:	bf00      	nop
  405650:	20400450 	.word	0x20400450
  405654:	00407118 	.word	0x00407118
  405658:	00000000 	.word	0x00000000

0040565c <_calloc_r>:
  40565c:	b510      	push	{r4, lr}
  40565e:	fb02 f101 	mul.w	r1, r2, r1
  405662:	f7fe ffe7 	bl	404634 <_malloc_r>
  405666:	4604      	mov	r4, r0
  405668:	b1d8      	cbz	r0, 4056a2 <_calloc_r+0x46>
  40566a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40566e:	f022 0203 	bic.w	r2, r2, #3
  405672:	3a04      	subs	r2, #4
  405674:	2a24      	cmp	r2, #36	; 0x24
  405676:	d818      	bhi.n	4056aa <_calloc_r+0x4e>
  405678:	2a13      	cmp	r2, #19
  40567a:	d914      	bls.n	4056a6 <_calloc_r+0x4a>
  40567c:	2300      	movs	r3, #0
  40567e:	2a1b      	cmp	r2, #27
  405680:	6003      	str	r3, [r0, #0]
  405682:	6043      	str	r3, [r0, #4]
  405684:	d916      	bls.n	4056b4 <_calloc_r+0x58>
  405686:	2a24      	cmp	r2, #36	; 0x24
  405688:	6083      	str	r3, [r0, #8]
  40568a:	60c3      	str	r3, [r0, #12]
  40568c:	bf11      	iteee	ne
  40568e:	f100 0210 	addne.w	r2, r0, #16
  405692:	6103      	streq	r3, [r0, #16]
  405694:	6143      	streq	r3, [r0, #20]
  405696:	f100 0218 	addeq.w	r2, r0, #24
  40569a:	2300      	movs	r3, #0
  40569c:	6013      	str	r3, [r2, #0]
  40569e:	6053      	str	r3, [r2, #4]
  4056a0:	6093      	str	r3, [r2, #8]
  4056a2:	4620      	mov	r0, r4
  4056a4:	bd10      	pop	{r4, pc}
  4056a6:	4602      	mov	r2, r0
  4056a8:	e7f7      	b.n	40569a <_calloc_r+0x3e>
  4056aa:	2100      	movs	r1, #0
  4056ac:	f7fc fd24 	bl	4020f8 <memset>
  4056b0:	4620      	mov	r0, r4
  4056b2:	bd10      	pop	{r4, pc}
  4056b4:	f100 0208 	add.w	r2, r0, #8
  4056b8:	e7ef      	b.n	40569a <_calloc_r+0x3e>
  4056ba:	bf00      	nop

004056bc <_malloc_trim_r>:
  4056bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4056be:	4f24      	ldr	r7, [pc, #144]	; (405750 <_malloc_trim_r+0x94>)
  4056c0:	460c      	mov	r4, r1
  4056c2:	4606      	mov	r6, r0
  4056c4:	f7ff fb56 	bl	404d74 <__malloc_lock>
  4056c8:	68bb      	ldr	r3, [r7, #8]
  4056ca:	685d      	ldr	r5, [r3, #4]
  4056cc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4056d0:	310f      	adds	r1, #15
  4056d2:	f025 0503 	bic.w	r5, r5, #3
  4056d6:	4429      	add	r1, r5
  4056d8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4056dc:	f021 010f 	bic.w	r1, r1, #15
  4056e0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4056e4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4056e8:	db07      	blt.n	4056fa <_malloc_trim_r+0x3e>
  4056ea:	2100      	movs	r1, #0
  4056ec:	4630      	mov	r0, r6
  4056ee:	f7ff fe47 	bl	405380 <_sbrk_r>
  4056f2:	68bb      	ldr	r3, [r7, #8]
  4056f4:	442b      	add	r3, r5
  4056f6:	4298      	cmp	r0, r3
  4056f8:	d004      	beq.n	405704 <_malloc_trim_r+0x48>
  4056fa:	4630      	mov	r0, r6
  4056fc:	f7ff fb40 	bl	404d80 <__malloc_unlock>
  405700:	2000      	movs	r0, #0
  405702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405704:	4261      	negs	r1, r4
  405706:	4630      	mov	r0, r6
  405708:	f7ff fe3a 	bl	405380 <_sbrk_r>
  40570c:	3001      	adds	r0, #1
  40570e:	d00d      	beq.n	40572c <_malloc_trim_r+0x70>
  405710:	4b10      	ldr	r3, [pc, #64]	; (405754 <_malloc_trim_r+0x98>)
  405712:	68ba      	ldr	r2, [r7, #8]
  405714:	6819      	ldr	r1, [r3, #0]
  405716:	1b2d      	subs	r5, r5, r4
  405718:	f045 0501 	orr.w	r5, r5, #1
  40571c:	4630      	mov	r0, r6
  40571e:	1b09      	subs	r1, r1, r4
  405720:	6055      	str	r5, [r2, #4]
  405722:	6019      	str	r1, [r3, #0]
  405724:	f7ff fb2c 	bl	404d80 <__malloc_unlock>
  405728:	2001      	movs	r0, #1
  40572a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40572c:	2100      	movs	r1, #0
  40572e:	4630      	mov	r0, r6
  405730:	f7ff fe26 	bl	405380 <_sbrk_r>
  405734:	68ba      	ldr	r2, [r7, #8]
  405736:	1a83      	subs	r3, r0, r2
  405738:	2b0f      	cmp	r3, #15
  40573a:	ddde      	ble.n	4056fa <_malloc_trim_r+0x3e>
  40573c:	4c06      	ldr	r4, [pc, #24]	; (405758 <_malloc_trim_r+0x9c>)
  40573e:	4905      	ldr	r1, [pc, #20]	; (405754 <_malloc_trim_r+0x98>)
  405740:	6824      	ldr	r4, [r4, #0]
  405742:	f043 0301 	orr.w	r3, r3, #1
  405746:	1b00      	subs	r0, r0, r4
  405748:	6053      	str	r3, [r2, #4]
  40574a:	6008      	str	r0, [r1, #0]
  40574c:	e7d5      	b.n	4056fa <_malloc_trim_r+0x3e>
  40574e:	bf00      	nop
  405750:	20400454 	.word	0x20400454
  405754:	20400c74 	.word	0x20400c74
  405758:	2040085c 	.word	0x2040085c

0040575c <_free_r>:
  40575c:	2900      	cmp	r1, #0
  40575e:	d044      	beq.n	4057ea <_free_r+0x8e>
  405760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405764:	460d      	mov	r5, r1
  405766:	4680      	mov	r8, r0
  405768:	f7ff fb04 	bl	404d74 <__malloc_lock>
  40576c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405770:	4969      	ldr	r1, [pc, #420]	; (405918 <_free_r+0x1bc>)
  405772:	f027 0301 	bic.w	r3, r7, #1
  405776:	f1a5 0408 	sub.w	r4, r5, #8
  40577a:	18e2      	adds	r2, r4, r3
  40577c:	688e      	ldr	r6, [r1, #8]
  40577e:	6850      	ldr	r0, [r2, #4]
  405780:	42b2      	cmp	r2, r6
  405782:	f020 0003 	bic.w	r0, r0, #3
  405786:	d05e      	beq.n	405846 <_free_r+0xea>
  405788:	07fe      	lsls	r6, r7, #31
  40578a:	6050      	str	r0, [r2, #4]
  40578c:	d40b      	bmi.n	4057a6 <_free_r+0x4a>
  40578e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405792:	1be4      	subs	r4, r4, r7
  405794:	f101 0e08 	add.w	lr, r1, #8
  405798:	68a5      	ldr	r5, [r4, #8]
  40579a:	4575      	cmp	r5, lr
  40579c:	443b      	add	r3, r7
  40579e:	d06d      	beq.n	40587c <_free_r+0x120>
  4057a0:	68e7      	ldr	r7, [r4, #12]
  4057a2:	60ef      	str	r7, [r5, #12]
  4057a4:	60bd      	str	r5, [r7, #8]
  4057a6:	1815      	adds	r5, r2, r0
  4057a8:	686d      	ldr	r5, [r5, #4]
  4057aa:	07ed      	lsls	r5, r5, #31
  4057ac:	d53e      	bpl.n	40582c <_free_r+0xd0>
  4057ae:	f043 0201 	orr.w	r2, r3, #1
  4057b2:	6062      	str	r2, [r4, #4]
  4057b4:	50e3      	str	r3, [r4, r3]
  4057b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4057ba:	d217      	bcs.n	4057ec <_free_r+0x90>
  4057bc:	08db      	lsrs	r3, r3, #3
  4057be:	1c58      	adds	r0, r3, #1
  4057c0:	109a      	asrs	r2, r3, #2
  4057c2:	684d      	ldr	r5, [r1, #4]
  4057c4:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4057c8:	60a7      	str	r7, [r4, #8]
  4057ca:	2301      	movs	r3, #1
  4057cc:	4093      	lsls	r3, r2
  4057ce:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4057d2:	432b      	orrs	r3, r5
  4057d4:	3a08      	subs	r2, #8
  4057d6:	60e2      	str	r2, [r4, #12]
  4057d8:	604b      	str	r3, [r1, #4]
  4057da:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4057de:	60fc      	str	r4, [r7, #12]
  4057e0:	4640      	mov	r0, r8
  4057e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4057e6:	f7ff bacb 	b.w	404d80 <__malloc_unlock>
  4057ea:	4770      	bx	lr
  4057ec:	0a5a      	lsrs	r2, r3, #9
  4057ee:	2a04      	cmp	r2, #4
  4057f0:	d852      	bhi.n	405898 <_free_r+0x13c>
  4057f2:	099a      	lsrs	r2, r3, #6
  4057f4:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4057f8:	00ff      	lsls	r7, r7, #3
  4057fa:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4057fe:	19c8      	adds	r0, r1, r7
  405800:	59ca      	ldr	r2, [r1, r7]
  405802:	3808      	subs	r0, #8
  405804:	4290      	cmp	r0, r2
  405806:	d04f      	beq.n	4058a8 <_free_r+0x14c>
  405808:	6851      	ldr	r1, [r2, #4]
  40580a:	f021 0103 	bic.w	r1, r1, #3
  40580e:	428b      	cmp	r3, r1
  405810:	d232      	bcs.n	405878 <_free_r+0x11c>
  405812:	6892      	ldr	r2, [r2, #8]
  405814:	4290      	cmp	r0, r2
  405816:	d1f7      	bne.n	405808 <_free_r+0xac>
  405818:	68c3      	ldr	r3, [r0, #12]
  40581a:	60a0      	str	r0, [r4, #8]
  40581c:	60e3      	str	r3, [r4, #12]
  40581e:	609c      	str	r4, [r3, #8]
  405820:	60c4      	str	r4, [r0, #12]
  405822:	4640      	mov	r0, r8
  405824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405828:	f7ff baaa 	b.w	404d80 <__malloc_unlock>
  40582c:	6895      	ldr	r5, [r2, #8]
  40582e:	4f3b      	ldr	r7, [pc, #236]	; (40591c <_free_r+0x1c0>)
  405830:	42bd      	cmp	r5, r7
  405832:	4403      	add	r3, r0
  405834:	d040      	beq.n	4058b8 <_free_r+0x15c>
  405836:	68d0      	ldr	r0, [r2, #12]
  405838:	60e8      	str	r0, [r5, #12]
  40583a:	f043 0201 	orr.w	r2, r3, #1
  40583e:	6085      	str	r5, [r0, #8]
  405840:	6062      	str	r2, [r4, #4]
  405842:	50e3      	str	r3, [r4, r3]
  405844:	e7b7      	b.n	4057b6 <_free_r+0x5a>
  405846:	07ff      	lsls	r7, r7, #31
  405848:	4403      	add	r3, r0
  40584a:	d407      	bmi.n	40585c <_free_r+0x100>
  40584c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405850:	1aa4      	subs	r4, r4, r2
  405852:	4413      	add	r3, r2
  405854:	68a0      	ldr	r0, [r4, #8]
  405856:	68e2      	ldr	r2, [r4, #12]
  405858:	60c2      	str	r2, [r0, #12]
  40585a:	6090      	str	r0, [r2, #8]
  40585c:	4a30      	ldr	r2, [pc, #192]	; (405920 <_free_r+0x1c4>)
  40585e:	6812      	ldr	r2, [r2, #0]
  405860:	f043 0001 	orr.w	r0, r3, #1
  405864:	4293      	cmp	r3, r2
  405866:	6060      	str	r0, [r4, #4]
  405868:	608c      	str	r4, [r1, #8]
  40586a:	d3b9      	bcc.n	4057e0 <_free_r+0x84>
  40586c:	4b2d      	ldr	r3, [pc, #180]	; (405924 <_free_r+0x1c8>)
  40586e:	4640      	mov	r0, r8
  405870:	6819      	ldr	r1, [r3, #0]
  405872:	f7ff ff23 	bl	4056bc <_malloc_trim_r>
  405876:	e7b3      	b.n	4057e0 <_free_r+0x84>
  405878:	4610      	mov	r0, r2
  40587a:	e7cd      	b.n	405818 <_free_r+0xbc>
  40587c:	1811      	adds	r1, r2, r0
  40587e:	6849      	ldr	r1, [r1, #4]
  405880:	07c9      	lsls	r1, r1, #31
  405882:	d444      	bmi.n	40590e <_free_r+0x1b2>
  405884:	6891      	ldr	r1, [r2, #8]
  405886:	68d2      	ldr	r2, [r2, #12]
  405888:	60ca      	str	r2, [r1, #12]
  40588a:	4403      	add	r3, r0
  40588c:	f043 0001 	orr.w	r0, r3, #1
  405890:	6091      	str	r1, [r2, #8]
  405892:	6060      	str	r0, [r4, #4]
  405894:	50e3      	str	r3, [r4, r3]
  405896:	e7a3      	b.n	4057e0 <_free_r+0x84>
  405898:	2a14      	cmp	r2, #20
  40589a:	d816      	bhi.n	4058ca <_free_r+0x16e>
  40589c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4058a0:	00ff      	lsls	r7, r7, #3
  4058a2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4058a6:	e7aa      	b.n	4057fe <_free_r+0xa2>
  4058a8:	10aa      	asrs	r2, r5, #2
  4058aa:	2301      	movs	r3, #1
  4058ac:	684d      	ldr	r5, [r1, #4]
  4058ae:	4093      	lsls	r3, r2
  4058b0:	432b      	orrs	r3, r5
  4058b2:	604b      	str	r3, [r1, #4]
  4058b4:	4603      	mov	r3, r0
  4058b6:	e7b0      	b.n	40581a <_free_r+0xbe>
  4058b8:	f043 0201 	orr.w	r2, r3, #1
  4058bc:	614c      	str	r4, [r1, #20]
  4058be:	610c      	str	r4, [r1, #16]
  4058c0:	60e5      	str	r5, [r4, #12]
  4058c2:	60a5      	str	r5, [r4, #8]
  4058c4:	6062      	str	r2, [r4, #4]
  4058c6:	50e3      	str	r3, [r4, r3]
  4058c8:	e78a      	b.n	4057e0 <_free_r+0x84>
  4058ca:	2a54      	cmp	r2, #84	; 0x54
  4058cc:	d806      	bhi.n	4058dc <_free_r+0x180>
  4058ce:	0b1a      	lsrs	r2, r3, #12
  4058d0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4058d4:	00ff      	lsls	r7, r7, #3
  4058d6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4058da:	e790      	b.n	4057fe <_free_r+0xa2>
  4058dc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4058e0:	d806      	bhi.n	4058f0 <_free_r+0x194>
  4058e2:	0bda      	lsrs	r2, r3, #15
  4058e4:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4058e8:	00ff      	lsls	r7, r7, #3
  4058ea:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4058ee:	e786      	b.n	4057fe <_free_r+0xa2>
  4058f0:	f240 5054 	movw	r0, #1364	; 0x554
  4058f4:	4282      	cmp	r2, r0
  4058f6:	d806      	bhi.n	405906 <_free_r+0x1aa>
  4058f8:	0c9a      	lsrs	r2, r3, #18
  4058fa:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4058fe:	00ff      	lsls	r7, r7, #3
  405900:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405904:	e77b      	b.n	4057fe <_free_r+0xa2>
  405906:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40590a:	257e      	movs	r5, #126	; 0x7e
  40590c:	e777      	b.n	4057fe <_free_r+0xa2>
  40590e:	f043 0101 	orr.w	r1, r3, #1
  405912:	6061      	str	r1, [r4, #4]
  405914:	6013      	str	r3, [r2, #0]
  405916:	e763      	b.n	4057e0 <_free_r+0x84>
  405918:	20400454 	.word	0x20400454
  40591c:	2040045c 	.word	0x2040045c
  405920:	20400860 	.word	0x20400860
  405924:	20400ca4 	.word	0x20400ca4

00405928 <__ascii_mbtowc>:
  405928:	b082      	sub	sp, #8
  40592a:	b149      	cbz	r1, 405940 <__ascii_mbtowc+0x18>
  40592c:	b15a      	cbz	r2, 405946 <__ascii_mbtowc+0x1e>
  40592e:	b16b      	cbz	r3, 40594c <__ascii_mbtowc+0x24>
  405930:	7813      	ldrb	r3, [r2, #0]
  405932:	600b      	str	r3, [r1, #0]
  405934:	7812      	ldrb	r2, [r2, #0]
  405936:	1c10      	adds	r0, r2, #0
  405938:	bf18      	it	ne
  40593a:	2001      	movne	r0, #1
  40593c:	b002      	add	sp, #8
  40593e:	4770      	bx	lr
  405940:	a901      	add	r1, sp, #4
  405942:	2a00      	cmp	r2, #0
  405944:	d1f3      	bne.n	40592e <__ascii_mbtowc+0x6>
  405946:	4610      	mov	r0, r2
  405948:	b002      	add	sp, #8
  40594a:	4770      	bx	lr
  40594c:	f06f 0001 	mvn.w	r0, #1
  405950:	e7f4      	b.n	40593c <__ascii_mbtowc+0x14>
  405952:	bf00      	nop

00405954 <memmove>:
  405954:	4288      	cmp	r0, r1
  405956:	b5f0      	push	{r4, r5, r6, r7, lr}
  405958:	d90d      	bls.n	405976 <memmove+0x22>
  40595a:	188b      	adds	r3, r1, r2
  40595c:	4298      	cmp	r0, r3
  40595e:	d20a      	bcs.n	405976 <memmove+0x22>
  405960:	1884      	adds	r4, r0, r2
  405962:	2a00      	cmp	r2, #0
  405964:	d051      	beq.n	405a0a <memmove+0xb6>
  405966:	4622      	mov	r2, r4
  405968:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40596c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405970:	4299      	cmp	r1, r3
  405972:	d1f9      	bne.n	405968 <memmove+0x14>
  405974:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405976:	2a0f      	cmp	r2, #15
  405978:	d948      	bls.n	405a0c <memmove+0xb8>
  40597a:	ea41 0300 	orr.w	r3, r1, r0
  40597e:	079b      	lsls	r3, r3, #30
  405980:	d146      	bne.n	405a10 <memmove+0xbc>
  405982:	f100 0410 	add.w	r4, r0, #16
  405986:	f101 0310 	add.w	r3, r1, #16
  40598a:	4615      	mov	r5, r2
  40598c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405990:	f844 6c10 	str.w	r6, [r4, #-16]
  405994:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405998:	f844 6c0c 	str.w	r6, [r4, #-12]
  40599c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4059a0:	f844 6c08 	str.w	r6, [r4, #-8]
  4059a4:	3d10      	subs	r5, #16
  4059a6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4059aa:	f844 6c04 	str.w	r6, [r4, #-4]
  4059ae:	2d0f      	cmp	r5, #15
  4059b0:	f103 0310 	add.w	r3, r3, #16
  4059b4:	f104 0410 	add.w	r4, r4, #16
  4059b8:	d8e8      	bhi.n	40598c <memmove+0x38>
  4059ba:	f1a2 0310 	sub.w	r3, r2, #16
  4059be:	f023 030f 	bic.w	r3, r3, #15
  4059c2:	f002 0e0f 	and.w	lr, r2, #15
  4059c6:	3310      	adds	r3, #16
  4059c8:	f1be 0f03 	cmp.w	lr, #3
  4059cc:	4419      	add	r1, r3
  4059ce:	4403      	add	r3, r0
  4059d0:	d921      	bls.n	405a16 <memmove+0xc2>
  4059d2:	1f1e      	subs	r6, r3, #4
  4059d4:	460d      	mov	r5, r1
  4059d6:	4674      	mov	r4, lr
  4059d8:	3c04      	subs	r4, #4
  4059da:	f855 7b04 	ldr.w	r7, [r5], #4
  4059de:	f846 7f04 	str.w	r7, [r6, #4]!
  4059e2:	2c03      	cmp	r4, #3
  4059e4:	d8f8      	bhi.n	4059d8 <memmove+0x84>
  4059e6:	f1ae 0404 	sub.w	r4, lr, #4
  4059ea:	f024 0403 	bic.w	r4, r4, #3
  4059ee:	3404      	adds	r4, #4
  4059f0:	4421      	add	r1, r4
  4059f2:	4423      	add	r3, r4
  4059f4:	f002 0203 	and.w	r2, r2, #3
  4059f8:	b162      	cbz	r2, 405a14 <memmove+0xc0>
  4059fa:	3b01      	subs	r3, #1
  4059fc:	440a      	add	r2, r1
  4059fe:	f811 4b01 	ldrb.w	r4, [r1], #1
  405a02:	f803 4f01 	strb.w	r4, [r3, #1]!
  405a06:	428a      	cmp	r2, r1
  405a08:	d1f9      	bne.n	4059fe <memmove+0xaa>
  405a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405a0c:	4603      	mov	r3, r0
  405a0e:	e7f3      	b.n	4059f8 <memmove+0xa4>
  405a10:	4603      	mov	r3, r0
  405a12:	e7f2      	b.n	4059fa <memmove+0xa6>
  405a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405a16:	4672      	mov	r2, lr
  405a18:	e7ee      	b.n	4059f8 <memmove+0xa4>
  405a1a:	bf00      	nop

00405a1c <_realloc_r>:
  405a1c:	2900      	cmp	r1, #0
  405a1e:	f000 8095 	beq.w	405b4c <_realloc_r+0x130>
  405a22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405a26:	460d      	mov	r5, r1
  405a28:	4616      	mov	r6, r2
  405a2a:	b083      	sub	sp, #12
  405a2c:	4680      	mov	r8, r0
  405a2e:	f106 070b 	add.w	r7, r6, #11
  405a32:	f7ff f99f 	bl	404d74 <__malloc_lock>
  405a36:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405a3a:	2f16      	cmp	r7, #22
  405a3c:	f02e 0403 	bic.w	r4, lr, #3
  405a40:	f1a5 0908 	sub.w	r9, r5, #8
  405a44:	d83c      	bhi.n	405ac0 <_realloc_r+0xa4>
  405a46:	2210      	movs	r2, #16
  405a48:	4617      	mov	r7, r2
  405a4a:	42be      	cmp	r6, r7
  405a4c:	d83d      	bhi.n	405aca <_realloc_r+0xae>
  405a4e:	4294      	cmp	r4, r2
  405a50:	da43      	bge.n	405ada <_realloc_r+0xbe>
  405a52:	4bc4      	ldr	r3, [pc, #784]	; (405d64 <_realloc_r+0x348>)
  405a54:	6899      	ldr	r1, [r3, #8]
  405a56:	eb09 0004 	add.w	r0, r9, r4
  405a5a:	4288      	cmp	r0, r1
  405a5c:	f000 80b4 	beq.w	405bc8 <_realloc_r+0x1ac>
  405a60:	6843      	ldr	r3, [r0, #4]
  405a62:	f023 0101 	bic.w	r1, r3, #1
  405a66:	4401      	add	r1, r0
  405a68:	6849      	ldr	r1, [r1, #4]
  405a6a:	07c9      	lsls	r1, r1, #31
  405a6c:	d54c      	bpl.n	405b08 <_realloc_r+0xec>
  405a6e:	f01e 0f01 	tst.w	lr, #1
  405a72:	f000 809b 	beq.w	405bac <_realloc_r+0x190>
  405a76:	4631      	mov	r1, r6
  405a78:	4640      	mov	r0, r8
  405a7a:	f7fe fddb 	bl	404634 <_malloc_r>
  405a7e:	4606      	mov	r6, r0
  405a80:	2800      	cmp	r0, #0
  405a82:	d03a      	beq.n	405afa <_realloc_r+0xde>
  405a84:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405a88:	f023 0301 	bic.w	r3, r3, #1
  405a8c:	444b      	add	r3, r9
  405a8e:	f1a0 0208 	sub.w	r2, r0, #8
  405a92:	429a      	cmp	r2, r3
  405a94:	f000 8121 	beq.w	405cda <_realloc_r+0x2be>
  405a98:	1f22      	subs	r2, r4, #4
  405a9a:	2a24      	cmp	r2, #36	; 0x24
  405a9c:	f200 8107 	bhi.w	405cae <_realloc_r+0x292>
  405aa0:	2a13      	cmp	r2, #19
  405aa2:	f200 80db 	bhi.w	405c5c <_realloc_r+0x240>
  405aa6:	4603      	mov	r3, r0
  405aa8:	462a      	mov	r2, r5
  405aaa:	6811      	ldr	r1, [r2, #0]
  405aac:	6019      	str	r1, [r3, #0]
  405aae:	6851      	ldr	r1, [r2, #4]
  405ab0:	6059      	str	r1, [r3, #4]
  405ab2:	6892      	ldr	r2, [r2, #8]
  405ab4:	609a      	str	r2, [r3, #8]
  405ab6:	4629      	mov	r1, r5
  405ab8:	4640      	mov	r0, r8
  405aba:	f7ff fe4f 	bl	40575c <_free_r>
  405abe:	e01c      	b.n	405afa <_realloc_r+0xde>
  405ac0:	f027 0707 	bic.w	r7, r7, #7
  405ac4:	2f00      	cmp	r7, #0
  405ac6:	463a      	mov	r2, r7
  405ac8:	dabf      	bge.n	405a4a <_realloc_r+0x2e>
  405aca:	2600      	movs	r6, #0
  405acc:	230c      	movs	r3, #12
  405ace:	4630      	mov	r0, r6
  405ad0:	f8c8 3000 	str.w	r3, [r8]
  405ad4:	b003      	add	sp, #12
  405ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ada:	462e      	mov	r6, r5
  405adc:	1be3      	subs	r3, r4, r7
  405ade:	2b0f      	cmp	r3, #15
  405ae0:	d81e      	bhi.n	405b20 <_realloc_r+0x104>
  405ae2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405ae6:	f003 0301 	and.w	r3, r3, #1
  405aea:	4323      	orrs	r3, r4
  405aec:	444c      	add	r4, r9
  405aee:	f8c9 3004 	str.w	r3, [r9, #4]
  405af2:	6863      	ldr	r3, [r4, #4]
  405af4:	f043 0301 	orr.w	r3, r3, #1
  405af8:	6063      	str	r3, [r4, #4]
  405afa:	4640      	mov	r0, r8
  405afc:	f7ff f940 	bl	404d80 <__malloc_unlock>
  405b00:	4630      	mov	r0, r6
  405b02:	b003      	add	sp, #12
  405b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b08:	f023 0303 	bic.w	r3, r3, #3
  405b0c:	18e1      	adds	r1, r4, r3
  405b0e:	4291      	cmp	r1, r2
  405b10:	db1f      	blt.n	405b52 <_realloc_r+0x136>
  405b12:	68c3      	ldr	r3, [r0, #12]
  405b14:	6882      	ldr	r2, [r0, #8]
  405b16:	462e      	mov	r6, r5
  405b18:	60d3      	str	r3, [r2, #12]
  405b1a:	460c      	mov	r4, r1
  405b1c:	609a      	str	r2, [r3, #8]
  405b1e:	e7dd      	b.n	405adc <_realloc_r+0xc0>
  405b20:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405b24:	eb09 0107 	add.w	r1, r9, r7
  405b28:	f002 0201 	and.w	r2, r2, #1
  405b2c:	444c      	add	r4, r9
  405b2e:	f043 0301 	orr.w	r3, r3, #1
  405b32:	4317      	orrs	r7, r2
  405b34:	f8c9 7004 	str.w	r7, [r9, #4]
  405b38:	604b      	str	r3, [r1, #4]
  405b3a:	6863      	ldr	r3, [r4, #4]
  405b3c:	f043 0301 	orr.w	r3, r3, #1
  405b40:	3108      	adds	r1, #8
  405b42:	6063      	str	r3, [r4, #4]
  405b44:	4640      	mov	r0, r8
  405b46:	f7ff fe09 	bl	40575c <_free_r>
  405b4a:	e7d6      	b.n	405afa <_realloc_r+0xde>
  405b4c:	4611      	mov	r1, r2
  405b4e:	f7fe bd71 	b.w	404634 <_malloc_r>
  405b52:	f01e 0f01 	tst.w	lr, #1
  405b56:	d18e      	bne.n	405a76 <_realloc_r+0x5a>
  405b58:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405b5c:	eba9 0a01 	sub.w	sl, r9, r1
  405b60:	f8da 1004 	ldr.w	r1, [sl, #4]
  405b64:	f021 0103 	bic.w	r1, r1, #3
  405b68:	440b      	add	r3, r1
  405b6a:	4423      	add	r3, r4
  405b6c:	4293      	cmp	r3, r2
  405b6e:	db25      	blt.n	405bbc <_realloc_r+0x1a0>
  405b70:	68c2      	ldr	r2, [r0, #12]
  405b72:	6881      	ldr	r1, [r0, #8]
  405b74:	4656      	mov	r6, sl
  405b76:	60ca      	str	r2, [r1, #12]
  405b78:	6091      	str	r1, [r2, #8]
  405b7a:	f8da 100c 	ldr.w	r1, [sl, #12]
  405b7e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405b82:	1f22      	subs	r2, r4, #4
  405b84:	2a24      	cmp	r2, #36	; 0x24
  405b86:	60c1      	str	r1, [r0, #12]
  405b88:	6088      	str	r0, [r1, #8]
  405b8a:	f200 8094 	bhi.w	405cb6 <_realloc_r+0x29a>
  405b8e:	2a13      	cmp	r2, #19
  405b90:	d96f      	bls.n	405c72 <_realloc_r+0x256>
  405b92:	6829      	ldr	r1, [r5, #0]
  405b94:	f8ca 1008 	str.w	r1, [sl, #8]
  405b98:	6869      	ldr	r1, [r5, #4]
  405b9a:	f8ca 100c 	str.w	r1, [sl, #12]
  405b9e:	2a1b      	cmp	r2, #27
  405ba0:	f200 80a2 	bhi.w	405ce8 <_realloc_r+0x2cc>
  405ba4:	3508      	adds	r5, #8
  405ba6:	f10a 0210 	add.w	r2, sl, #16
  405baa:	e063      	b.n	405c74 <_realloc_r+0x258>
  405bac:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405bb0:	eba9 0a03 	sub.w	sl, r9, r3
  405bb4:	f8da 1004 	ldr.w	r1, [sl, #4]
  405bb8:	f021 0103 	bic.w	r1, r1, #3
  405bbc:	1863      	adds	r3, r4, r1
  405bbe:	4293      	cmp	r3, r2
  405bc0:	f6ff af59 	blt.w	405a76 <_realloc_r+0x5a>
  405bc4:	4656      	mov	r6, sl
  405bc6:	e7d8      	b.n	405b7a <_realloc_r+0x15e>
  405bc8:	6841      	ldr	r1, [r0, #4]
  405bca:	f021 0b03 	bic.w	fp, r1, #3
  405bce:	44a3      	add	fp, r4
  405bd0:	f107 0010 	add.w	r0, r7, #16
  405bd4:	4583      	cmp	fp, r0
  405bd6:	da56      	bge.n	405c86 <_realloc_r+0x26a>
  405bd8:	f01e 0f01 	tst.w	lr, #1
  405bdc:	f47f af4b 	bne.w	405a76 <_realloc_r+0x5a>
  405be0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405be4:	eba9 0a01 	sub.w	sl, r9, r1
  405be8:	f8da 1004 	ldr.w	r1, [sl, #4]
  405bec:	f021 0103 	bic.w	r1, r1, #3
  405bf0:	448b      	add	fp, r1
  405bf2:	4558      	cmp	r0, fp
  405bf4:	dce2      	bgt.n	405bbc <_realloc_r+0x1a0>
  405bf6:	4656      	mov	r6, sl
  405bf8:	f8da 100c 	ldr.w	r1, [sl, #12]
  405bfc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405c00:	1f22      	subs	r2, r4, #4
  405c02:	2a24      	cmp	r2, #36	; 0x24
  405c04:	60c1      	str	r1, [r0, #12]
  405c06:	6088      	str	r0, [r1, #8]
  405c08:	f200 808f 	bhi.w	405d2a <_realloc_r+0x30e>
  405c0c:	2a13      	cmp	r2, #19
  405c0e:	f240 808a 	bls.w	405d26 <_realloc_r+0x30a>
  405c12:	6829      	ldr	r1, [r5, #0]
  405c14:	f8ca 1008 	str.w	r1, [sl, #8]
  405c18:	6869      	ldr	r1, [r5, #4]
  405c1a:	f8ca 100c 	str.w	r1, [sl, #12]
  405c1e:	2a1b      	cmp	r2, #27
  405c20:	f200 808a 	bhi.w	405d38 <_realloc_r+0x31c>
  405c24:	3508      	adds	r5, #8
  405c26:	f10a 0210 	add.w	r2, sl, #16
  405c2a:	6829      	ldr	r1, [r5, #0]
  405c2c:	6011      	str	r1, [r2, #0]
  405c2e:	6869      	ldr	r1, [r5, #4]
  405c30:	6051      	str	r1, [r2, #4]
  405c32:	68a9      	ldr	r1, [r5, #8]
  405c34:	6091      	str	r1, [r2, #8]
  405c36:	eb0a 0107 	add.w	r1, sl, r7
  405c3a:	ebab 0207 	sub.w	r2, fp, r7
  405c3e:	f042 0201 	orr.w	r2, r2, #1
  405c42:	6099      	str	r1, [r3, #8]
  405c44:	604a      	str	r2, [r1, #4]
  405c46:	f8da 3004 	ldr.w	r3, [sl, #4]
  405c4a:	f003 0301 	and.w	r3, r3, #1
  405c4e:	431f      	orrs	r7, r3
  405c50:	4640      	mov	r0, r8
  405c52:	f8ca 7004 	str.w	r7, [sl, #4]
  405c56:	f7ff f893 	bl	404d80 <__malloc_unlock>
  405c5a:	e751      	b.n	405b00 <_realloc_r+0xe4>
  405c5c:	682b      	ldr	r3, [r5, #0]
  405c5e:	6003      	str	r3, [r0, #0]
  405c60:	686b      	ldr	r3, [r5, #4]
  405c62:	6043      	str	r3, [r0, #4]
  405c64:	2a1b      	cmp	r2, #27
  405c66:	d82d      	bhi.n	405cc4 <_realloc_r+0x2a8>
  405c68:	f100 0308 	add.w	r3, r0, #8
  405c6c:	f105 0208 	add.w	r2, r5, #8
  405c70:	e71b      	b.n	405aaa <_realloc_r+0x8e>
  405c72:	4632      	mov	r2, r6
  405c74:	6829      	ldr	r1, [r5, #0]
  405c76:	6011      	str	r1, [r2, #0]
  405c78:	6869      	ldr	r1, [r5, #4]
  405c7a:	6051      	str	r1, [r2, #4]
  405c7c:	68a9      	ldr	r1, [r5, #8]
  405c7e:	6091      	str	r1, [r2, #8]
  405c80:	461c      	mov	r4, r3
  405c82:	46d1      	mov	r9, sl
  405c84:	e72a      	b.n	405adc <_realloc_r+0xc0>
  405c86:	eb09 0107 	add.w	r1, r9, r7
  405c8a:	ebab 0b07 	sub.w	fp, fp, r7
  405c8e:	f04b 0201 	orr.w	r2, fp, #1
  405c92:	6099      	str	r1, [r3, #8]
  405c94:	604a      	str	r2, [r1, #4]
  405c96:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405c9a:	f003 0301 	and.w	r3, r3, #1
  405c9e:	431f      	orrs	r7, r3
  405ca0:	4640      	mov	r0, r8
  405ca2:	f845 7c04 	str.w	r7, [r5, #-4]
  405ca6:	f7ff f86b 	bl	404d80 <__malloc_unlock>
  405caa:	462e      	mov	r6, r5
  405cac:	e728      	b.n	405b00 <_realloc_r+0xe4>
  405cae:	4629      	mov	r1, r5
  405cb0:	f7ff fe50 	bl	405954 <memmove>
  405cb4:	e6ff      	b.n	405ab6 <_realloc_r+0x9a>
  405cb6:	4629      	mov	r1, r5
  405cb8:	4630      	mov	r0, r6
  405cba:	461c      	mov	r4, r3
  405cbc:	46d1      	mov	r9, sl
  405cbe:	f7ff fe49 	bl	405954 <memmove>
  405cc2:	e70b      	b.n	405adc <_realloc_r+0xc0>
  405cc4:	68ab      	ldr	r3, [r5, #8]
  405cc6:	6083      	str	r3, [r0, #8]
  405cc8:	68eb      	ldr	r3, [r5, #12]
  405cca:	60c3      	str	r3, [r0, #12]
  405ccc:	2a24      	cmp	r2, #36	; 0x24
  405cce:	d017      	beq.n	405d00 <_realloc_r+0x2e4>
  405cd0:	f100 0310 	add.w	r3, r0, #16
  405cd4:	f105 0210 	add.w	r2, r5, #16
  405cd8:	e6e7      	b.n	405aaa <_realloc_r+0x8e>
  405cda:	f850 3c04 	ldr.w	r3, [r0, #-4]
  405cde:	f023 0303 	bic.w	r3, r3, #3
  405ce2:	441c      	add	r4, r3
  405ce4:	462e      	mov	r6, r5
  405ce6:	e6f9      	b.n	405adc <_realloc_r+0xc0>
  405ce8:	68a9      	ldr	r1, [r5, #8]
  405cea:	f8ca 1010 	str.w	r1, [sl, #16]
  405cee:	68e9      	ldr	r1, [r5, #12]
  405cf0:	f8ca 1014 	str.w	r1, [sl, #20]
  405cf4:	2a24      	cmp	r2, #36	; 0x24
  405cf6:	d00c      	beq.n	405d12 <_realloc_r+0x2f6>
  405cf8:	3510      	adds	r5, #16
  405cfa:	f10a 0218 	add.w	r2, sl, #24
  405cfe:	e7b9      	b.n	405c74 <_realloc_r+0x258>
  405d00:	692b      	ldr	r3, [r5, #16]
  405d02:	6103      	str	r3, [r0, #16]
  405d04:	696b      	ldr	r3, [r5, #20]
  405d06:	6143      	str	r3, [r0, #20]
  405d08:	f105 0218 	add.w	r2, r5, #24
  405d0c:	f100 0318 	add.w	r3, r0, #24
  405d10:	e6cb      	b.n	405aaa <_realloc_r+0x8e>
  405d12:	692a      	ldr	r2, [r5, #16]
  405d14:	f8ca 2018 	str.w	r2, [sl, #24]
  405d18:	696a      	ldr	r2, [r5, #20]
  405d1a:	f8ca 201c 	str.w	r2, [sl, #28]
  405d1e:	3518      	adds	r5, #24
  405d20:	f10a 0220 	add.w	r2, sl, #32
  405d24:	e7a6      	b.n	405c74 <_realloc_r+0x258>
  405d26:	4632      	mov	r2, r6
  405d28:	e77f      	b.n	405c2a <_realloc_r+0x20e>
  405d2a:	4629      	mov	r1, r5
  405d2c:	4630      	mov	r0, r6
  405d2e:	9301      	str	r3, [sp, #4]
  405d30:	f7ff fe10 	bl	405954 <memmove>
  405d34:	9b01      	ldr	r3, [sp, #4]
  405d36:	e77e      	b.n	405c36 <_realloc_r+0x21a>
  405d38:	68a9      	ldr	r1, [r5, #8]
  405d3a:	f8ca 1010 	str.w	r1, [sl, #16]
  405d3e:	68e9      	ldr	r1, [r5, #12]
  405d40:	f8ca 1014 	str.w	r1, [sl, #20]
  405d44:	2a24      	cmp	r2, #36	; 0x24
  405d46:	d003      	beq.n	405d50 <_realloc_r+0x334>
  405d48:	3510      	adds	r5, #16
  405d4a:	f10a 0218 	add.w	r2, sl, #24
  405d4e:	e76c      	b.n	405c2a <_realloc_r+0x20e>
  405d50:	692a      	ldr	r2, [r5, #16]
  405d52:	f8ca 2018 	str.w	r2, [sl, #24]
  405d56:	696a      	ldr	r2, [r5, #20]
  405d58:	f8ca 201c 	str.w	r2, [sl, #28]
  405d5c:	3518      	adds	r5, #24
  405d5e:	f10a 0220 	add.w	r2, sl, #32
  405d62:	e762      	b.n	405c2a <_realloc_r+0x20e>
  405d64:	20400454 	.word	0x20400454

00405d68 <__ascii_wctomb>:
  405d68:	b121      	cbz	r1, 405d74 <__ascii_wctomb+0xc>
  405d6a:	2aff      	cmp	r2, #255	; 0xff
  405d6c:	d804      	bhi.n	405d78 <__ascii_wctomb+0x10>
  405d6e:	700a      	strb	r2, [r1, #0]
  405d70:	2001      	movs	r0, #1
  405d72:	4770      	bx	lr
  405d74:	4608      	mov	r0, r1
  405d76:	4770      	bx	lr
  405d78:	238a      	movs	r3, #138	; 0x8a
  405d7a:	6003      	str	r3, [r0, #0]
  405d7c:	f04f 30ff 	mov.w	r0, #4294967295
  405d80:	4770      	bx	lr
  405d82:	bf00      	nop

00405d84 <__aeabi_drsub>:
  405d84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  405d88:	e002      	b.n	405d90 <__adddf3>
  405d8a:	bf00      	nop

00405d8c <__aeabi_dsub>:
  405d8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00405d90 <__adddf3>:
  405d90:	b530      	push	{r4, r5, lr}
  405d92:	ea4f 0441 	mov.w	r4, r1, lsl #1
  405d96:	ea4f 0543 	mov.w	r5, r3, lsl #1
  405d9a:	ea94 0f05 	teq	r4, r5
  405d9e:	bf08      	it	eq
  405da0:	ea90 0f02 	teqeq	r0, r2
  405da4:	bf1f      	itttt	ne
  405da6:	ea54 0c00 	orrsne.w	ip, r4, r0
  405daa:	ea55 0c02 	orrsne.w	ip, r5, r2
  405dae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  405db2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405db6:	f000 80e2 	beq.w	405f7e <__adddf3+0x1ee>
  405dba:	ea4f 5454 	mov.w	r4, r4, lsr #21
  405dbe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  405dc2:	bfb8      	it	lt
  405dc4:	426d      	neglt	r5, r5
  405dc6:	dd0c      	ble.n	405de2 <__adddf3+0x52>
  405dc8:	442c      	add	r4, r5
  405dca:	ea80 0202 	eor.w	r2, r0, r2
  405dce:	ea81 0303 	eor.w	r3, r1, r3
  405dd2:	ea82 0000 	eor.w	r0, r2, r0
  405dd6:	ea83 0101 	eor.w	r1, r3, r1
  405dda:	ea80 0202 	eor.w	r2, r0, r2
  405dde:	ea81 0303 	eor.w	r3, r1, r3
  405de2:	2d36      	cmp	r5, #54	; 0x36
  405de4:	bf88      	it	hi
  405de6:	bd30      	pophi	{r4, r5, pc}
  405de8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405dec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405df0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  405df4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  405df8:	d002      	beq.n	405e00 <__adddf3+0x70>
  405dfa:	4240      	negs	r0, r0
  405dfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405e00:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405e04:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405e08:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  405e0c:	d002      	beq.n	405e14 <__adddf3+0x84>
  405e0e:	4252      	negs	r2, r2
  405e10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405e14:	ea94 0f05 	teq	r4, r5
  405e18:	f000 80a7 	beq.w	405f6a <__adddf3+0x1da>
  405e1c:	f1a4 0401 	sub.w	r4, r4, #1
  405e20:	f1d5 0e20 	rsbs	lr, r5, #32
  405e24:	db0d      	blt.n	405e42 <__adddf3+0xb2>
  405e26:	fa02 fc0e 	lsl.w	ip, r2, lr
  405e2a:	fa22 f205 	lsr.w	r2, r2, r5
  405e2e:	1880      	adds	r0, r0, r2
  405e30:	f141 0100 	adc.w	r1, r1, #0
  405e34:	fa03 f20e 	lsl.w	r2, r3, lr
  405e38:	1880      	adds	r0, r0, r2
  405e3a:	fa43 f305 	asr.w	r3, r3, r5
  405e3e:	4159      	adcs	r1, r3
  405e40:	e00e      	b.n	405e60 <__adddf3+0xd0>
  405e42:	f1a5 0520 	sub.w	r5, r5, #32
  405e46:	f10e 0e20 	add.w	lr, lr, #32
  405e4a:	2a01      	cmp	r2, #1
  405e4c:	fa03 fc0e 	lsl.w	ip, r3, lr
  405e50:	bf28      	it	cs
  405e52:	f04c 0c02 	orrcs.w	ip, ip, #2
  405e56:	fa43 f305 	asr.w	r3, r3, r5
  405e5a:	18c0      	adds	r0, r0, r3
  405e5c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405e60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405e64:	d507      	bpl.n	405e76 <__adddf3+0xe6>
  405e66:	f04f 0e00 	mov.w	lr, #0
  405e6a:	f1dc 0c00 	rsbs	ip, ip, #0
  405e6e:	eb7e 0000 	sbcs.w	r0, lr, r0
  405e72:	eb6e 0101 	sbc.w	r1, lr, r1
  405e76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  405e7a:	d31b      	bcc.n	405eb4 <__adddf3+0x124>
  405e7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405e80:	d30c      	bcc.n	405e9c <__adddf3+0x10c>
  405e82:	0849      	lsrs	r1, r1, #1
  405e84:	ea5f 0030 	movs.w	r0, r0, rrx
  405e88:	ea4f 0c3c 	mov.w	ip, ip, rrx
  405e8c:	f104 0401 	add.w	r4, r4, #1
  405e90:	ea4f 5244 	mov.w	r2, r4, lsl #21
  405e94:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  405e98:	f080 809a 	bcs.w	405fd0 <__adddf3+0x240>
  405e9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405ea0:	bf08      	it	eq
  405ea2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405ea6:	f150 0000 	adcs.w	r0, r0, #0
  405eaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405eae:	ea41 0105 	orr.w	r1, r1, r5
  405eb2:	bd30      	pop	{r4, r5, pc}
  405eb4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  405eb8:	4140      	adcs	r0, r0
  405eba:	eb41 0101 	adc.w	r1, r1, r1
  405ebe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405ec2:	f1a4 0401 	sub.w	r4, r4, #1
  405ec6:	d1e9      	bne.n	405e9c <__adddf3+0x10c>
  405ec8:	f091 0f00 	teq	r1, #0
  405ecc:	bf04      	itt	eq
  405ece:	4601      	moveq	r1, r0
  405ed0:	2000      	moveq	r0, #0
  405ed2:	fab1 f381 	clz	r3, r1
  405ed6:	bf08      	it	eq
  405ed8:	3320      	addeq	r3, #32
  405eda:	f1a3 030b 	sub.w	r3, r3, #11
  405ede:	f1b3 0220 	subs.w	r2, r3, #32
  405ee2:	da0c      	bge.n	405efe <__adddf3+0x16e>
  405ee4:	320c      	adds	r2, #12
  405ee6:	dd08      	ble.n	405efa <__adddf3+0x16a>
  405ee8:	f102 0c14 	add.w	ip, r2, #20
  405eec:	f1c2 020c 	rsb	r2, r2, #12
  405ef0:	fa01 f00c 	lsl.w	r0, r1, ip
  405ef4:	fa21 f102 	lsr.w	r1, r1, r2
  405ef8:	e00c      	b.n	405f14 <__adddf3+0x184>
  405efa:	f102 0214 	add.w	r2, r2, #20
  405efe:	bfd8      	it	le
  405f00:	f1c2 0c20 	rsble	ip, r2, #32
  405f04:	fa01 f102 	lsl.w	r1, r1, r2
  405f08:	fa20 fc0c 	lsr.w	ip, r0, ip
  405f0c:	bfdc      	itt	le
  405f0e:	ea41 010c 	orrle.w	r1, r1, ip
  405f12:	4090      	lslle	r0, r2
  405f14:	1ae4      	subs	r4, r4, r3
  405f16:	bfa2      	ittt	ge
  405f18:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  405f1c:	4329      	orrge	r1, r5
  405f1e:	bd30      	popge	{r4, r5, pc}
  405f20:	ea6f 0404 	mvn.w	r4, r4
  405f24:	3c1f      	subs	r4, #31
  405f26:	da1c      	bge.n	405f62 <__adddf3+0x1d2>
  405f28:	340c      	adds	r4, #12
  405f2a:	dc0e      	bgt.n	405f4a <__adddf3+0x1ba>
  405f2c:	f104 0414 	add.w	r4, r4, #20
  405f30:	f1c4 0220 	rsb	r2, r4, #32
  405f34:	fa20 f004 	lsr.w	r0, r0, r4
  405f38:	fa01 f302 	lsl.w	r3, r1, r2
  405f3c:	ea40 0003 	orr.w	r0, r0, r3
  405f40:	fa21 f304 	lsr.w	r3, r1, r4
  405f44:	ea45 0103 	orr.w	r1, r5, r3
  405f48:	bd30      	pop	{r4, r5, pc}
  405f4a:	f1c4 040c 	rsb	r4, r4, #12
  405f4e:	f1c4 0220 	rsb	r2, r4, #32
  405f52:	fa20 f002 	lsr.w	r0, r0, r2
  405f56:	fa01 f304 	lsl.w	r3, r1, r4
  405f5a:	ea40 0003 	orr.w	r0, r0, r3
  405f5e:	4629      	mov	r1, r5
  405f60:	bd30      	pop	{r4, r5, pc}
  405f62:	fa21 f004 	lsr.w	r0, r1, r4
  405f66:	4629      	mov	r1, r5
  405f68:	bd30      	pop	{r4, r5, pc}
  405f6a:	f094 0f00 	teq	r4, #0
  405f6e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  405f72:	bf06      	itte	eq
  405f74:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405f78:	3401      	addeq	r4, #1
  405f7a:	3d01      	subne	r5, #1
  405f7c:	e74e      	b.n	405e1c <__adddf3+0x8c>
  405f7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405f82:	bf18      	it	ne
  405f84:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405f88:	d029      	beq.n	405fde <__adddf3+0x24e>
  405f8a:	ea94 0f05 	teq	r4, r5
  405f8e:	bf08      	it	eq
  405f90:	ea90 0f02 	teqeq	r0, r2
  405f94:	d005      	beq.n	405fa2 <__adddf3+0x212>
  405f96:	ea54 0c00 	orrs.w	ip, r4, r0
  405f9a:	bf04      	itt	eq
  405f9c:	4619      	moveq	r1, r3
  405f9e:	4610      	moveq	r0, r2
  405fa0:	bd30      	pop	{r4, r5, pc}
  405fa2:	ea91 0f03 	teq	r1, r3
  405fa6:	bf1e      	ittt	ne
  405fa8:	2100      	movne	r1, #0
  405faa:	2000      	movne	r0, #0
  405fac:	bd30      	popne	{r4, r5, pc}
  405fae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  405fb2:	d105      	bne.n	405fc0 <__adddf3+0x230>
  405fb4:	0040      	lsls	r0, r0, #1
  405fb6:	4149      	adcs	r1, r1
  405fb8:	bf28      	it	cs
  405fba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  405fbe:	bd30      	pop	{r4, r5, pc}
  405fc0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  405fc4:	bf3c      	itt	cc
  405fc6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  405fca:	bd30      	popcc	{r4, r5, pc}
  405fcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405fd0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  405fd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405fd8:	f04f 0000 	mov.w	r0, #0
  405fdc:	bd30      	pop	{r4, r5, pc}
  405fde:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405fe2:	bf1a      	itte	ne
  405fe4:	4619      	movne	r1, r3
  405fe6:	4610      	movne	r0, r2
  405fe8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  405fec:	bf1c      	itt	ne
  405fee:	460b      	movne	r3, r1
  405ff0:	4602      	movne	r2, r0
  405ff2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405ff6:	bf06      	itte	eq
  405ff8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  405ffc:	ea91 0f03 	teqeq	r1, r3
  406000:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  406004:	bd30      	pop	{r4, r5, pc}
  406006:	bf00      	nop

00406008 <__aeabi_ui2d>:
  406008:	f090 0f00 	teq	r0, #0
  40600c:	bf04      	itt	eq
  40600e:	2100      	moveq	r1, #0
  406010:	4770      	bxeq	lr
  406012:	b530      	push	{r4, r5, lr}
  406014:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406018:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40601c:	f04f 0500 	mov.w	r5, #0
  406020:	f04f 0100 	mov.w	r1, #0
  406024:	e750      	b.n	405ec8 <__adddf3+0x138>
  406026:	bf00      	nop

00406028 <__aeabi_i2d>:
  406028:	f090 0f00 	teq	r0, #0
  40602c:	bf04      	itt	eq
  40602e:	2100      	moveq	r1, #0
  406030:	4770      	bxeq	lr
  406032:	b530      	push	{r4, r5, lr}
  406034:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406038:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40603c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  406040:	bf48      	it	mi
  406042:	4240      	negmi	r0, r0
  406044:	f04f 0100 	mov.w	r1, #0
  406048:	e73e      	b.n	405ec8 <__adddf3+0x138>
  40604a:	bf00      	nop

0040604c <__aeabi_f2d>:
  40604c:	0042      	lsls	r2, r0, #1
  40604e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  406052:	ea4f 0131 	mov.w	r1, r1, rrx
  406056:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40605a:	bf1f      	itttt	ne
  40605c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  406060:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  406064:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  406068:	4770      	bxne	lr
  40606a:	f092 0f00 	teq	r2, #0
  40606e:	bf14      	ite	ne
  406070:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  406074:	4770      	bxeq	lr
  406076:	b530      	push	{r4, r5, lr}
  406078:	f44f 7460 	mov.w	r4, #896	; 0x380
  40607c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406080:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406084:	e720      	b.n	405ec8 <__adddf3+0x138>
  406086:	bf00      	nop

00406088 <__aeabi_ul2d>:
  406088:	ea50 0201 	orrs.w	r2, r0, r1
  40608c:	bf08      	it	eq
  40608e:	4770      	bxeq	lr
  406090:	b530      	push	{r4, r5, lr}
  406092:	f04f 0500 	mov.w	r5, #0
  406096:	e00a      	b.n	4060ae <__aeabi_l2d+0x16>

00406098 <__aeabi_l2d>:
  406098:	ea50 0201 	orrs.w	r2, r0, r1
  40609c:	bf08      	it	eq
  40609e:	4770      	bxeq	lr
  4060a0:	b530      	push	{r4, r5, lr}
  4060a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4060a6:	d502      	bpl.n	4060ae <__aeabi_l2d+0x16>
  4060a8:	4240      	negs	r0, r0
  4060aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4060ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4060b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4060b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4060ba:	f43f aedc 	beq.w	405e76 <__adddf3+0xe6>
  4060be:	f04f 0203 	mov.w	r2, #3
  4060c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4060c6:	bf18      	it	ne
  4060c8:	3203      	addne	r2, #3
  4060ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4060ce:	bf18      	it	ne
  4060d0:	3203      	addne	r2, #3
  4060d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4060d6:	f1c2 0320 	rsb	r3, r2, #32
  4060da:	fa00 fc03 	lsl.w	ip, r0, r3
  4060de:	fa20 f002 	lsr.w	r0, r0, r2
  4060e2:	fa01 fe03 	lsl.w	lr, r1, r3
  4060e6:	ea40 000e 	orr.w	r0, r0, lr
  4060ea:	fa21 f102 	lsr.w	r1, r1, r2
  4060ee:	4414      	add	r4, r2
  4060f0:	e6c1      	b.n	405e76 <__adddf3+0xe6>
  4060f2:	bf00      	nop

004060f4 <__aeabi_dmul>:
  4060f4:	b570      	push	{r4, r5, r6, lr}
  4060f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4060fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4060fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  406102:	bf1d      	ittte	ne
  406104:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  406108:	ea94 0f0c 	teqne	r4, ip
  40610c:	ea95 0f0c 	teqne	r5, ip
  406110:	f000 f8de 	bleq	4062d0 <__aeabi_dmul+0x1dc>
  406114:	442c      	add	r4, r5
  406116:	ea81 0603 	eor.w	r6, r1, r3
  40611a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40611e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  406122:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  406126:	bf18      	it	ne
  406128:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40612c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406130:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  406134:	d038      	beq.n	4061a8 <__aeabi_dmul+0xb4>
  406136:	fba0 ce02 	umull	ip, lr, r0, r2
  40613a:	f04f 0500 	mov.w	r5, #0
  40613e:	fbe1 e502 	umlal	lr, r5, r1, r2
  406142:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  406146:	fbe0 e503 	umlal	lr, r5, r0, r3
  40614a:	f04f 0600 	mov.w	r6, #0
  40614e:	fbe1 5603 	umlal	r5, r6, r1, r3
  406152:	f09c 0f00 	teq	ip, #0
  406156:	bf18      	it	ne
  406158:	f04e 0e01 	orrne.w	lr, lr, #1
  40615c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  406160:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  406164:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  406168:	d204      	bcs.n	406174 <__aeabi_dmul+0x80>
  40616a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40616e:	416d      	adcs	r5, r5
  406170:	eb46 0606 	adc.w	r6, r6, r6
  406174:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  406178:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40617c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  406180:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  406184:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  406188:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40618c:	bf88      	it	hi
  40618e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  406192:	d81e      	bhi.n	4061d2 <__aeabi_dmul+0xde>
  406194:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  406198:	bf08      	it	eq
  40619a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40619e:	f150 0000 	adcs.w	r0, r0, #0
  4061a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4061a6:	bd70      	pop	{r4, r5, r6, pc}
  4061a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4061ac:	ea46 0101 	orr.w	r1, r6, r1
  4061b0:	ea40 0002 	orr.w	r0, r0, r2
  4061b4:	ea81 0103 	eor.w	r1, r1, r3
  4061b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4061bc:	bfc2      	ittt	gt
  4061be:	ebd4 050c 	rsbsgt	r5, r4, ip
  4061c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4061c6:	bd70      	popgt	{r4, r5, r6, pc}
  4061c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4061cc:	f04f 0e00 	mov.w	lr, #0
  4061d0:	3c01      	subs	r4, #1
  4061d2:	f300 80ab 	bgt.w	40632c <__aeabi_dmul+0x238>
  4061d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4061da:	bfde      	ittt	le
  4061dc:	2000      	movle	r0, #0
  4061de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4061e2:	bd70      	pople	{r4, r5, r6, pc}
  4061e4:	f1c4 0400 	rsb	r4, r4, #0
  4061e8:	3c20      	subs	r4, #32
  4061ea:	da35      	bge.n	406258 <__aeabi_dmul+0x164>
  4061ec:	340c      	adds	r4, #12
  4061ee:	dc1b      	bgt.n	406228 <__aeabi_dmul+0x134>
  4061f0:	f104 0414 	add.w	r4, r4, #20
  4061f4:	f1c4 0520 	rsb	r5, r4, #32
  4061f8:	fa00 f305 	lsl.w	r3, r0, r5
  4061fc:	fa20 f004 	lsr.w	r0, r0, r4
  406200:	fa01 f205 	lsl.w	r2, r1, r5
  406204:	ea40 0002 	orr.w	r0, r0, r2
  406208:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40620c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406210:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406214:	fa21 f604 	lsr.w	r6, r1, r4
  406218:	eb42 0106 	adc.w	r1, r2, r6
  40621c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406220:	bf08      	it	eq
  406222:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406226:	bd70      	pop	{r4, r5, r6, pc}
  406228:	f1c4 040c 	rsb	r4, r4, #12
  40622c:	f1c4 0520 	rsb	r5, r4, #32
  406230:	fa00 f304 	lsl.w	r3, r0, r4
  406234:	fa20 f005 	lsr.w	r0, r0, r5
  406238:	fa01 f204 	lsl.w	r2, r1, r4
  40623c:	ea40 0002 	orr.w	r0, r0, r2
  406240:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406244:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406248:	f141 0100 	adc.w	r1, r1, #0
  40624c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406250:	bf08      	it	eq
  406252:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406256:	bd70      	pop	{r4, r5, r6, pc}
  406258:	f1c4 0520 	rsb	r5, r4, #32
  40625c:	fa00 f205 	lsl.w	r2, r0, r5
  406260:	ea4e 0e02 	orr.w	lr, lr, r2
  406264:	fa20 f304 	lsr.w	r3, r0, r4
  406268:	fa01 f205 	lsl.w	r2, r1, r5
  40626c:	ea43 0302 	orr.w	r3, r3, r2
  406270:	fa21 f004 	lsr.w	r0, r1, r4
  406274:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406278:	fa21 f204 	lsr.w	r2, r1, r4
  40627c:	ea20 0002 	bic.w	r0, r0, r2
  406280:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  406284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406288:	bf08      	it	eq
  40628a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40628e:	bd70      	pop	{r4, r5, r6, pc}
  406290:	f094 0f00 	teq	r4, #0
  406294:	d10f      	bne.n	4062b6 <__aeabi_dmul+0x1c2>
  406296:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40629a:	0040      	lsls	r0, r0, #1
  40629c:	eb41 0101 	adc.w	r1, r1, r1
  4062a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4062a4:	bf08      	it	eq
  4062a6:	3c01      	subeq	r4, #1
  4062a8:	d0f7      	beq.n	40629a <__aeabi_dmul+0x1a6>
  4062aa:	ea41 0106 	orr.w	r1, r1, r6
  4062ae:	f095 0f00 	teq	r5, #0
  4062b2:	bf18      	it	ne
  4062b4:	4770      	bxne	lr
  4062b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4062ba:	0052      	lsls	r2, r2, #1
  4062bc:	eb43 0303 	adc.w	r3, r3, r3
  4062c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4062c4:	bf08      	it	eq
  4062c6:	3d01      	subeq	r5, #1
  4062c8:	d0f7      	beq.n	4062ba <__aeabi_dmul+0x1c6>
  4062ca:	ea43 0306 	orr.w	r3, r3, r6
  4062ce:	4770      	bx	lr
  4062d0:	ea94 0f0c 	teq	r4, ip
  4062d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4062d8:	bf18      	it	ne
  4062da:	ea95 0f0c 	teqne	r5, ip
  4062de:	d00c      	beq.n	4062fa <__aeabi_dmul+0x206>
  4062e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4062e4:	bf18      	it	ne
  4062e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4062ea:	d1d1      	bne.n	406290 <__aeabi_dmul+0x19c>
  4062ec:	ea81 0103 	eor.w	r1, r1, r3
  4062f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4062f4:	f04f 0000 	mov.w	r0, #0
  4062f8:	bd70      	pop	{r4, r5, r6, pc}
  4062fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4062fe:	bf06      	itte	eq
  406300:	4610      	moveq	r0, r2
  406302:	4619      	moveq	r1, r3
  406304:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406308:	d019      	beq.n	40633e <__aeabi_dmul+0x24a>
  40630a:	ea94 0f0c 	teq	r4, ip
  40630e:	d102      	bne.n	406316 <__aeabi_dmul+0x222>
  406310:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  406314:	d113      	bne.n	40633e <__aeabi_dmul+0x24a>
  406316:	ea95 0f0c 	teq	r5, ip
  40631a:	d105      	bne.n	406328 <__aeabi_dmul+0x234>
  40631c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  406320:	bf1c      	itt	ne
  406322:	4610      	movne	r0, r2
  406324:	4619      	movne	r1, r3
  406326:	d10a      	bne.n	40633e <__aeabi_dmul+0x24a>
  406328:	ea81 0103 	eor.w	r1, r1, r3
  40632c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406330:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  406334:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406338:	f04f 0000 	mov.w	r0, #0
  40633c:	bd70      	pop	{r4, r5, r6, pc}
  40633e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  406342:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  406346:	bd70      	pop	{r4, r5, r6, pc}

00406348 <__aeabi_ddiv>:
  406348:	b570      	push	{r4, r5, r6, lr}
  40634a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40634e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  406352:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  406356:	bf1d      	ittte	ne
  406358:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40635c:	ea94 0f0c 	teqne	r4, ip
  406360:	ea95 0f0c 	teqne	r5, ip
  406364:	f000 f8a7 	bleq	4064b6 <__aeabi_ddiv+0x16e>
  406368:	eba4 0405 	sub.w	r4, r4, r5
  40636c:	ea81 0e03 	eor.w	lr, r1, r3
  406370:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  406374:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406378:	f000 8088 	beq.w	40648c <__aeabi_ddiv+0x144>
  40637c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406380:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  406384:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  406388:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40638c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  406390:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  406394:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  406398:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40639c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4063a0:	429d      	cmp	r5, r3
  4063a2:	bf08      	it	eq
  4063a4:	4296      	cmpeq	r6, r2
  4063a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4063aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4063ae:	d202      	bcs.n	4063b6 <__aeabi_ddiv+0x6e>
  4063b0:	085b      	lsrs	r3, r3, #1
  4063b2:	ea4f 0232 	mov.w	r2, r2, rrx
  4063b6:	1ab6      	subs	r6, r6, r2
  4063b8:	eb65 0503 	sbc.w	r5, r5, r3
  4063bc:	085b      	lsrs	r3, r3, #1
  4063be:	ea4f 0232 	mov.w	r2, r2, rrx
  4063c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4063c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4063ca:	ebb6 0e02 	subs.w	lr, r6, r2
  4063ce:	eb75 0e03 	sbcs.w	lr, r5, r3
  4063d2:	bf22      	ittt	cs
  4063d4:	1ab6      	subcs	r6, r6, r2
  4063d6:	4675      	movcs	r5, lr
  4063d8:	ea40 000c 	orrcs.w	r0, r0, ip
  4063dc:	085b      	lsrs	r3, r3, #1
  4063de:	ea4f 0232 	mov.w	r2, r2, rrx
  4063e2:	ebb6 0e02 	subs.w	lr, r6, r2
  4063e6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4063ea:	bf22      	ittt	cs
  4063ec:	1ab6      	subcs	r6, r6, r2
  4063ee:	4675      	movcs	r5, lr
  4063f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4063f4:	085b      	lsrs	r3, r3, #1
  4063f6:	ea4f 0232 	mov.w	r2, r2, rrx
  4063fa:	ebb6 0e02 	subs.w	lr, r6, r2
  4063fe:	eb75 0e03 	sbcs.w	lr, r5, r3
  406402:	bf22      	ittt	cs
  406404:	1ab6      	subcs	r6, r6, r2
  406406:	4675      	movcs	r5, lr
  406408:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40640c:	085b      	lsrs	r3, r3, #1
  40640e:	ea4f 0232 	mov.w	r2, r2, rrx
  406412:	ebb6 0e02 	subs.w	lr, r6, r2
  406416:	eb75 0e03 	sbcs.w	lr, r5, r3
  40641a:	bf22      	ittt	cs
  40641c:	1ab6      	subcs	r6, r6, r2
  40641e:	4675      	movcs	r5, lr
  406420:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  406424:	ea55 0e06 	orrs.w	lr, r5, r6
  406428:	d018      	beq.n	40645c <__aeabi_ddiv+0x114>
  40642a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40642e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  406432:	ea4f 1606 	mov.w	r6, r6, lsl #4
  406436:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40643a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40643e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  406442:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  406446:	d1c0      	bne.n	4063ca <__aeabi_ddiv+0x82>
  406448:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40644c:	d10b      	bne.n	406466 <__aeabi_ddiv+0x11e>
  40644e:	ea41 0100 	orr.w	r1, r1, r0
  406452:	f04f 0000 	mov.w	r0, #0
  406456:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40645a:	e7b6      	b.n	4063ca <__aeabi_ddiv+0x82>
  40645c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406460:	bf04      	itt	eq
  406462:	4301      	orreq	r1, r0
  406464:	2000      	moveq	r0, #0
  406466:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40646a:	bf88      	it	hi
  40646c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  406470:	f63f aeaf 	bhi.w	4061d2 <__aeabi_dmul+0xde>
  406474:	ebb5 0c03 	subs.w	ip, r5, r3
  406478:	bf04      	itt	eq
  40647a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40647e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406482:	f150 0000 	adcs.w	r0, r0, #0
  406486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40648a:	bd70      	pop	{r4, r5, r6, pc}
  40648c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  406490:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  406494:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  406498:	bfc2      	ittt	gt
  40649a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40649e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4064a2:	bd70      	popgt	{r4, r5, r6, pc}
  4064a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4064a8:	f04f 0e00 	mov.w	lr, #0
  4064ac:	3c01      	subs	r4, #1
  4064ae:	e690      	b.n	4061d2 <__aeabi_dmul+0xde>
  4064b0:	ea45 0e06 	orr.w	lr, r5, r6
  4064b4:	e68d      	b.n	4061d2 <__aeabi_dmul+0xde>
  4064b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4064ba:	ea94 0f0c 	teq	r4, ip
  4064be:	bf08      	it	eq
  4064c0:	ea95 0f0c 	teqeq	r5, ip
  4064c4:	f43f af3b 	beq.w	40633e <__aeabi_dmul+0x24a>
  4064c8:	ea94 0f0c 	teq	r4, ip
  4064cc:	d10a      	bne.n	4064e4 <__aeabi_ddiv+0x19c>
  4064ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4064d2:	f47f af34 	bne.w	40633e <__aeabi_dmul+0x24a>
  4064d6:	ea95 0f0c 	teq	r5, ip
  4064da:	f47f af25 	bne.w	406328 <__aeabi_dmul+0x234>
  4064de:	4610      	mov	r0, r2
  4064e0:	4619      	mov	r1, r3
  4064e2:	e72c      	b.n	40633e <__aeabi_dmul+0x24a>
  4064e4:	ea95 0f0c 	teq	r5, ip
  4064e8:	d106      	bne.n	4064f8 <__aeabi_ddiv+0x1b0>
  4064ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4064ee:	f43f aefd 	beq.w	4062ec <__aeabi_dmul+0x1f8>
  4064f2:	4610      	mov	r0, r2
  4064f4:	4619      	mov	r1, r3
  4064f6:	e722      	b.n	40633e <__aeabi_dmul+0x24a>
  4064f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4064fc:	bf18      	it	ne
  4064fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406502:	f47f aec5 	bne.w	406290 <__aeabi_dmul+0x19c>
  406506:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40650a:	f47f af0d 	bne.w	406328 <__aeabi_dmul+0x234>
  40650e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  406512:	f47f aeeb 	bne.w	4062ec <__aeabi_dmul+0x1f8>
  406516:	e712      	b.n	40633e <__aeabi_dmul+0x24a>

00406518 <__gedf2>:
  406518:	f04f 3cff 	mov.w	ip, #4294967295
  40651c:	e006      	b.n	40652c <__cmpdf2+0x4>
  40651e:	bf00      	nop

00406520 <__ledf2>:
  406520:	f04f 0c01 	mov.w	ip, #1
  406524:	e002      	b.n	40652c <__cmpdf2+0x4>
  406526:	bf00      	nop

00406528 <__cmpdf2>:
  406528:	f04f 0c01 	mov.w	ip, #1
  40652c:	f84d cd04 	str.w	ip, [sp, #-4]!
  406530:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406534:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406538:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40653c:	bf18      	it	ne
  40653e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  406542:	d01b      	beq.n	40657c <__cmpdf2+0x54>
  406544:	b001      	add	sp, #4
  406546:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40654a:	bf0c      	ite	eq
  40654c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  406550:	ea91 0f03 	teqne	r1, r3
  406554:	bf02      	ittt	eq
  406556:	ea90 0f02 	teqeq	r0, r2
  40655a:	2000      	moveq	r0, #0
  40655c:	4770      	bxeq	lr
  40655e:	f110 0f00 	cmn.w	r0, #0
  406562:	ea91 0f03 	teq	r1, r3
  406566:	bf58      	it	pl
  406568:	4299      	cmppl	r1, r3
  40656a:	bf08      	it	eq
  40656c:	4290      	cmpeq	r0, r2
  40656e:	bf2c      	ite	cs
  406570:	17d8      	asrcs	r0, r3, #31
  406572:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  406576:	f040 0001 	orr.w	r0, r0, #1
  40657a:	4770      	bx	lr
  40657c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406584:	d102      	bne.n	40658c <__cmpdf2+0x64>
  406586:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40658a:	d107      	bne.n	40659c <__cmpdf2+0x74>
  40658c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406590:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406594:	d1d6      	bne.n	406544 <__cmpdf2+0x1c>
  406596:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40659a:	d0d3      	beq.n	406544 <__cmpdf2+0x1c>
  40659c:	f85d 0b04 	ldr.w	r0, [sp], #4
  4065a0:	4770      	bx	lr
  4065a2:	bf00      	nop

004065a4 <__aeabi_cdrcmple>:
  4065a4:	4684      	mov	ip, r0
  4065a6:	4610      	mov	r0, r2
  4065a8:	4662      	mov	r2, ip
  4065aa:	468c      	mov	ip, r1
  4065ac:	4619      	mov	r1, r3
  4065ae:	4663      	mov	r3, ip
  4065b0:	e000      	b.n	4065b4 <__aeabi_cdcmpeq>
  4065b2:	bf00      	nop

004065b4 <__aeabi_cdcmpeq>:
  4065b4:	b501      	push	{r0, lr}
  4065b6:	f7ff ffb7 	bl	406528 <__cmpdf2>
  4065ba:	2800      	cmp	r0, #0
  4065bc:	bf48      	it	mi
  4065be:	f110 0f00 	cmnmi.w	r0, #0
  4065c2:	bd01      	pop	{r0, pc}

004065c4 <__aeabi_dcmpeq>:
  4065c4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4065c8:	f7ff fff4 	bl	4065b4 <__aeabi_cdcmpeq>
  4065cc:	bf0c      	ite	eq
  4065ce:	2001      	moveq	r0, #1
  4065d0:	2000      	movne	r0, #0
  4065d2:	f85d fb08 	ldr.w	pc, [sp], #8
  4065d6:	bf00      	nop

004065d8 <__aeabi_dcmplt>:
  4065d8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4065dc:	f7ff ffea 	bl	4065b4 <__aeabi_cdcmpeq>
  4065e0:	bf34      	ite	cc
  4065e2:	2001      	movcc	r0, #1
  4065e4:	2000      	movcs	r0, #0
  4065e6:	f85d fb08 	ldr.w	pc, [sp], #8
  4065ea:	bf00      	nop

004065ec <__aeabi_dcmple>:
  4065ec:	f84d ed08 	str.w	lr, [sp, #-8]!
  4065f0:	f7ff ffe0 	bl	4065b4 <__aeabi_cdcmpeq>
  4065f4:	bf94      	ite	ls
  4065f6:	2001      	movls	r0, #1
  4065f8:	2000      	movhi	r0, #0
  4065fa:	f85d fb08 	ldr.w	pc, [sp], #8
  4065fe:	bf00      	nop

00406600 <__aeabi_dcmpge>:
  406600:	f84d ed08 	str.w	lr, [sp, #-8]!
  406604:	f7ff ffce 	bl	4065a4 <__aeabi_cdrcmple>
  406608:	bf94      	ite	ls
  40660a:	2001      	movls	r0, #1
  40660c:	2000      	movhi	r0, #0
  40660e:	f85d fb08 	ldr.w	pc, [sp], #8
  406612:	bf00      	nop

00406614 <__aeabi_dcmpgt>:
  406614:	f84d ed08 	str.w	lr, [sp, #-8]!
  406618:	f7ff ffc4 	bl	4065a4 <__aeabi_cdrcmple>
  40661c:	bf34      	ite	cc
  40661e:	2001      	movcc	r0, #1
  406620:	2000      	movcs	r0, #0
  406622:	f85d fb08 	ldr.w	pc, [sp], #8
  406626:	bf00      	nop

00406628 <__aeabi_dcmpun>:
  406628:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40662c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406630:	d102      	bne.n	406638 <__aeabi_dcmpun+0x10>
  406632:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  406636:	d10a      	bne.n	40664e <__aeabi_dcmpun+0x26>
  406638:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40663c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406640:	d102      	bne.n	406648 <__aeabi_dcmpun+0x20>
  406642:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406646:	d102      	bne.n	40664e <__aeabi_dcmpun+0x26>
  406648:	f04f 0000 	mov.w	r0, #0
  40664c:	4770      	bx	lr
  40664e:	f04f 0001 	mov.w	r0, #1
  406652:	4770      	bx	lr

00406654 <__aeabi_d2iz>:
  406654:	ea4f 0241 	mov.w	r2, r1, lsl #1
  406658:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40665c:	d215      	bcs.n	40668a <__aeabi_d2iz+0x36>
  40665e:	d511      	bpl.n	406684 <__aeabi_d2iz+0x30>
  406660:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  406664:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  406668:	d912      	bls.n	406690 <__aeabi_d2iz+0x3c>
  40666a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40666e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  406672:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  406676:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40667a:	fa23 f002 	lsr.w	r0, r3, r2
  40667e:	bf18      	it	ne
  406680:	4240      	negne	r0, r0
  406682:	4770      	bx	lr
  406684:	f04f 0000 	mov.w	r0, #0
  406688:	4770      	bx	lr
  40668a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40668e:	d105      	bne.n	40669c <__aeabi_d2iz+0x48>
  406690:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  406694:	bf08      	it	eq
  406696:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40669a:	4770      	bx	lr
  40669c:	f04f 0000 	mov.w	r0, #0
  4066a0:	4770      	bx	lr
  4066a2:	bf00      	nop

004066a4 <sysfont_glyphs>:
	...
  4066c4:	0030 0030 0030 0030 0030 0030 0000 0030     0.0.0.0.0.0...0.
  4066d4:	0030 0000 0000 0000 0000 0000 006c 006c     0...........l.l.
  4066e4:	006c 006c 0000 0000 0000 0000 0000 0000     l.l.............
	...
  4066fc:	0000 0028 0028 007c 0028 0028 007c 0028     ..(.(.|.(.(.|.(.
  40670c:	0028 0000 0000 0000 0000 0000 0010 003c     (.............<.
  40671c:	0040 0020 0010 0008 0004 0078 0010 0000     @. .......x.....
	...
  406734:	0000 007c 00a4 00a8 0050 0028 0054 0094     ..|.....P.(.T...
  406744:	0088 0000 0000 0000 0000 0000 0060 0090     ............`...
  406754:	0090 0090 0060 0094 0088 0088 0070 0000     ....`.......p...
	...
  40676c:	0010 0010 0010 0000 0000 0000 0000 0000     ................
	...
  406788:	0008 0010 0020 0020 0020 0020 0020 0020     .... . . . . . .
  406798:	0010 0008 0000 0000 0000 0000 0020 0010     ............ ...
  4067a8:	0008 0008 0008 0008 0008 0008 0010 0020     .............. .
  4067b8:	0000 0000 0000 0028 0010 007c 0010 0028     ......(...|...(.
	...
  4067e0:	0010 0010 0010 00fe 0010 0010 0010 0000     ................
	...
  406808:	0010 0030 0020 0000 0000 0000 0000 0000     ..0. ...........
  406818:	0000 0000 0000 007c 0000 0000 0000 0000     ......|.........
	...
  40683c:	0000 0030 0030 0000 0000 0000 0000 0000     ..0.0...........
  40684c:	0000 0008 0008 0010 0010 0020 0020 0040     .......... . .@.
  40685c:	0040 0000 0000 0000 0000 0000 0000 0078     @.............x.
  40686c:	0084 008c 0094 00a4 00c4 0084 0078 0000     ............x...
	...
  406884:	0000 0010 0030 0050 0010 0010 0010 0010     ....0.P.........
  406894:	007c 0000 0000 0000 0000 0000 0000 0070     |.............p.
  4068a4:	0088 0008 0010 0020 0040 0080 00f8 0000     ...... .@.......
	...
  4068bc:	0000 0070 0088 0008 0030 0008 0008 0088     ..p.....0.......
  4068cc:	0070 0000 0000 0000 0000 0000 0000 0008     p...............
  4068dc:	0018 0028 0048 0088 00fc 0008 0008 0000     ..(.H...........
	...
  4068f4:	0000 0078 0080 0080 00f0 0008 0008 0008     ..x.............
  406904:	00f0 0000 0000 0000 0000 0000 0000 0030     ..............0.
  406914:	0040 0080 00f0 0088 0088 0088 0070 0000     @...........p...
	...
  40692c:	0000 00f8 0008 0010 0010 0020 0020 0040     .......... . .@.
  40693c:	0040 0000 0000 0000 0000 0000 0000 0070     @.............p.
  40694c:	0088 0088 0070 0088 0088 0088 0070 0000     ....p.......p...
	...
  406964:	0000 0070 0088 0088 0088 0078 0008 0010     ..p.......x.....
  406974:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
  406984:	0000 0030 0030 0000 0000 0030 0030 0000     ..0.0.....0.0...
	...
  4069a0:	0000 0030 0030 0000 0000 0030 0030 0060     ..0.0.....0.0.`.
  4069b0:	0040 0000 0000 0000 0000 0000 0008 0010     @...............
  4069c0:	0020 0040 0020 0010 0008 0000 0000 0000      .@. ...........
	...
  4069dc:	007c 0000 007c 0000 0000 0000 0000 0000     |...|...........
	...
  4069f4:	0040 0020 0010 0008 0010 0020 0040 0000     @. ....... .@...
	...
  406a0c:	0000 0030 0048 0008 0010 0020 0000 0000     ..0.H..... .....
  406a1c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
  406a2c:	003c 0042 009a 00aa 00aa 00be 0080 0078     <.B...........x.
	...
  406a44:	0000 0010 0028 0028 0044 007c 0044 0044     ....(.(.D.|.D.D.
  406a54:	0044 0000 0000 0000 0000 0000 0000 00f8     D...............
  406a64:	0084 0084 00f8 0084 0084 0084 00f8 0000     ................
	...
  406a7c:	0000 003c 0040 0080 0080 0080 0080 0040     ..<.@.........@.
  406a8c:	003c 0000 0000 0000 0000 0000 0000 00f0     <...............
  406a9c:	0088 0084 0084 0084 0084 0088 00f0 0000     ................
	...
  406ab4:	0000 00f8 0080 0080 00f0 0080 0080 0080     ................
  406ac4:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406ad4:	0080 0080 00f8 0080 0080 0080 0080 0000     ................
	...
  406aec:	0000 003c 0040 0080 0080 009c 0084 0044     ..<.@.........D.
  406afc:	0038 0000 0000 0000 0000 0000 0000 0088     8...............
  406b0c:	0088 0088 00f8 0088 0088 0088 0088 0000     ................
	...
  406b24:	0000 00f8 0020 0020 0020 0020 0020 0020     .... . . . . . .
  406b34:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406b44:	0008 0008 0008 0008 0008 0008 00f0 0000     ................
	...
  406b5c:	0000 0084 0088 0090 00a0 00d0 0088 0084     ................
  406b6c:	0084 0000 0000 0000 0000 0000 0000 0080     ................
  406b7c:	0080 0080 0080 0080 0080 0080 00fc 0000     ................
	...
  406b94:	0000 0084 00cc 00cc 00b4 00b4 0084 0084     ................
  406ba4:	0084 0000 0000 0000 0000 0000 0000 0084     ................
  406bb4:	00c4 00c4 00a4 00a4 0094 0094 008c 0000     ................
	...
  406bcc:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  406bdc:	0078 0000 0000 0000 0000 0000 0000 00f8     x...............
  406bec:	0084 0084 0084 00f8 0080 0080 0080 0000     ................
	...
  406c04:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  406c14:	0078 0020 0018 0000 0000 0000 0000 00f8     x. .............
  406c24:	0084 0084 0084 00f8 0088 0084 0084 0000     ................
	...
  406c3c:	0000 007c 0080 0080 0060 0018 0004 0004     ..|.....`.......
  406c4c:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406c5c:	0020 0020 0020 0020 0020 0020 0020 0000      . . . . . . ...
	...
  406c74:	0000 0084 0084 0084 0084 0084 0084 0084     ................
  406c84:	0078 0000 0000 0000 0000 0000 0000 0084     x...............
  406c94:	0084 0084 0048 0048 0048 0030 0030 0000     ....H.H.H.0.0...
	...
  406cac:	0000 0088 00a8 00a8 00a8 00a8 00a8 0050     ..............P.
  406cbc:	0050 0000 0000 0000 0000 0000 0000 0088     P...............
  406ccc:	0088 0050 0020 0020 0050 0088 0088 0000     ..P. . .P.......
	...
  406ce4:	0000 0088 0088 0088 0050 0050 0020 0020     ........P.P. . .
  406cf4:	0020 0000 0000 0000 0000 0000 0000 00fc      ...............
  406d04:	0004 0008 0010 0020 0040 0080 00fc 0000     ...... .@.......
	...
  406d1c:	0070 0040 0040 0040 0040 0040 0040 0040     p.@.@.@.@.@.@.@.
  406d2c:	0040 0040 0070 0000 0000 0000 0040 0040     @.@.p.......@.@.
  406d3c:	0020 0020 0020 0010 0010 0010 0008 0008      . . ...........
	...
  406d54:	0038 0008 0008 0008 0008 0008 0008 0008     8...............
  406d64:	0008 0008 0038 0000 0000 0000 0010 0028     ....8.........(.
  406d74:	0044 0000 0000 0000 0000 0000 0000 0000     D...............
	...
  406d9c:	0038 0000 0000 0000 0000 0000 0000 0020     8............. .
  406dac:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...
  406dc8:	0000 0070 0008 0008 0078 0088 007c 0000     ..p.....x...|...
	...
  406de0:	0080 0080 0080 00f8 0084 0084 0084 0084     ................
  406df0:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  406e00:	0000 0078 0080 0080 0080 0080 0078 0000     ..x.........x...
	...
  406e18:	0004 0004 0004 007c 0084 0084 0084 008c     ......|.........
  406e28:	0074 0000 0000 0000 0000 0000 0000 0000     t...............
  406e38:	0000 0078 0084 00fc 0080 0080 007c 0000     ..x.........|...
	...
  406e50:	001c 0020 0020 00fc 0020 0020 0020 0020     .. . ... . . . .
  406e60:	00fc 0000 0000 0000 0000 0000 0000 0000     ................
  406e70:	0000 007c 0084 0084 0084 0084 007c 0004     ..|.........|...
  406e80:	0078 0000 0000 0000 0080 0080 0080 00b8     x...............
  406e90:	00c4 0084 0084 0084 0084 0000 0000 0000     ................
  406ea0:	0000 0000 0000 0010 0000 0070 0010 0010     ..........p.....
  406eb0:	0010 0010 007c 0000 0000 0000 0000 0000     ....|...........
  406ec0:	0000 0008 0000 0078 0008 0008 0008 0008     ......x.........
  406ed0:	0008 0008 0008 0070 0000 0000 0080 0080     ......p.........
  406ee0:	0080 0088 0090 00a0 00d0 0088 0088 0000     ................
	...
  406ef8:	00e0 0020 0020 0020 0020 0020 0020 0020     .. . . . . . . .
  406f08:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  406f18:	0000 00a4 00fc 00a4 00a4 00a4 00a4 0000     ................
	...
  406f34:	0000 00b8 00c4 0084 0084 0084 0084 0000     ................
	...
  406f50:	0000 0078 0084 0084 0084 0084 0078 0000     ..x.........x...
	...
  406f6c:	0000 00b8 00c4 0084 0084 0084 00f8 0080     ................
  406f7c:	0080 0000 0000 0000 0000 0000 0000 007c     ..............|.
  406f8c:	0084 0084 0084 0084 007c 0004 0004 0000     ........|.......
	...
  406fa4:	0000 00d8 0060 0040 0040 0040 00f0 0000     ....`.@.@.@.....
	...
  406fc0:	0000 0078 0080 0040 0030 0008 00f0 0000     ..x...@.0.......
	...
  406fdc:	0020 00fc 0020 0020 0020 0020 001c 0000      ... . . . .....
	...
  406ff8:	0000 0088 0088 0088 0088 0088 007c 0000     ............|...
	...
  407014:	0000 0084 0084 0084 0048 0048 0030 0000     ........H.H.0...
	...
  407030:	0000 0088 00a8 00a8 00a8 00a8 0050 0000     ............P...
	...
  40704c:	0000 0088 0050 0020 0020 0050 0088 0000     ....P. . .P.....
	...
  407068:	0000 0084 0084 0048 0048 0030 0010 0020     ......H.H.0... .
  407078:	0040 0000 0000 0000 0000 0000 0000 00f8     @...............
  407088:	0008 0010 0020 0040 00f8 0000 0000 0000     .... .@.........
  407098:	0000 0000 0010 0020 0020 0010 0020 0020     ...... . ... . .
  4070a8:	0010 0020 0020 0010 0000 0000 0000 0000     .. . ...........
  4070b8:	0010 0010 0010 0010 0000 0000 0010 0010     ................
  4070c8:	0010 0010 0000 0000 0000 0000 0020 0010     ............ ...
  4070d8:	0010 0020 0010 0010 0020 0010 0010 0020     .. ..... ..... .
  4070e8:	0000 0000 07e2 0000 0003 0000 0013 0000     ................
  4070f8:	000c 0000 000f 0000 002d 0000 0001 0000     ........-.......
  407108:	3025 6432 253a 3230 3a64 3025 6432 0000     %02d:%02d:%02d..

00407118 <_global_impure_ptr>:
  407118:	0028 2040 4e49 0046 6e69 0066 414e 004e     (.@ INF.inf.NAN.
  407128:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  407138:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  407148:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  407158:	296c 0000 0030 0000                         l)..0...

00407160 <blanks.7223>:
  407160:	2020 2020 2020 2020 2020 2020 2020 2020                     

00407170 <zeroes.7224>:
  407170:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  407180:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

00407190 <__mprec_bigtens>:
  407190:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  4071a0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  4071b0:	bf3c 7f73 4fdd 7515                         <.s..O.u

004071b8 <__mprec_tens>:
  4071b8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  4071c8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  4071d8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  4071e8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  4071f8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  407208:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  407218:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  407228:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  407238:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  407248:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  407258:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  407268:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  407278:	9db4 79d9 7843 44ea                         ...yCx.D

00407280 <p05.6055>:
  407280:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  407290:	4f50 4953 0058 0000 002e 0000               POSIX.......

0040729c <_ctype_>:
  40729c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  4072ac:	2020 2020 2020 2020 2020 2020 2020 2020                     
  4072bc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  4072cc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  4072dc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  4072ec:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  4072fc:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40730c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40731c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

004073a0 <_init>:
  4073a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4073a2:	bf00      	nop
  4073a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4073a6:	bc08      	pop	{r3}
  4073a8:	469e      	mov	lr, r3
  4073aa:	4770      	bx	lr

004073ac <__init_array_start>:
  4073ac:	0040363d 	.word	0x0040363d

004073b0 <__frame_dummy_init_array_entry>:
  4073b0:	00400165                                e.@.

004073b4 <_fini>:
  4073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4073b6:	bf00      	nop
  4073b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4073ba:	bc08      	pop	{r3}
  4073bc:	469e      	mov	lr, r3
  4073be:	4770      	bx	lr

004073c0 <__fini_array_start>:
  4073c0:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 66a4 0040 0e0a 7d20               .....f@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <_impure_ptr>:
20400020:	0028 2040 0000 0000                         (.@ ....

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	0ca8 2040                                   ..@ 

20400454 <__malloc_av_>:
	...
2040045c:	0454 2040 0454 2040 045c 2040 045c 2040     T.@ T.@ \.@ \.@ 
2040046c:	0464 2040 0464 2040 046c 2040 046c 2040     d.@ d.@ l.@ l.@ 
2040047c:	0474 2040 0474 2040 047c 2040 047c 2040     t.@ t.@ |.@ |.@ 
2040048c:	0484 2040 0484 2040 048c 2040 048c 2040     ..@ ..@ ..@ ..@ 
2040049c:	0494 2040 0494 2040 049c 2040 049c 2040     ..@ ..@ ..@ ..@ 
204004ac:	04a4 2040 04a4 2040 04ac 2040 04ac 2040     ..@ ..@ ..@ ..@ 
204004bc:	04b4 2040 04b4 2040 04bc 2040 04bc 2040     ..@ ..@ ..@ ..@ 
204004cc:	04c4 2040 04c4 2040 04cc 2040 04cc 2040     ..@ ..@ ..@ ..@ 
204004dc:	04d4 2040 04d4 2040 04dc 2040 04dc 2040     ..@ ..@ ..@ ..@ 
204004ec:	04e4 2040 04e4 2040 04ec 2040 04ec 2040     ..@ ..@ ..@ ..@ 
204004fc:	04f4 2040 04f4 2040 04fc 2040 04fc 2040     ..@ ..@ ..@ ..@ 
2040050c:	0504 2040 0504 2040 050c 2040 050c 2040     ..@ ..@ ..@ ..@ 
2040051c:	0514 2040 0514 2040 051c 2040 051c 2040     ..@ ..@ ..@ ..@ 
2040052c:	0524 2040 0524 2040 052c 2040 052c 2040     $.@ $.@ ,.@ ,.@ 
2040053c:	0534 2040 0534 2040 053c 2040 053c 2040     4.@ 4.@ <.@ <.@ 
2040054c:	0544 2040 0544 2040 054c 2040 054c 2040     D.@ D.@ L.@ L.@ 
2040055c:	0554 2040 0554 2040 055c 2040 055c 2040     T.@ T.@ \.@ \.@ 
2040056c:	0564 2040 0564 2040 056c 2040 056c 2040     d.@ d.@ l.@ l.@ 
2040057c:	0574 2040 0574 2040 057c 2040 057c 2040     t.@ t.@ |.@ |.@ 
2040058c:	0584 2040 0584 2040 058c 2040 058c 2040     ..@ ..@ ..@ ..@ 
2040059c:	0594 2040 0594 2040 059c 2040 059c 2040     ..@ ..@ ..@ ..@ 
204005ac:	05a4 2040 05a4 2040 05ac 2040 05ac 2040     ..@ ..@ ..@ ..@ 
204005bc:	05b4 2040 05b4 2040 05bc 2040 05bc 2040     ..@ ..@ ..@ ..@ 
204005cc:	05c4 2040 05c4 2040 05cc 2040 05cc 2040     ..@ ..@ ..@ ..@ 
204005dc:	05d4 2040 05d4 2040 05dc 2040 05dc 2040     ..@ ..@ ..@ ..@ 
204005ec:	05e4 2040 05e4 2040 05ec 2040 05ec 2040     ..@ ..@ ..@ ..@ 
204005fc:	05f4 2040 05f4 2040 05fc 2040 05fc 2040     ..@ ..@ ..@ ..@ 
2040060c:	0604 2040 0604 2040 060c 2040 060c 2040     ..@ ..@ ..@ ..@ 
2040061c:	0614 2040 0614 2040 061c 2040 061c 2040     ..@ ..@ ..@ ..@ 
2040062c:	0624 2040 0624 2040 062c 2040 062c 2040     $.@ $.@ ,.@ ,.@ 
2040063c:	0634 2040 0634 2040 063c 2040 063c 2040     4.@ 4.@ <.@ <.@ 
2040064c:	0644 2040 0644 2040 064c 2040 064c 2040     D.@ D.@ L.@ L.@ 
2040065c:	0654 2040 0654 2040 065c 2040 065c 2040     T.@ T.@ \.@ \.@ 
2040066c:	0664 2040 0664 2040 066c 2040 066c 2040     d.@ d.@ l.@ l.@ 
2040067c:	0674 2040 0674 2040 067c 2040 067c 2040     t.@ t.@ |.@ |.@ 
2040068c:	0684 2040 0684 2040 068c 2040 068c 2040     ..@ ..@ ..@ ..@ 
2040069c:	0694 2040 0694 2040 069c 2040 069c 2040     ..@ ..@ ..@ ..@ 
204006ac:	06a4 2040 06a4 2040 06ac 2040 06ac 2040     ..@ ..@ ..@ ..@ 
204006bc:	06b4 2040 06b4 2040 06bc 2040 06bc 2040     ..@ ..@ ..@ ..@ 
204006cc:	06c4 2040 06c4 2040 06cc 2040 06cc 2040     ..@ ..@ ..@ ..@ 
204006dc:	06d4 2040 06d4 2040 06dc 2040 06dc 2040     ..@ ..@ ..@ ..@ 
204006ec:	06e4 2040 06e4 2040 06ec 2040 06ec 2040     ..@ ..@ ..@ ..@ 
204006fc:	06f4 2040 06f4 2040 06fc 2040 06fc 2040     ..@ ..@ ..@ ..@ 
2040070c:	0704 2040 0704 2040 070c 2040 070c 2040     ..@ ..@ ..@ ..@ 
2040071c:	0714 2040 0714 2040 071c 2040 071c 2040     ..@ ..@ ..@ ..@ 
2040072c:	0724 2040 0724 2040 072c 2040 072c 2040     $.@ $.@ ,.@ ,.@ 
2040073c:	0734 2040 0734 2040 073c 2040 073c 2040     4.@ 4.@ <.@ <.@ 
2040074c:	0744 2040 0744 2040 074c 2040 074c 2040     D.@ D.@ L.@ L.@ 
2040075c:	0754 2040 0754 2040 075c 2040 075c 2040     T.@ T.@ \.@ \.@ 
2040076c:	0764 2040 0764 2040 076c 2040 076c 2040     d.@ d.@ l.@ l.@ 
2040077c:	0774 2040 0774 2040 077c 2040 077c 2040     t.@ t.@ |.@ |.@ 
2040078c:	0784 2040 0784 2040 078c 2040 078c 2040     ..@ ..@ ..@ ..@ 
2040079c:	0794 2040 0794 2040 079c 2040 079c 2040     ..@ ..@ ..@ ..@ 
204007ac:	07a4 2040 07a4 2040 07ac 2040 07ac 2040     ..@ ..@ ..@ ..@ 
204007bc:	07b4 2040 07b4 2040 07bc 2040 07bc 2040     ..@ ..@ ..@ ..@ 
204007cc:	07c4 2040 07c4 2040 07cc 2040 07cc 2040     ..@ ..@ ..@ ..@ 
204007dc:	07d4 2040 07d4 2040 07dc 2040 07dc 2040     ..@ ..@ ..@ ..@ 
204007ec:	07e4 2040 07e4 2040 07ec 2040 07ec 2040     ..@ ..@ ..@ ..@ 
204007fc:	07f4 2040 07f4 2040 07fc 2040 07fc 2040     ..@ ..@ ..@ ..@ 
2040080c:	0804 2040 0804 2040 080c 2040 080c 2040     ..@ ..@ ..@ ..@ 
2040081c:	0814 2040 0814 2040 081c 2040 081c 2040     ..@ ..@ ..@ ..@ 
2040082c:	0824 2040 0824 2040 082c 2040 082c 2040     $.@ $.@ ,.@ ,.@ 
2040083c:	0834 2040 0834 2040 083c 2040 083c 2040     4.@ 4.@ <.@ <.@ 
2040084c:	0844 2040 0844 2040 084c 2040 084c 2040     D.@ D.@ L.@ L.@ 

2040085c <__malloc_sbrk_base>:
2040085c:	ffff ffff                                   ....

20400860 <__malloc_trim_threshold>:
20400860:	0000 0002                                   ....

20400864 <__global_locale>:
20400864:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	5d69 0040 5929 0040 0000 0000 729c 0040     i]@.)Y@......r@.
20400954:	7298 0040 713c 0040 713c 0040 713c 0040     .r@.<q@.<q@.<q@.
20400964:	713c 0040 713c 0040 713c 0040 713c 0040     <q@.<q@.<q@.<q@.
20400974:	713c 0040 713c 0040 ffff ffff ffff ffff     <q@.<q@.........
20400984:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009ac:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
